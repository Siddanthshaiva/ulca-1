openapi: 3.0.0
info:
  title: Unified Language Contribution API (ULCA) documentation
  description: 'The ULCA API documentation defines a core set of interfaces that enables users and communities to contribute AI/ML datasets to build a large, open Indic languages resource ecosystem. The dataset contributions are primarily geared toward the area of NLP, ASR/TTS and OCR. The documentation proposes core set of interfaces where various AI based models can be hosted, referenced and benchmarked. The interfaces enables entire community to participate, collaborate and track key benchmark parameters.'
  contact:
    name: ekstep foundation
    email: contact@ekstep.org
  version: 0.7.0
servers:
  - url: /ulca
paths:
  /v0.2/dataset/corpus/submit:
    post:
      tags:
        - 'dataset, core-api'
      summary: 'to starts submission of dataset creation process, the submission goes through stage life-cycle before it gets contributed to the ecosystem'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetSubmitRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
      security:
        - authToken: []
  /v0.2/dataset/corpus/label:
    post:
      tags:
        - 'dataset, core-api'
      summary: 'to submit referenced dataset or additional label in the dataset, primarily to enhance existing dataset by adding additional attribute(s) thus increasing existing dataset quality and coverage.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferenceDatasetRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
      security:
        - authToken: []
  /v0.2/dataset/corpus/status-check:
    post:
      tags:
        - 'dataset, core-api'
      summary: 'check the status of submitted dataset request, user can track the status by using the provided acknowledgment identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetStatusRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
  /v0.2/dataset/statistics/search:
    post:
      tags:
        - 'dataset, core-api'
      summary: 'to query analytical information for the available datasets, primarily used to get statistical count of records count present in the ULCA ecosystem. The queries can be done based upon the PARAMS like languages, domain, etc.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetSearchRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
  /v0.2/dataset/ingest:
    post:
      tags:
        - 'dataset, peripheral-api'
      summary: peripheral internal api that will actually transform the ingested dataset and push to the store after running business flow pertaining to individual dataset validation flow.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetIngestRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
      security:
        - authToken: []
  /v0.2/model/submit:
    post:
      tags:
        - 'model, core-api'
      summary: 'submit model to ULCA, from here benchmarking would be next stop'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelSubmitRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
      security:
        - authToken: []
  /v0.2/model/status-check:
    post:
      tags:
        - 'model, core-api'
      summary: check the status of submitted model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelStatusRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
  /v0.2/model/search:
    post:
      tags:
        - 'model, core-api'
      summary: to query analytical information for the available model for a task that is define at ULCA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelSearchRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
  /v0.2/model/try-me:
    post:
      tags:
        - 'model, core-api'
      summary: to provide any interface to try out the model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelTryMeRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
  /v0.2/model/benchmark/start:
    post:
      tags:
        - 'model, core-api'
      summary: 'starts the benchmarking process of the submitted model, benchmarking can be done on all available benchmark or on the user supplied subset. Benchmarking can be a long running operation, status-check should be used to'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelBenchmarkRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
  /v0.2/model/benchmark/status-check:
    post:
      tags:
        - 'model, core-api'
      summary: returns the benchmark progress status check.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelBenchmarkStatusRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
  /v0.2/model/benchmark/publish:
    post:
      tags:
        - 'model, core-api'
      summary: starts the benchmark publishing process of the submitted model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelBenchmarkPublishRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
  /v0.2/model/benchmark/detailed-result:
    post:
      tags:
        - 'model, core-api'
      summary: returns the record level score of the mentioned metric
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelBenchmarkDetailResultRequest'
        required: true
      responses:
        '200':
          description: On successful completion of the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpSuccessResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
components:
  schemas:
    DatasetSubmitRequest:
      allOf:
        - $ref: '#/components/schemas/Dataset'
        - type: object
      type: object
      description: request to submit the dataset
      required:
        - type
      properties:
        type:
          description: one of the defined possible values
          $ref: '#/components/schemas/DatasetType'
    ReferenceDatasetRequest:
      allOf:
        - $ref: '#/components/schemas/Dataset'
        - type: object
      required:
        - type
        - referenceDatasetId
      type: object
      properties:
        type:
          description: one of the defined possible values
          $ref: '#/components/schemas/DatasetType'
        referenceDatasetId:
          type: string
          description: original dataset identifier from which referenced dataset is drived.
          format: uuidv4
    DatasetSubmitResponse:
      type: object
      properties:
        acknowlegmentId:
          type: string
          description: 'auto generated identifier to identify the internal representation, user can check the status of dataset stage using this acknowlegment identifier'
          format: uuidv4
        timestamp:
          type: string
          format: datetime
          description: dataset submission timestamp
      description: 'uploaded dataset goes through series of validation checks, automated or human-in-the-loop before it gets listed'
    DatasetSearchRequest:
      required:
        - criterions
        - groupby
        - type
      type: object
      properties:
        type:
          description: one of the defined possible values
          $ref: '#/components/schemas/DatasetType'
        criterions:
          type: array
          description: comma separted system defined tags
          items:
            $ref: '#/components/schemas/SearchParams'
        groupby:
          type: array
          description: groupby based upon the entity
          items:
            $ref: '#/components/schemas/SearchParams'
            minItems: 1
        starttime:
          type: string
          description: start of timestamp
          format: datetime
        endtime:
          type: string
          description: end of timestamp
          format: datetime
    DatasetSearchResponse:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          description: collection of value and label
          items:
            $ref: '#/components/schemas/DataPoint'
    DatasetStatusRequest:
      type: object
      required:
        - acknowlegmentId
      properties:
        acknowlegmentId:
          type: string
          description: provided acknowledgment identifier at the time of dataset submission
    
    DatasetStatusResponse:
      type: object
      required:
        - acknowledgmentId
        - status
        - progress
      properties:
        acknowlegmentId:
          type: string
          description: user provided identifier
        dataset:
          type: object
          description: uploaded dataset and its system representation
          $ref: '#/components/schemas/Dataset'
        status:
          type: string
          description: status of each stage
          enum:
            - in-progress
            - status-with-errors
            - success
            - failed
        progress:
          type: object
          description: detailed for the dataset as it can be longer running operation
          $ref: '#/components/schemas/DatasetProgressInformation'
    
    DatasetIngestRequest:
      type: object
      required:
        - acknowlegmentId
        - params
        - rows
      properties:
        acknowlegmentId:
          type: string
          description: the acknowlegment identifier should be same as returned to the user in the body of DatasetSubmitResponse.
          format: uuidv4
        referenceDatasetId:
          type: string
          description: original dataset identifier from which referenced dataset is drived.
          format: uuidv4
        params:
          type: object
          oneOf:
            - $ref: '#/components/schemas/ParallelDatasetParamsSchema'
            - $ref: '#/components/schemas/MonolingualParamsSchema'
            - $ref: '#/components/schemas/ASRParamsSchema'
            - $ref: '#/components/schemas/DocumentOCRParamsSchema'
        rows:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ParallelDatasetRowSchema'
              - $ref: '#/components/schemas/MonolingualRowSchema'
              - $ref: '#/components/schemas/ASRRowSchema'
              - $ref: '#/components/schemas/DocumentOCRRowSchema'
            minItems: 100
    ModelSubmitRequest:
      type: object
      description: starting the workflow for model life-cycle
      properties:
        model:
          $ref: '#/components/schemas/Model'
    ModelSubmitResponse:
      type: object
      description: 'ULCA will acknowledge the submission, however model is not published yet'
      properties:
        acknowlegmentId:
          type: string
          description: auto generated identifier to identify the internal submission
          format: uuidv4
        timestamp:
          type: string
          format: datetime
          description: submission timestamp
    ModelStatusRequest:
      type: object
      required:
        - acknowlegmentId
      properties:
        acknowlegmentId:
          type: string
          description: provided acknowledgment identifier at the time of submission
    ModelStatusResponse:
      type: object
      required:
        - acknowledgmentId
        - contributor
        - timelines
      properties:
        acknowlegmentId:
          type: string
          description: ULCA provided identifier
        contributor:
          type: object
          description: submitter of the dataset
          $ref: '#/components/schemas/Contributor'
        timelines:
          type: array
          items:
            $ref: '#/components/schemas/Timeline'
    ModelSearchRequest:
      required:
        - criterions
        - groupby
        - type
      type: object
      properties:
        type:
          description: one of the defined possible values
          $ref: '#/components/schemas/ModelTask'
        criterions:
          type: array
          description: comma separted system defined tags
          items:
            $ref: '#/components/schemas/SearchParams'
        groupby:
          type: array
          description: groupby based upon the entity
          items:
            $ref: '#/components/schemas/SearchParams'
            minItems: 1
        starttime:
          type: string
          description: start of timestamp
          format: datetime
        endtime:
          type: string
          description: end of timestamp
          format: datetime
    ModelSearchResponse:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          description: collection of model
          items:
            $ref: '#/components/schemas/Model'
    ModelTryMeRequest:
      type: object
      properties:
        modelId:
          type: string
          description: model identifier allocated by ULCA
        requestSchema:
          type: object
          oneOf:
            - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/translation-schemas.yml#/components/schemas/TranslateRequest'
            - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/audio-schema.yml#/components/schemas/SpeechRecognitionRequest'
            - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/document-ocr-schema.yml#/components/schemas/DocumentOCRRequest'
    ModelTryMeResponse:
      type: object
      properties:
        modelId:
          type: string
          description: model identifier allocated by ULCA
        requestSchema:
          type: object
          oneOf:
            - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/translation-schemas.yml#/components/schemas/TranslateResponse'
            - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/audio-schema.yml#/components/schemas/SpeechRecognitionResult'
            - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/document-ocr-schema.yml#/components/schemas/DocumentOCRResponse'
    ModelBenchmarkRequest:
      type: object
      properties:
        modelId:
          type: string
          description: model identifier allocated by ULCA
        benchmarks:
          type: array
          description: you can run benchmarking on subset of available benchmarks
          items:
            $ref: '#/components/schemas/Benchmarks'
    ModelBenchmarkStatusRequest:
      type: object
      required:
        - acknowlegmentId
      properties:
        acknowlegmentId:
          type: string
          description: provided acknowledgment identifier at the time of starting benchmark operation
    ModelBenchmarkResponse:
      type: object
      properties:
        acknowlegmentId:
          type: string
          description: ULCA provided identifier
        timestamp:
          type: string
          format: datetime
          description: submission timestamp
        status:
          type: string
          enum:
            - in-progress
            - completed
        results:
          oneOf:
            - $ref: '#/components/schemas/TranslationBenchmarkResult'
            - $ref: '#/components/schemas/DocumentLayoutBenchmarkResult'
            - $ref: '#/components/schemas/DocumentOCRBenchmark'
            - $ref: '#/components/schemas/ASRBenchmarkResult'
    ModelBenchmarkPublishRequest:
      type: object
      properties:
        modelId:
          type: string
          description: identifier provided by ULCA system
        results:
          oneOf:
            - $ref: '#/components/schemas/TranslationBenchmarkResult'
            - $ref: '#/components/schemas/DocumentLayoutBenchmarkResult'
            - $ref: '#/components/schemas/DocumentOCRBenchmark'
            - $ref: '#/components/schemas/ASRBenchmarkResult'
    ModelBenchmarkPublishResponse:
      type: object
      properties:
        modelId:
          type: string
          description: identifier provided by ULCA system
        results:
          oneOf:
            - $ref: '#/components/schemas/TranslationBenchmarkResult'
            - $ref: '#/components/schemas/DocumentLayoutBenchmarkResult'
            - $ref: '#/components/schemas/DocumentOCRBenchmark'
            - $ref: '#/components/schemas/ASRBenchmarkResult'
    ModelBenchmarkDetailResultRequest:
      type: object
      properties:
        modelId:
          type: string
          description: identifier provided by ULCA system
    ModelBenchmarkDetailResultResponse:
      type: object
      properties:
        modelId:
          type: string
          description: identifier provided by ULCA system
        results:
          oneOf:
            - $ref: '#/components/schemas/TranslationBenchmarkResult'
            - $ref: '#/components/schemas/DocumentLayoutBenchmarkResult'
            - $ref: '#/components/schemas/DocumentOCRBenchmark'
            - $ref: '#/components/schemas/ASRBenchmarkResult'
    
    HttpSuccessResponse:
      type: object
      properties:
        ok:
          type: boolean
          description: request successful indicator.
        why:
          type: string
          description: Response message.
        status:
          type: object
          description: status code as returned
          oneOf:
            - $ref: '#/components/schemas/StatusCode'
        data:
          type: object
          description: response object based upon the submitted request
          oneOf:
            - $ref: '#/components/schemas/ModelSubmitResponse'
            - $ref: '#/components/schemas/ModelStatusResponse'
            - $ref: '#/components/schemas/ModelSearchResponse'
            - $ref: '#/components/schemas/ModelBenchmarkResponse'
            - $ref: '#/components/schemas/ModelBenchmarkPublishResponse'
            - $ref: '#/components/schemas/ModelBenchmarkDetailResultResponse'
            - $ref: '#/components/schemas/ModelTryMeResponse'
            - $ref: '#/components/schemas/DatasetSubmitResponse'
            - $ref: '#/components/schemas/DatasetStatusResponse'
            - $ref: '#/components/schemas/DatasetSearchResponse'
            
    HttpErrorResponse:
      type: object
      properties:
        ok:
          type: boolean
          description: request successful indicator.
        why:
          type: string
          description: Response message.
        status:
          type: object
          description: status code as returned
          oneOf:
            - $ref: '#/components/schemas/StatusCode'
  
    LanguagePair:
      type: object
      description: language pair, make targetLanguage null to reuse the object to indicate single language
      required:
        - sourceLanguage
      properties:
        sourceLanguage:
          type: object
          properties:
            value:
              type: string
              description: Indic language code, iso-639-1, iso 639-2
              enum:
              - en
              - hi
              - mr
              - ta
              - te
              - kn
              - gu
              - pa
              - bn
              - ml
              - as
              - brx
              - doi
              - ks
              - kok
              - mai
              - mni
              - ne
              - or
              - sd
              - si
              - ur
              - sat
              - lus
              - njz
              - pnr
              - kha
              - grt
              - sa
            name:
              type: string
              description: human name of language code
        targetLanguage:
          type: object
          properties:
            value:
              type: string
              description: Indic language code, iso-639-1, iso 639-2
              enum:
              - en
              - hi
              - mr
              - ta
              - te
              - kn
              - gu
              - pa
              - bn
              - ml
              - as
              - brx
              - doi
              - ks
              - kok
              - mai
              - mni
              - ne
              - or
              - sd
              - si
              - ur
              - sat
              - lus
              - njz
              - pnr
              - kha
              - grt
              - sa
            name:
              type: string
              description: human name of language code
    
    LanguagePairs:
        type: array
        items:
          $ref: '#/components/schemas/LanguagePair'
          minItems: 1
    
    Domain:
        type: object
        properties:
          value:
            type: array
            items:
              type: string
              enum:
              - general
              - news
              - education
              - legal
              - government-press-release
              - healthcare
              - movies
              - subtitles
              - sports
    
    License:
      type: object
      properties:
        value:
          type: string
          enum:
          - cc-by-4.0
          - mit
          - gpl-3.0
          - bsd-3-clause
          - cc-by-nd-2.0
          
    Contributor:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 5
          type: string
          description: human name of the contributor
        oauthId:
          $ref: '#/components/schemas/OAuthIdentity'
        aboutMe:
          type: string
          description: describing the contributor
    
    OAuthIdentity:
      type: object
      properties:
        identifier:
          type: string
          description: system identification for the contributor
          format: uuidv4
        oauthId:
          type: string
          description: popular social network identifier, typically identifier returned after auth
        provider:
          type: string
          description: user authentication provider
          enum:
          - custom
          - github
          - facebook
          - instagram
          - google
          - yahoo
    
    Source:
      type: object
      properties:
        value:
          type: array
          description: user defined sources
          items:
            type: string
    
    CollectionMethod:
      type: object
      properties:
        value:
          type: array
          description: various collection methods user have used to create the dataset
          items:
            type: string
            enum:
            - web-scrapping
            - manual-human-translated
            - algorithm-auto-aligned
            - algorithm-back-translated
            - phone-recorded-audio
            - crowd-sourced-audio

    DataPoint:
      required:
      - label
      - value
      type: object
      properties:
        label:
          type: string
          description: string value to show
        value:
          type: number
          description: numeric value of the data point
        internalLabel:
          type: string
          description: internal representation of the label

    ImageFormat:
      type: object
      properties:
        value:
          type: string
          description: image format description
          enum:
          - jpeg
          - bmp
          - png
          - tiff
    
    ImageTextType:
      type: object
      properties:
        value:
          type: string
          description: textual data present in the image file
          enum:
          - scene-text
          - typewriter-typed-text
          - computer-typed-text
          - handwritten-text
    
    ImageDPI:
      type: object
      properties:
        value:
          type: string
          description: allowed dpi
          enum:
          - 300_dpi
          - 72_dpi
    
    AudioFormat:
      type: object
      properties:
        value:
          type: string
          description: audio format description
          enum:
          - wav
          - pcm
          - mp3
    
    AudioChannel:
      type: object
      properties:
        value:
          type: string
          description: number of channel in the audio
          enum:
          - mono
          - stero
    
    AudioSampleRate:
      type: object
      properties:
        value:
          type: string
          description: sample rate of the audio file
          enum:
          - 44khz
          - 22khz
          - 8khz
    
    AudioBitsPerSample:
      type: object
      properties:
        value:
          type: string
          description: number of bits per sample
          enum:
          - sixteen
          - eight
          
    NumberOfSpeakers:
      type: object
      properties:
        value:
          type: number
          description: number of speakers in the recorded audio file
          minimum: 1
    
    NumberOfHoursPerGenders:
      type: array
      items:
        $ref: '#/components/schemas/NumberOfHoursPerGender'
        minItems: 1
    
    NumberOfHoursPerGender:
      type: object
      properties:
        value:
          type: number
          description: number of hours per gender
          minimum: 1
        gender:
          type: string
          description: gender description
          enum:
            - male
            - female
            - others

    DatasetDirectory:
      type: object
      required: 
        - data
        - params
      description: The object defines the physical structure of the uploaded dataset file. The dataset data and its respective parameters has to be present in an individual directory/folder. The dataset data should have name 'data.json' or 'data.csv', similarly the associated parameters should have name 'params.json' or 'params.csv'. Dataset data file should adhere to 'dataSchema' described in the properties, similarly the parameter of the dataset should adhere to 'paramSchema'. Non compliant will result in rejection of the submission.
      properties:
        data:
          type: object
          default: data.json
          $ref: '#/components/schemas/DatasetFile'
          description: name and file attributes of data file
        dataSchema:
          type: object
          $ref: '#/components/schemas/DatasetDataRowSchema'
        params:
          type: object
          default: params.json
          $ref: '#/components/schemas/DatasetFile'
          description: name and file attributes of params file
        paramSchema:
          type: object
          $ref: '#/components/schemas/DatasetParamsSchema'
    
    DatasetDirectories:
      type: object
      description: The object represents a compressed file that can contains multiple 'DatasetDirectory' object.
      properties:
        datasetFiles:
          type: array
          items:
            $ref: '#/components/schemas/DatasetDirectory'
            minItems: 1
  
    DatasetParamsSchema:
      type: object
      description: the dataset params.json/.csv file should follow this schema
      properties:
        params: 
          type: object
          oneOf:
            - $ref: '#/components/schemas/ParallelDatasetParamsSchema'
            - $ref: '#/components/schemas/MonolingualParamsSchema'
            - $ref: '#/components/schemas/ASRParamsSchema'
            - $ref: '#/components/schemas/DocumentOCRParamsSchema'
    
    DatasetDataRowSchema:
      type: object
      description: the dataset data.json/.csv file should follow this schema
      properties:
        data:
          type: object
          oneOf:
            - $ref: '#/components/schemas/ParallelDatasetRowSchema'
            - $ref: '#/components/schemas/MonolingualRowSchema'
            - $ref: '#/components/schemas/ASRRowSchema'
            - $ref: '#/components/schemas/DocumentOCRRowSchema'
    
    DatasetCommonParamsSchema:
      type: object
      description: common parameters or attributes of dataset that is primarily same across the supported dataset.
      required:
        - languages
        - collectionSource
        - domain
        - collectionMethod
        - license
        - submitter
        - contributors
      properties:
        version:
          type: string
          default: 1.0
          description: params schema version
        languages:
          $ref: '#/components/schemas/LanguagePair'
        collectionSource:
          $ref: '#/components/schemas/Source'
        domain:
          $ref: '#/components/schemas/Domain'
        collectionMethod:
          $ref: '#/components/schemas/CollectionMethod'
        license:
          $ref: '#/components/schemas/License'
        submitter:
          $ref: '#/components/schemas/Contributor'
        contributors:
          type: array
          description: users' or teams' who are part of the dataset curation exercise.
          items:
            $ref: '#/components/schemas/Contributor'

    ParallelDatasetParamsSchema:
      allOf:
        - $ref: '#/components/schemas/DatasetCommonParamsSchema'
        - type: object
      type: object
      properties:
        targetValidated:
          $ref: '#/components/schemas/TargetTextValidated'
        alignmentMethod:
          $ref: '#/components/schemas/TextAlignmentMethod'

    ParallelDatasetRowSchema:
      required:
        - sourceText
        - targetText
      type: object
      properties:
        sourceText:
          type: string
          description: textual data in source language
        targetText:
          type: string
          description: textual data in target language
        validatedTargetText:
          type: string
          description: textual data after annotator has validate the target sentence
        alignmentScore:
          maximum: 1
          minimum: 0.5
          type: number
          description: algorithm score secured for the sentence pair
        
      description: the schema of data file uploaded should adhere to this specified structure.
  
    MonolingualParamsSchema:
      allOf:
        - $ref: '#/components/schemas/DatasetCommonParamsSchema'
        - type: object
      type: object
    
    MonolingualRowSchema:
      required:
        - text
      type: object
      description: the schema defines the column/attribute name of the data file uploaded.
      properties:
        text:
          type: string
          description: textual data in source language
  
    ASRParamsSchema:
      allOf:
        - $ref: '#/components/schemas/DatasetCommonParamsSchema'
        - type: object
      type: object
      properties:
        format:
          $ref: '#/components/schemas/AudioFormat'
        channel:
          $ref: '#/components/schemas/AudioChannel'
        samplingRate:
          $ref: '#/components/schemas/AudioSampleRate'
        bitsPerSample:
          $ref: '#/components/schemas/AudioBitsPerSample'
        numberOfSpeakers:
          $ref: '#/components/schemas/NumberOfSpeakers'
        numberOfHoursPerGender:
          $ref: '#/components/schemas/NumberOfHoursPerGenders'
    
    ASRRowSchema:
      required:
        - audioFilename
        - text
      type: object
      description: the schema defines the column name present in physical file that is being pointed by dataFilename key.
      properties:
        audioFilename:
          type: string
          description: filename of the audio file
        text:
          type: string
          description: textual output of the audio
        snr:
          type: string
          description: SNR information
  
    DocumentOCRParamsSchema:
      allOf:
        - $ref: '#/components/schemas/DatasetCommonParamsSchema'
        - type: object
      required:
        - ocrtype
        - format
        - dpi
        - imageTextType
        - schema
      type: object
      properties:
        ocrtype:
          $ref: '#/components/schemas/DocumentOCRDatasetType'
        format:
          $ref: '#/components/schemas/ImageFormat'
        dpi:
          $ref: '#/components/schemas/ImageDPI'
        imageTextType:
          $ref: '#/components/schemas/ImageTextType'

    DocumentOCRRowSchema:
      required:
        - imageFilename
        - boundingBox
      type: object
      description: the schema defines the column name present in physical file that is being pointed by dataFilename key.
      properties:
        imageFilename:
          type: string
          description: filename of the image file
        boundingBox:
          $ref: '#/components/schemas/BoundingBox'
        layoutClass:
          type: string
          enum:
            - paragraph
            - line
            - word
            - table
            - table-cell
            - header
            - footer
            - subscript
            - superscript
            - inline-image
            - background-image
            - watermark
            - signature
            - list-bullets
            - caption
        groundTruth:
          type: string
          description: text data present in boundingbox
    
    DatasetFile:
      type: object
      description: represent the physical file attributes
      required:
        - filename
        - fileType
      properties:
        filename:
          type: string
          description: name of the file
          enum:
            - data
            - params
        fileType:
          type: string
          description: file format
          enum:
            - json
            - csv
    
    Dataset:
      required:
        - description
        - datasetFileId
      type: object
      description: describes the dataset schema
      properties:
        datasetId:
          type: string
          description: unique identification of the dataset. This will be auto-generated value once the submitted dataset is validated by the system
          format: uuid4
        count:
          minimum: 100
          type: number
          description: actual number of unique records present under a dataset. The count can/will vary from the original submitted dataset because of validation stage.
        description:
          maxLength: 200
          minLength: 50
          type: string
          description: describes the purpose and usage of the dataset so that other user can get benefit out of it.
          example: contribution from team Anuvaad for government press release domain
        datasetFileId:
          $ref: '#/components/schemas/DatasetFileIdentifier'
        submittedOn:
          type: string
          description: timestamp when dataset is uploaded
          format: datetime
        validatedOn:
          type: string
          description: timestamp when dataset is validated
          format: datetime
        publishedOn:
          type: string
          description: timestamp when dataset got listed
          format: datetime
    
    Timeline:
      type: object
      required:
        - stage
        - message
        - timestamp
        - status
      description: stage life-cycle of dataset before it gets published or rejected
      properties:
        stage:
          oneOf:
            - $ref: '#/components/schemas/ProcessStage'
          description: life-cycle of model and its benchmark
        message:
          type: string
          description: human readable message attached for each stage change
        timestamp:
          type: string
          format: datetime
          description: timestamp of stage changes
        status:
          type: string
          description: status of each stage
          enum:
            - in-progress
            - status-with-errors
            - success
            - failed
    
    SearchParams:
      type: object
      properties:
        key:
          type: string
          enum:
            - languages
            - domain
            - collectionMethod
            - collectionSource
        params:
          type: object
          oneOf:
            - $ref: '#/components/schemas/Domain'
            - $ref: '#/components/schemas/LanguagePair'
            - $ref: '#/components/schemas/Source'
            - $ref: '#/components/schemas/CollectionMethod'

    DatasetFileIdentifier:
      type: object
      required:
        - fileId
        - datasetFormatType
      description: the identifier object retuned when compressed dataset file is uploaded. https://raw.githubusercontent.com/tus/tus-resumable-upload-protocol/master/OpenAPI/openapi3.yaml
      properties:
        fileId:
          type: string
          format: uuidv4
          description: upload identifier returned by the file upload service
        datasetFormatType:
          type: string
          enum:
            - json
            - csv
        timestamp:
          type: string
          format: datetime
          description: upload completed timestamp
        format:
          type: string
          description: supported file compression format
          enum:
            - tar_gz
            - zip
  
    TargetTextValidated:
      type: object
      properties:
        value:
          type: string
          enum:
          - text-validated
    
    TextAlignmentMethod:
      type: object
      properties:
        value:
          type: string
          enum:
          - LABSE
          - LASER
          - FAISS
    
    BoundingBox:
      type: object
      properties:
        vertices:
          minLength: 4
          type: array
          items:
            $ref: '#/components/schemas/Vertex'
      description: array of vertex with clockwise coordinate arrangement
    
    Vertex:
      type: object
      properties:
        x:
          type: number
          description: x-coordinate
        y:
          type: number
          description: y-coordinate
    
    DocumentOCRDatasetType:
      type: object
      properties:
        value:
          type: string
          description: various option of ocr type
          enum:
          - layout-dataset-type
          - ocr-dataset-type
          - character-dataset-type
          
    DatasetType:
      type: string
      description: supported dataset type under language initiatives
      enum:
        - parallel-corpus
        - monolingual-corpus
        - asr-corpus
        - document-ocr-corpus
    
    StatusCode:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: status code as encountered in the processing life-cycle
          enum:
            - insufficent-dataset-rows-provided
            - searched-query-not-supported
            - missing-mandatory-parameters
            - authorization-failed
            - schema-validation-failed
            - object-validation-failed
            - benchmark-failed
            - invalid-callback-url
        message:
          type: string
          description: human understandable format
    
    Model:
      type: object
      required: 
        - modelId
        - name
        - description
        - task
        - languages
        - domain
        - license
        - submiter
        - contributors
        - inferenceEndPoint
        - stage
        - trainingDataset
        
      properties:
        modelId:
          type: string
          description: system generated unique identification of model
          format: uuidv4
        name:
          type: string
          description: model name that you want your users to see
        description:
          type: string
          description: brief description about model, its goal, basically something sweet about it
          minLength: 50
          maxLength: 200
          example: Speech recognition model for classroom lecture
        task:
          type: object
          description: what kind of task model achieves
          $ref: '#/components/schemas/ModelTask'
        languages:
          type: object
          description: what all languages it supports
          $ref: '#/components/schemas/LanguagePairs'
        license:
          type: object
          $ref: '#/components/schemas/License'
        domain:
          description: what domain your model cater to and its only search purposes.
          $ref: '#/components/schemas/Domain'
        submitter:
          $ref: '#/components/schemas/Contributor'
        contributors:
          type: array
          description: users' or teams' who are part of the dataset curation exercise.
          items:
            $ref: '#/components/schemas/Contributor'
        inferenceEndPoint:
          type: object
          description: hosted location of model. Model can be hosted on submitter's infrastructure and must following respective API contract so that UMCA can make API callback to execute benchmarks
          $ref: '#/components/schemas/InferenceAPIEndPoint'
        fileUploadEndPoint:
          type: object
          description: hosted location of model. Model can be hosted on submitter's infrastructure and must following respective API contract so that UMCA can make API callback to execute benchmarks
          $ref: '#/components/schemas/FileUploadAPIEndPoint'
        benchmarksPerformance:
          type: object
          description: ULCA will execute various benchmarks on the model, it holds all benchmarking score that model has received.
          oneOf:
            - $ref: '#/components/schemas/TranslationBenchmarkResult'
            - $ref: '#/components/schemas/DocumentLayoutBenchmarkResult'
            - $ref: '#/components/schemas/DocumentOCRBenchmark'
            - $ref: '#/components/schemas/ASRBenchmarkResult'
        stage:
          description: after submission model goes through a process before it gets listed.
          $ref: '#/components/schemas/ProcessStage'
        trainingDataset:
          $ref: '#/components/schemas/TrainingDataset'
  
    InferenceAPIEndPoint:
      type: object
      description: hosted location defines the end point of the model inference. 
      required: 
        - callbackUrl
        - schema
      properties:
        callbackUrl:
          type: string
          format: url
        schema:
          type: object
          oneOf:
            - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/translation-schemas.yml#/components/schemas/TranslateRequest'
            - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/audio-schema.yml#/components/schemas/SpeechRecognitionRequest'
            - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/document-ocr-schema.yml#/components/schemas/DocumentOCRRequest'
            
    FileUploadAPIEndPoint:
      type: object
      description: hosted location defines the end point of the model inference. 
      required: 
        - callbackUrl
        - schema
      properties:
        callbackUrl:
          type: string
          format: url
        schema:
          type: object
          oneOf:
            - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/file-upload-schema.yml#/components/schemas/FileUploadRequest'
    
    Benchmarks:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/TranslationBenchmark'
          - $ref: '#/components/schemas/DocumentLayoutBenchmark'
          - $ref: '#/components/schemas/DocumentOCRBenchmark'
          - $ref: '#/components/schemas/ASRBenchmark'
        minLength: 1
  
    Benchmark:
      type: object
      description: the benchmark dataset for model task.
      required: 
        - name
        - description
        - domain
      properties:
        benchmarkId:
          type: string
          description: auto-generated unique identification of benchmark data
          format: uuid4
        name:
          type: string
          description: name of the benchmark
        description:
          type: string
          description: description of the benchmark including how it has been curated
          minLength: 50
          maxLength: 200
          example: benchmark sentences for government press release domain
        domain:
          type: object
          $ref: '#/components/schemas/Domain'
        createdOn:
          type: string
          description: timestamp when benchmark is created
          format: datetime
        submittedOn:
          type: string
          description: timestamp when benchmark is submitted/published
          format: datetime
    
    TranslationBenchmark:
      allOf:
        - $ref: '#/components/schemas/Benchmark'
        - type: object
      type: object
      description: Translation benchmark representation
      properties:
        languages:
          type: object
          $ref: '#/components/schemas/LanguagePair'
        score:
          type: array
          items:
            $ref: '#/components/schemas/TranslationBenchmarkScore'
            minItems: 1
    
    DocumentLayoutBenchmark:
      allOf:
        - $ref: '#/components/schemas/Benchmark'
        - type: object
      type: object
      description: Document layout benchmark representation
      properties:
        score:
          type: array
          items:
            $ref: '#/components/schemas/DocumentLayoutBenchmarkScore'
            minItems: 1
            
    DocumentOCRBenchmark:
      allOf:
        - $ref: '#/components/schemas/Benchmark'
        - type: object
      type: object
      description: Document layout benchmark representation
      properties:
        languages:
          type: object
          $ref: '#/components/schemas/LanguagePair'
        score:
          type: array
          items:
            $ref: '#/components/schemas/DocumentOCRBenchmarkScore'
            minItems: 1
    
    ASRBenchmark:
      allOf:
        - $ref: '#/components/schemas/Benchmark'
        - type: object
      type: object
      description: Document layout benchmark representation
      properties:
        languages:
          type: object
          $ref: '#/components/schemas/LanguagePair'
        score:
          type: array
          items:
            $ref: '#/components/schemas/ASRBenchmarkScore'
            minItems: 1
    
    TranslationBenchmarkScore:
      type: object
      description: translation benchmark score
      required: 
        - metricName
        - score
      properties:
        metricName:
          type: string
          description: the automatic evaluation metric name
          enum: 
            - bleu
            - sacrebleu
            - meteor
            - lepor
        score:
          type: number
          description: is the score as per defined metric for this benchmark.
          
    ASRBenchmarkScore:
      type: object
      description: ASR/TTS benchmark score
      required: 
        - metricName
        - score
      properties:
        metricName:
          type: string
          description: the automatic evaluation metric name
          enum: 
            - wer
            - cer
        score:
          type: number
          description: is the score as per defined metric for this benchmark.
    
    DocumentLayoutBenchmarkScore:
      type: object
      description: ASR/TTS benchmark score
      required: 
        - metricName
        - score
      properties:
        metricName:
          type: string
          description: the automatic evaluation metric name
          enum: 
            - precision
            - recall
            - h1-mean
        score:
          type: number
          description: is the score as per defined metric for this benchmark.
          
    DocumentOCRBenchmarkScore:
      type: object
      description: ASR/TTS benchmark score
      required: 
        - metricName
        - score
      properties:
        metricName:
          type: string
          description: the automatic evaluation metric name
          enum: 
            - wer
            - cer
        score:
          type: number
          description: is the score as per defined metric for this benchmark.
  
    TranslationIndividualBenchmarkResult:
      allOf:
        - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/translation-schemas.yml#/components/schemas/Sentence'
        - type: object
      type: object
      properties:
        scores:
          type: array
          description: score calculated for each metric mentioned in selected benchmark
          items:
            $ref: '#/components/schemas/TranslationBenchmarkScore'
            minItems: 1
  
    TranslationBenchmarkResult:
      type: object
      description: describes the translation benchmark result
      properties:
        benchmarkId:
          type: string
          description: auto-generated unique identification of benchmark data
          format: uuid4
        results:
          type: array
          items:
            $ref: '#/components/schemas/TranslationIndividualBenchmarkResult'
        summaries:
          type: array
          items:
            $ref: '#/components/schemas/TranslationBenchmarkScore'
            minItems: 1
  
    DocumentLayoutIndividualPageBenchmarkResult:
      type: object
      properties:
        class:
          type: string
          description: supported type of document layout 
        scores:
          type: array
          description: score calculated for each metric mentioned in selected benchmark
          items:
            $ref: '#/components/schemas/DocumentLayoutBenchmarkScore'
            minItems: 1
    
    DocumentLayoutBenchmarkResult:
      type: object
      description: describes the document layout benchmark result
      properties:
        benchmarkId:
          type: string
          description: auto-generated unique identification of benchmark data
          format: uuid4
        results:
          type: array
          items:
            $ref: '#/components/schemas/DocumentLayoutIndividualPageBenchmarkResult'
        summaries:
          type: array
          items:
            $ref: '#/components/schemas/DocumentLayoutBenchmarkScore'
            minItems: 1
    
    DocumentOCRIndividualPageBenchmarkResult:
      type: object
      properties:
        scores:
          type: array
          description: score calculated for each metric mentioned in selected benchmark
          items:
            $ref: '#/components/schemas/DocumentOCRBenchmarkScore'
            minItems: 1
    
    DocumentOCRBenchmarkResult:
      type: object
      description: describes the document ocr benchmark result
      properties:
        benchmarkId:
          type: string
          description: auto-generated unique identification of benchmark data
          format: uuid4
        results:
          type: array
          items:
            $ref: '#/components/schemas/DocumentOCRIndividualPageBenchmarkResult'
        summaries:
          type: array
          items:
            $ref: '#/components/schemas/DocumentOCRBenchmarkScore'
            minItems: 1
    
    ASRIndividualBenchmarkResult:
      allOf:
        - $ref: 'https://raw.githubusercontent.com/project-anuvaad/ULCA/develop/audio-schema.yml#/components/schemas/SpeechRecognitionResult'
        - type: object
      type: object
      properties:
        scores:
          type: array
          description: score calculated for each metric mentioned in selected benchmark
          items:
            $ref: '#/components/schemas/ASRBenchmarkScore'
            minItems: 1
      
    ASRBenchmarkResult:
      type: object
      description: describes the document ocr benchmark result
      properties:
        benchmarkId:
          type: string
          description: auto-generated unique identification of benchmark data
          format: uuid4
        results:
          type: array
          items:
            $ref: '#/components/schemas/ASRIndividualBenchmarkResult'
        summaries:
          type: array
          items:
            $ref: '#/components/schemas/ASRBenchmarkScore'
            minItems: 1
  
    ModelTask:
      type: object
      description: the category of model under which it has been released or trained
      properties:
        type:
          type: string
          enum: 
            - translation
            - tts
            - asr
            - document-layout
            - ocr

    ProcessStage:
      type: string
      description: various life-cycle stage of model when benchmarking
      enum:
        - submitted
        - benchmarked
        - published
        
    TrainingDataset:
      type: object
      description: training dataset metadata used to train the model
      required: 
        - description
      properties:
        datasetId:
          type: string
          description: dataset identifier that has been exported from ULCA system, passing this information makes your model enriched with further information for the community
        description:
          type: string
          description: explain your dataset that you have used for training your model
          
    DatasetProgressInformation:
      type: object
      description: informs the progress for every submitted records in the dataset.
      properties:
        totalRecordCount:
          type: integer
          description: total number of records count submitted
        validaatedRecordCount:
          type: integer
          description: how many records have validated
        failedRecordCount:
          type: integer
          description: how many records failed the valdiation
        validationReportId:
          type: string
          description: download why the records failed the validation
          format: uuid4
        
    
  securitySchemes:
    authToken:
      type: apiKey
      description: token issued by authenticating the user
      name: auth-token
      in: header