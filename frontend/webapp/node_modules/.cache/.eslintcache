[{"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/index.js":"1","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/reportWebVitals.js":"2","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/web.routes.js":"3","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/store/store.js":"4","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/web.history.js":"5","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/Layout.js":"6","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/UserManagement.jsx":"7","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/index.js":"8","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/theme/theme-default.js":"9","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/styles/Styles.js":"10","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/styles/Login.js":"11","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/Login.jsx":"12","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/ForgotPassword.jsx":"13","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/AppInfo.jsx":"14","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/Signup.jsx":"15","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/Reset.jsx":"16","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/Footer.jsx":"17","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/apistatus/apistatus.js":"18","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/styles/HeaderStyles.js":"19","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/constants.js":"20","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/apitransport/apitransport.js":"21","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/strings.js":"22","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api.js":"23","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/apiendpoints.js":"24","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/configs.js":"25","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/styles/Dataset.js":"26","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Header.jsx":"27","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Breadcrum.jsx":"28","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/UploadDataset/SubmitDataset.jsx":"29","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/ChartRender.jsx":"30","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/Dashboard/languageDatasets.js":"31","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/Dashboard/languageDatasets.js":"32","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/styles/Dashboard.js":"33","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/UploadDataset/DatasetSubmission.jsx":"34","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/authenticate.js":"35","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Spinner.jsx":"36","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/internalurlmapping.js":"37","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Snackbar.jsx":"38","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetView/ContributionList.jsx":"39","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetView/DetailedStatus.jsx":"40","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Dialog.jsx":"41","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/MySearches.jsx":"42","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetView/DetailedDataset.js":"43","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetView/MyContribution.js":"44","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/DetailedDataSet.js":"45","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetSearch/MySearches.js":"46","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/myContribution.js":"47","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetSearch/MySearches.js":"48","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/UserManagement/Login.js":"49","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/utils/Login.js":"50","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/SearchDownloadRecords.jsx":"51","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/UploadDataset/SubmitDataset.js":"52","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/RequestNumberCreation.jsx":"53","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/DownloadDatasetRecords.jsx":"54","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/SearchResult.jsx":"55","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Autocomplete.jsx":"56","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetSearch/SearchAndDownload.js":"57","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetSearch/SearchAndDownload.js":"58","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/DatasetItems.js":"59","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetSearch/SubmitSearchRequest.js":"60","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetView/ErrorDownload.js":"61","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetView/DatasetAction.js":"62","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/ErrorDownload.jsx":"63","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/UserManagement/Register.js":"64","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/ActivateUser.jsx":"65","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/UserManagement/ActivateUser.js":"66","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/ActiveUser.jsx":"67","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/utils/getLabel.js":"68","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/utils/getDataset.jsx":"69","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/ReadymadeDataset.jsx/ReadymadeDataset.jsx":"70","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/menuItems.js":"71","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/MenuItem.jsx":"72","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/PageInfo.js":"73","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetSearch/SearchPageInfo.js":"74","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/TitleBar.jsx":"75","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/Statistics.jsx":"76","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/ReadymadeDataset.jsx/PopUp.jsx":"77","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Slider.jsx":"78","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/AppInfo.jsx":"79","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetView/FilterList.jsx":"80"},{"size":632,"mtime":1625565261001,"results":"81","hashOfConfig":"82"},{"size":362,"mtime":1624603515870,"results":"83","hashOfConfig":"82"},{"size":5664,"mtime":1625462312617,"results":"84","hashOfConfig":"82"},{"size":885,"mtime":1625660411464,"results":"85","hashOfConfig":"82"},{"size":122,"mtime":1624603515878,"results":"86","hashOfConfig":"82"},{"size":921,"mtime":1624944795032,"results":"87","hashOfConfig":"82"},{"size":1247,"mtime":1625486799002,"results":"88","hashOfConfig":"82"},{"size":815,"mtime":1624870710162,"results":"89","hashOfConfig":"82"},{"size":5066,"mtime":1625575707301,"results":"90","hashOfConfig":"82"},{"size":770,"mtime":1624603515878,"results":"91","hashOfConfig":"82"},{"size":5584,"mtime":1624618232463,"results":"92","hashOfConfig":"82"},{"size":10826,"mtime":1625486799002,"results":"93","hashOfConfig":"82"},{"size":1657,"mtime":1624603515874,"results":"94","hashOfConfig":"82"},{"size":1294,"mtime":1624717581391,"results":"95","hashOfConfig":"82"},{"size":7923,"mtime":1625486799002,"results":"96","hashOfConfig":"82"},{"size":3043,"mtime":1624603515878,"results":"97","hashOfConfig":"82"},{"size":725,"mtime":1624603515874,"results":"98","hashOfConfig":"82"},{"size":252,"mtime":1624603515870,"results":"99","hashOfConfig":"82"},{"size":2941,"mtime":1625116289642,"results":"100","hashOfConfig":"82"},{"size":1077,"mtime":1625547291843,"results":"101","hashOfConfig":"82"},{"size":3809,"mtime":1624603515870,"results":"102","hashOfConfig":"82"},{"size":1907,"mtime":1624603515870,"results":"103","hashOfConfig":"82"},{"size":889,"mtime":1624603515870,"results":"104","hashOfConfig":"82"},{"size":671,"mtime":1625574795964,"results":"105","hashOfConfig":"82"},{"size":371,"mtime":1625568864183,"results":"106","hashOfConfig":"82"},{"size":4944,"mtime":1625575707301,"results":"107","hashOfConfig":"82"},{"size":9536,"mtime":1625463405208,"results":"108","hashOfConfig":"82"},{"size":831,"mtime":1624603515874,"results":"109","hashOfConfig":"82"},{"size":14508,"mtime":1625486799002,"results":"110","hashOfConfig":"82"},{"size":11824,"mtime":1625574267595,"results":"111","hashOfConfig":"82"},{"size":1299,"mtime":1625463386425,"results":"112","hashOfConfig":"82"},{"size":1323,"mtime":1625555801640,"results":"113","hashOfConfig":"82"},{"size":2032,"mtime":1625135920037,"results":"114","hashOfConfig":"82"},{"size":2589,"mtime":1624603515874,"results":"115","hashOfConfig":"82"},{"size":215,"mtime":1624603515870,"results":"116","hashOfConfig":"82"},{"size":864,"mtime":1624603515874,"results":"117","hashOfConfig":"82"},{"size":303,"mtime":1624962002585,"results":"118","hashOfConfig":"82"},{"size":1422,"mtime":1624603515874,"results":"119","hashOfConfig":"82"},{"size":12121,"mtime":1625575707301,"results":"120","hashOfConfig":"82"},{"size":8069,"mtime":1625065542636,"results":"121","hashOfConfig":"82"},{"size":1813,"mtime":1625463399452,"results":"122","hashOfConfig":"82"},{"size":6588,"mtime":1625463354493,"results":"123","hashOfConfig":"82"},{"size":1319,"mtime":1625659685258,"results":"124","hashOfConfig":"82"},{"size":1449,"mtime":1625660587652,"results":"125","hashOfConfig":"82"},{"size":1935,"mtime":1625054931585,"results":"126","hashOfConfig":"82"},{"size":1540,"mtime":1625659640513,"results":"127","hashOfConfig":"82"},{"size":3376,"mtime":1625548405041,"results":"128","hashOfConfig":"82"},{"size":3027,"mtime":1625463347169,"results":"129","hashOfConfig":"82"},{"size":818,"mtime":1624603515870,"results":"130","hashOfConfig":"82"},{"size":213,"mtime":1623066359633,"results":"131","hashOfConfig":"82"},{"size":18192,"mtime":1625470600414,"results":"132","hashOfConfig":"82"},{"size":1137,"mtime":1625661501933,"results":"133","hashOfConfig":"82"},{"size":1609,"mtime":1625470600414,"results":"134","hashOfConfig":"82"},{"size":2645,"mtime":1625470600414,"results":"135","hashOfConfig":"82"},{"size":785,"mtime":1625470600418,"results":"136","hashOfConfig":"82"},{"size":1351,"mtime":1624603515874,"results":"137","hashOfConfig":"82"},{"size":1066,"mtime":1624603515870,"results":"138","hashOfConfig":"82"},{"size":825,"mtime":1624603515870,"results":"139","hashOfConfig":"82"},{"size":2446,"mtime":1625027691843,"results":"140","hashOfConfig":"82"},{"size":1720,"mtime":1625661517424,"results":"141","hashOfConfig":"82"},{"size":1305,"mtime":1625659691422,"results":"142","hashOfConfig":"82"},{"size":854,"mtime":1625547276231,"results":"143","hashOfConfig":"82"},{"size":584,"mtime":1624860695777,"results":"144","hashOfConfig":"82"},{"size":798,"mtime":1624603515870,"results":"145","hashOfConfig":"82"},{"size":2802,"mtime":1625486799002,"results":"146","hashOfConfig":"82"},{"size":758,"mtime":1625486799002,"results":"147","hashOfConfig":"82"},{"size":1041,"mtime":1625486799002,"results":"148","hashOfConfig":"82"},{"size":1212,"mtime":1624603515878,"results":"149","hashOfConfig":"82"},{"size":307,"mtime":1624780814283,"results":"150","hashOfConfig":"82"},{"size":5249,"mtime":1624603515874,"results":"151","hashOfConfig":"82"},{"size":960,"mtime":1625028103990,"results":"152","hashOfConfig":"82"},{"size":1205,"mtime":1625470600414,"results":"153","hashOfConfig":"82"},{"size":726,"mtime":1624871211852,"results":"154","hashOfConfig":"82"},{"size":743,"mtime":1624871230832,"results":"155","hashOfConfig":"82"},{"size":6006,"mtime":1625470600414,"results":"156","hashOfConfig":"82"},{"size":2176,"mtime":1624952954162,"results":"157","hashOfConfig":"82"},{"size":4466,"mtime":1625486799002,"results":"158","hashOfConfig":"82"},{"size":1656,"mtime":1625061680086,"results":"159","hashOfConfig":"82"},{"size":5847,"mtime":1625200458836,"results":"160","hashOfConfig":"82"},{"size":5211,"mtime":1625575707301,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"1d8dmvl",{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"164"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"164"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"164"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"164"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"164"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"164"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"164"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"164"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"164"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"164"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"164"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"164"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"197"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"164"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"164"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"164"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"164"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"197"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"164"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"164"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/index.js",[],["345","346"],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/reportWebVitals.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/web.routes.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/store/store.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/web.history.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/Layout.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/UserManagement.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/index.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/theme/theme-default.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/styles/Styles.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/styles/Login.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/Login.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/ForgotPassword.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/AppInfo.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/Signup.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/Reset.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/Footer.jsx",[],["347","348"],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/apistatus/apistatus.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/styles/HeaderStyles.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/constants.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/apitransport/apitransport.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/strings.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/apiendpoints.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/configs.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/styles/Dataset.js",["349"],"const DataSet = (theme) => ({\n\n    // paper: {\n    //     padding: '5%',\n    // },\n    title: {\n        marginBottom: '6vh'\n    },\n    form: {\n        marginTop: '1vh',\n        width: '90%',\n    },\n    radioGroup: {\n        marginTop: '1vh',\n\n    },\n\n    divStyle: {\n        padding: \"5% 10% 5% 10%\"\n    },\n\n    // typography:{fontSize:\"1.1rem\"},\n\n    updateBtn: {\n\n        display: 'flex',\n        justifyItems: 'center',\n        marginLeft: 'auto',\n        marginTop: '-4%',\n    },\n    submitBtn: {\n        marginTop: '6vh',\n        color: 'white',\n    },\n    breadcrum: {\n        marginBottom: '1.5rem',\n\n    },\n    link: {\n        marginRight: \"10px\",\n        cursor: \"pointer\",\n        display: \"flex\", flexDirection: \"row\"\n    },\n    span: {\n        color: \"#0C0F0F\",\n        opacity: \"0.5\",\n        margin: \"-3px 0 0 1rem\"\n    },\n\n\n    searchDataset: {\n        maxHeight: '1.875rem',\n        heigth: 'auto'\n    },\n    submittedOn: {\n        display: 'block',\n        marginTop: '-0.3rem'\n    },\n    updateDataset: {\n        padding: '2rem',\n        width: '21rem'\n    },\n    datasetName: {\n        borderBottom: '1px solid #e0e1e0',\n        borderTop: '1px solid #e0e1e0'\n    },\n    popOver: {\n        marginTop: '0.3rem'\n    },\n    footerButtons: {\n        display: \"flex\",\n        justifyContent: 'flex-end',\n        width: \"100%\",\n        padding: '.6rem 1rem',\n        boxSizing: 'border-box',\n        border: \"1px solid rgb(224 224 224)\",\n        background: \"white\",\n        marginTop: \"-3px\"\n    },\n\n    headerButtons: {\n        display: \"flex\",\n        justifyContent: 'flex-end',\n        width: \"100%\",\n        marginBottom: '.6rem',\n        boxSizing: 'border-box',\n    },\n    buttonStyle: {\n        marginLeft: \"0.7rem\"\n    },\n    iconStyle: { marginRight: '.5rem' },\n    thumbsUpIcon: {\n        margin: '24% 0 0 24%',\n        fontSize: '3.7rem'\n    },\n\n    thumbsUpIconSpan: {\n        width: \"6.5rem\",\n        height: '6.5rem',\n        backgroundColor: \"#e0e1e0\",\n        borderRadius: \"100%\",\n        display: \"block\"\n    },\n    submissionIcon: {\n\n        \"@media (max-width:1120px)\": {\n            display: 'none'\n        }\n    },\n\n    dataSubmissionGrid: {\n        padding: '5%'\n    },\n    thankYouTypo: {\n        marginBottom: '1.3%'\n    },\n    reqNoTypo: {\n        marginBottom: '2.5%',\n    },\n    myContriBtn: {\n        marginTop: '8%',\n    },\n    ButtonRefresh: {\n        marginLeft: \"auto\"\n    },\n    searchDivStyle: {\n        //padding: '0% 4%',\n        margin: '1% 2.5% 0 2.5%',\n    },\n    buttonDiv: {\n        margin: '0% 0 1.5rem 0'\n    },\n    innerButton: {\n        margin: '0 0.938rem 0.625rem 0'\n    },\n    subHeader: {\n        marginBottom: '1.313rem'\n    },\n    autoComplete: {\n        marginBottom: '1.938rem'\n    },\n    clearNSubmit: {\n        marginTop: '4rem',\n        float: 'right'\n    },\n    parent: {\n        display: \"flex\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        height: window.innerHeight - 80\n    },\n    action: { display: \"flex\", flexDirection: \"row\" },\n    FindInPageIcon: { fontSize: '8rem' },\n    searchResult: {\n        textAlign: 'center',\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        display: \"flex\",\n\n        verticalAlign: \"middle\",\n        \"@media (max-width:850px)\": {\n            minWidth: \"270px\",\n            width: \"85%\",\n        },\n\n    },\n    reqPaper: {\n        // padding:'10%',\n        // width:'60%'\n        marginTop: '25%'\n    },\n    alignTypo: {\n        textAlign: 'center',\n    },\n    yourSearchQuery: {\n        marginBottom: '2%'\n    },\n    serReqNoTypo: {\n        marginBottom: '7%'\n    },\n    mySearches: {\n        marginTop: '1%',\n        width: '60%',\n        //  textTransform:'inherit'\n    },\n    downloadDiv: {\n        marginTop: '4%'\n    },\n    downloadPaper: {\n        marginTop: '4%',\n        padding: '5% 14% 2% 4%',\n        width: '70%',\n        minHeight: \"3.5rem\"\n    },\n    downloadBtnDiv: {\n        margin: '10%',\n        marginLeft: \"0\",\n        display: \"flex\",\n        flexDirection: \"row\",\n\n    },\n    searchResultFinal: {\n        width: \"90%\",\n        marginTop: \"-20%\"\n    },\n    downloadBtn: {\n\n        marginRight: '2%'\n    },\n\n    blurOut: {\n        zIndex: -2,\n        opacity: '0.5'\n    },\n    leftSection: {\n        boxShadow: '4px 0 4px -4px #00000029'\n    },\n    popupDialog: {\n        maxWidth: '46.125rem',\n        height: '26.5rem'\n    },\n    clearAllBtn: {\n        float: \"right\",\n        margin: '9px 16px 0px auto',\n        padding: '0',\n        height: '15px'\n    },\n    filterContainer: {\n        borderBottom: '1px solid #00000029',\n        paddingLeft: '18.5px',\n        marginTop:'20px'\n    },\n    filterTypo: {\n        marginBottom: '9px'\n    },\n    applyBtn: {\n        float: \"right\",\n        margin: '5px',\n        borderRadius: '4px',\n        margin: '9px 16px 9px auto',\n        width: '80px'\n    },\n});\n\nexport default DataSet;","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Header.jsx",["350"],"import React, { useState } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles, Button, Menu, MenuItem, MuiThemeProvider } from \"@material-ui/core\";\nimport DownIcon from '@material-ui/icons/ArrowDropDown';\nimport Avatar from '@material-ui/core/Avatar';\nimport HeaderStyles from \"../../styles/HeaderStyles\"\nimport { useHistory } from 'react-router-dom';\nimport GroupIcon from '@material-ui/icons/Group';\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport authenticate from '../../../configs/authenticate';\nimport Theme from \"../../theme/theme-default\";\nimport MenuItems from \"../../components/common/MenuItem\";\nimport {menuItems} from '../../../configs/menuItems';\nimport Dialog from \"./Dialog\";\nconst StyledMenu = withStyles({\n \n})((props) => (\n  <Menu\n     elevation={0}\n    getContentAnchorEl={null}\n    anchorOrigin={{\n      vertical: 'bottom',\n      horizontal: 'left',\n    }}\n    transformOrigin={{\n      vertical: 'top',\n      horizontal: 'left',\n    }}\n    {...props}\n  />\n));\n\nconst Header = (props) => {\n  const { classes } = props;\n  const [anchorEl, setAnchorEl] = useState(null)\n  const [urlLink, setUrlLink] = useState(null)\n  const [open, setOpen] = useState(false)\n  const [logout, setAnchorElLogout] = useState(null)\n  const history = useHistory();\n \n  const {firstName,lastName} = authenticate() ? JSON.parse(localStorage.getItem('userDetails')) : {firstName:\"\",lastName:\"\"}\n  const handleClose = (e) => {\n    setAnchorEl(null)\n    setAnchorElLogout(null)\n  }\n\n  const handleOpenMenu = (e) => {\n    setAnchorEl(e.currentTarget)\n  }\n\n  const handleLogoutOption = (e) => {\n    setAnchorElLogout(e.currentTarget)\n  }\n\n  const handleLogOut = (url) =>{\n    history.push(`${process.env.PUBLIC_URL}${url ? url: urlLink }`)\n    handleClose();\n  }\n\n  const handleMenuItemClick = (url) => {\n    if(authenticate()){\n      history.push(`${process.env.PUBLIC_URL}${url}`)\n    handleClose();\n    }\n    else{\n      handleClose();\n      setUrlLink(url)\n      setOpen(true)\n    }\n    \n  }\n\n  \n\n\n  return (\n    <MuiThemeProvider theme={Theme}>\n      <AppBar color=\"primary\">\n        <Toolbar className={classes.toolbar}>\n          <div className={classes.menu}>\n\n              <Typography variant=\"h5\" onClick={() => history.push(`${process.env.PUBLIC_URL}/dashboard`)}>\n                ULCA\n              </Typography>\n\n            {\n              <>\n                {/* <div className={classes.home}>\n                  <Button\n                    className={classes.menuBtn}\n                    variant=\"text\"\n                    onClick={() => handleMenuItemClick('/dashboard')}\n                  >\n                    Home\n                </Button>\n                </div>\n\n                <div className={classes.homeBtn}>\n                  <Button\n                    className={classes.menuBtn}\n                    variant=\"text\"\n                    onClick={() => handleMenuItemClick('/dashboard')}\n                  >\n                    <HomeIcon fontSize=\"large\" />\n                  </Button>\n                </div> */}\n                <div className={classes.datasetOption}>\n                  <div>\n                    <Button className={classes.menuBtn}\n                      onClick={(e) => handleOpenMenu(e)}\n                      variant=\"text\"\n                    >\n                      <Typography variant={\"body1\"}>\n                      Dataset\n                      </Typography>\n                    <DownIcon />\n                    </Button>\n                  </div>\n                  \n                  <MenuItems\n                    id={\"dataset-menu\"}\n                    anchorEl={anchorEl}\n                    handleClose={handleClose}\n                    menuOptions={menuItems.dataset}\n                    handleMenuItemClick={handleMenuItemClick}\n                  />\n                  {/* <StyledMenu id=\"data-set\"\n                    anchorEl={anchorEl}\n                    open={Boolean(anchorEl)}\n                    onClose={(e) => handleClose(e)}\n                     className={classes.styledMenu1}\n                  >\n                    <MenuItem\n                      className={classes.styledMenu}\n                      onClick={() => handleMenuItemClick('/my-contribution')}\n                    >\n                      My Contributon\n                    </MenuItem>\n                    <MenuItem className={classes.styledMenu}\n                      onClick={() => handleMenuItemClick('/my-searches')}\n                    >\n                      My Searches\n                    </MenuItem>\n                    <MenuItem className={classes.styledMenu}\n                      onClick={() => handleMenuItemClick('/search-and-download-rec/initiate/-1')}\n                    >\n                      Search & Download Records\n                    </MenuItem>\n                    <MenuItem className={classes.styledMenu}\n                     onClick={() => handleMenuItemClick('/readymade-dataset')}>\n                      Explore Readymade Datasets\n                    </MenuItem>\n                    <MenuItem className={classes.styledMenu}\n                      onClick={() => handleMenuItemClick('/submit-dataset/upload')}\n                    >\n                      Submit Dataset\n                    </MenuItem>\n                  </StyledMenu> */}\n                </div>\n                {/* <div className={classes.options}>\n                  <div className={classes.model}>\n                    <Button className={classes.menuBtn} variant=\"text\" onClick={() => alert(\"Still in progress\")}>\n                      Model\n                    <DownIcon />\n                    </Button>\n                  </div>\n                 \n                </div> */}\n              </>\n            }\n            {\n              authenticate() ?\n                <div className={classes.profile}>\n                  <Button  onClick={(e) => handleLogoutOption(e)} className={classes.menuBtn} variant=\"text\">\n                    <Avatar className={classes.avatar} variant=\"contained\" color= \"transparent\">{`${firstName[0].toUpperCase()}`}</Avatar>\n                    <p className={classes.profileName}>{`${firstName}`}</p>\n                    <DownIcon />\n                  </Button>\n                  <StyledMenu id=\"data-set\"\n                    anchorEl={logout}\n                    open={Boolean(logout)}\n                    onClose={(e) => handleClose(e)}\n                    className={classes.styledMenu1}\n                  >\n                     {/* <MenuItem\n                     className={classes.styledMenu}\n                \n                    >\n                      Change Password\n                    </MenuItem>\n                    <MenuItem\n                     className={classes.styledMenu}\n                     \n                    >\n                      Feedback\n                    </MenuItem> */}\n                    <MenuItem\n                     className={classes.styledMenu}\n                      onClick={() => {\n                        localStorage.removeItem('userInfo')\n                        handleLogOut('/user/login')}}\n                    >\n                      Log out\n                    </MenuItem>\n                   \n                  </StyledMenu>\n                </div>\n                :\n                <div className={classes.profile}>\n                  <div className={classes.desktopAuth}>\n                    <Button\n                      className={classes.menuBtn}\n                      color = \"primary\"\n                      onClick={() => history.push(`${process.env.PUBLIC_URL}/user/login`)}\n                      variant=\"text\"\n                    >\n                      Sign In\n                    </Button>\n                    <Button\n                      className={classes.menuBtn2}\n                      color=\"primary\"\n                      variant=\"text\"\n                      onClick={() => history.push(`${process.env.PUBLIC_URL}/user/register`)}\n                    >\n                      Sign Up</Button>\n                  </div>\n                  <div className={classes.mobileAuth}>\n                    <Button\n                      className={classes.menuBtn}\n                      onClick={() => history.push(`${process.env.PUBLIC_URL}/user/login`)}\n                      variant=\"text\"\n                    >\n                      <GroupIcon />\n                    </Button>\n                    <Button\n                      className={classes.menuBtn}\n                      variant=\"text\"\n                      onClick={() => history.push(`${process.env.PUBLIC_URL}/user/register`)}\n                    >\n                      <GroupAddIcon />\n                    </Button>\n                  </div>\n                </div>\n            }\n          </div>\n        </Toolbar>\n      </AppBar>\n\n      {open && <Dialog\n                                title         =       {\"Not Signed In\"}\n                                open            = {open}\n                                handleClose     ={()=> setOpen(false)}\n                                 message          =       {\"Please sign in to continue.\"}\n                                handleSubmit    ={handleLogOut}\n                                actionButton    = {\"Close\"}\n                                actionButton2   = {\"Sign In\"}\n                        /> }\n    </MuiThemeProvider>\n  )\n}\n\nexport default withStyles(HeaderStyles)(Header);","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Breadcrum.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/UploadDataset/SubmitDataset.jsx",["351","352","353","354"],"import {\n    Grid,\n    Paper,\n    Typography,\n    Divider,\n    FormControl,\n    Button,\n    TextField,\n    Hidden\n} from '@material-ui/core';\n// import Autocomplete from '@material-ui/lab/Autocomplete';\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport { withStyles } from '@material-ui/core/styles';\nimport { RadioButton, RadioGroup } from 'react-radio-buttons';\nimport DatasetStyle from '../../../styles/Dataset';\nimport { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport Snackbar from '../../../components/common/Snackbar';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport SubmitDatasetApi from \"../../../../redux/actions/api/UploadDataset/SubmitDataset\"\nimport DatasetItems from \"../../../../configs/DatasetItems\";\nimport getTitleName from '../../../../utils/getDataset';\nimport C from \"../../../../redux/actions/constants\";\nimport { useDispatch } from 'react-redux';\nimport {PageChange} from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\"\n\nconst SubmitDataset = (props) => {\n    const { classes } = props;\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [dataset, setDatasetInfo] = useState({ datasetName: \"\", url: \"\", type: \"parallel-corpus\" })\n    const [title, setTitle]         = useState( \"Parallel Dataset\")\n    const dispatch                  = useDispatch();\n    const [snackbar, setSnackbarInfo] = useState({\n        open: false,\n        message: '',\n        variant: 'success'\n    })\n    const [error, setError] = useState({datasetName: \"\", url: \"\", type: false})\n    const [search, setSearch] = useState(false)\n    const history = useHistory();\n\n    // const handleClick = (event) => {\n    //     setAnchorEl(event.currentTarget)\n    // };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    // const handleDone = () => {\n    //     if (dataset.filteredName) {\n    //         setDatasetInfo({ ...dataset, datasetName: dataset.filteredName })\n    //     }\n    //     handleClose();\n    // }\n\n    // const renderUpdateDatasetSearch = () => {\n    //     return (\n    //         <div>\n    //             <div className={classes.updateDataset}>\n    //                 <Grid container spacing={1}>\n    //                     <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\n    //                         <Autocomplete\n    //                             id=\"tags-outlined\"\n    //                             options={[]}\n    //                             getOptionLabel={(option) => option.name}\n    //                             filterSelectedOptions\n    //                             open={search}\n    //                             onChange={(e, value) => {\n    //                                 setDatasetInfo({ ...dataset, datasetName: value.name})\n    //                                 handleClose();\n    //                             }}\n    //                             onOpen={() => {\n    //                                 setTimeout(() => setSearch(true), 200)\n    //                             }}\n    //                             onClose={() => {\n    //                                 setSearch(false)\n    //                             }}\n    //                             openOnFocus\n    //                             renderInput={(params) => (\n    //                                 <TextField\n    //                                     id=\"search-dataset\"\n    //                                     variant=\"outlined\"\n    //                                     placeholder=\"Search Dataset\"\n    //                                     autoFocus={true}\n    //                                     {...params}\n    //                                 />\n    //                             )}\n    //                         />\n    //                     </Grid>\n    //                 </Grid>\n    //             </div>\n               \n    //         </div>\n    //     )\n    // }\n\n    const handleApicall = async () => {\n\nlet apiObj = new SubmitDatasetApi(dataset)\n    fetch(apiObj.apiEndPoint(), {\n      method: 'post',\n      body: JSON.stringify(apiObj.getBody()),\n      headers: apiObj.getHeaders().headers\n    }).then(async response => {\n      const rsp_data = await response.json();\n      if (!response.ok) {\n        \n        return Promise.reject('');\n      } else {\n        dispatch(PageChange(0, C.PAGE_CHANGE));\n        history.push(`${process.env.PUBLIC_URL}/submit-dataset/submission/${rsp_data.serviceRequestNumber}`)\n//           return true;\n      }\n    }).catch((error) => {\n        setSnackbarInfo({\n                        ...snackbar,\n                        open: true,\n                        message: \"something went wrong. PLease try again.\",\n                        timeOut: 40000,\n                        variant: 'error'\n                    })\n    });\n  \n    }\n\n    const handleSelectChange = (e) =>{\n        let title = getTitleName(e) \n        setTitle(title)\n       setDatasetInfo({ ...dataset, type: e })\n    }\n\n    const renderRadioIcons = ()   =>{\n        return <RadioGroup value={dataset.type} onChange={(e) =>handleSelectChange(e)} className={classes.radioGroup} vertical=\"true\">\n                {DatasetItems.map((item, index)=>(\n                    <RadioButton key ={index} rootColor=\"grey\" pointColor=\"black\" value={item.value}>\n                   {item.label}\n                </RadioButton>\n                ))}\n            </RadioGroup>\n    }\n\n    const validURL = (str) => {\n        var pattern = new RegExp('^((ft|htt)ps?:\\\\/\\\\/)?' + // protocol\n            '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name and extension\n            '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n            '(\\\\:\\\\d+)?' + // port\n            '(\\\\/[-a-z\\\\d%@_.~+&:]*)*' + // path\n            '(\\\\?[;&a-z\\\\d%@_.,~+&:=-]*)?' + // query string\n            '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n        return pattern.test(str);\n    }\n\n    const handleSubmitDataset = (e) => {\n        if(dataset.datasetName.trim() === \"\" || dataset.url.trim() === \"\"){\n            setError({...error, name: !dataset.datasetName.trim() ? \"Name cannot be empty\":\"\",url:!dataset.url.trim() ?\"URL cannot be empty\" :\"\" })\n            \n        }\n        else if(dataset.datasetName.length > 256) {\n            setError({...error, name:\"Max 256 characters allowed\"})\n            \n        }\n        else if(!validURL(dataset.url)){\n            setError({...error, url:\"‘Invalid URL\"})\n        }\n        else{\n\n            handleApicall()\n            setSnackbarInfo({\n                ...snackbar,\n                open: true,\n                message: 'Please wait while we process your request...',\n                variant: 'info'\n            })\n        }\n\n       \n        \n    }\n\n    const handleSnackbarClose = () => {\n        setSnackbarInfo({ ...snackbar, open: false })\n    }\n\n    const url = UrlConfig.dataset\n\n    return (\n        <div>\n            <div >\n                <div className={classes.breadcrum}>\n                    <BreadCrum links={[url]} activeLink=\"Submit Dataset\" />\n                </div>\n                <Paper elevation={3} className={classes.divStyle}>\n                    <Grid container >\n                        <Grid item>\n                            <Typography variant=\"h5\"><strong>Submit Dataset</strong></Typography>\n                        </Grid>\n                    </Grid>\n                    <Grid container spacing={5}>\n                        <Grid item xs={12} sm={12} md={5} lg={5} xl={5}>\n                            <Typography color=\"textSecondary\" variant=\"subtitle1\">STEP-1</Typography>\n                            <FormControl className={classes.form}>\n                                <Typography className={classes.typography} variant=\"subtitle1\"><strong>Select Dataset Type</strong></Typography>\n                                    {renderRadioIcons()}\n                            </FormControl>\n                        </Grid>\n                        <Hidden>\n                            <Grid item xl={1} lg={1} md={1} sm={1} xs={1}>\n                                <Divider orientation=\"vertical\" />\n                            </Grid>\n                        </Hidden>\n                        <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\n                            <Typography color=\"textSecondary\" variant=\"subtitle1\">STEP-2</Typography>\n                            <FormControl className={classes.form}>\n                                <Grid container spacing={6}>\n                                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                        <Grid container spacing={5}>\n                                            <Grid item xl={5} lg={5} md={5} sm={12} xs={12}>\n                                                <Typography className={classes.typography} variant=\"subtitle1\"><strong>{title}</strong></Typography>\n                                            </Grid>\n                                            {/* <Grid item xl={7} lg={7} md={7} sm={12} xs={12}>\n                                                <div>\n                                                <Button\n                                                    size = \"medium\"\n                                                    className={classes.updateBtn}\n                                                    color=\"primary\"\n                                                    variant=\"outlined\"\n                                                    onClick={(e) => handleClick(e)}\n                                                >\n                                                    \n                                                    Update an existing dataset\n                                            </Button>\n                                                <Popover\n                                                    className={classes.popOver}\n                                                    id={\"update-dataset\"}\n                                                    open={Boolean(anchorEl)}\n                                                    anchorEl={anchorEl}\n                                                    onClose={handleClose}\n                                                    anchorOrigin={{\n                                                        vertical: 'bottom',\n                                                        horizontal: 'left',\n                                                    }}\n                                                    transformOrigin={{\n                                                        vertical: 'top',\n                                                        horizontal: \"center\",\n                                                    }}\n                                                    children={renderUpdateDatasetSearch()}\n                                                />\n                                                </div>\n                                            </Grid> */}\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                        <Grid container spacing={3}>\n                                            <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                                <TextField fullWidth\n                                                    \n                                                    color=\"primary\"\n                                                    label=\"Dataset name\"\n                                                    value={dataset.datasetName}\n                                                    error={error.name? true : false}\n                                                    helperText={error.name}\n                                                    onChange={(e) => {\n                                                        setDatasetInfo({ ...dataset, datasetName: e.target.value })\n                                                        setError({...error, name:false})\n                                                }}\n                                                />\n                                            </Grid>\n                                            <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                                                <TextField fullWidth\n                                                    \n                                                    color=\"primary\"\n                                                    label=\"Paste the URL of the public repository\"\n                                                    value={dataset.url}\n                                                    error = {error.url? true : false}\n                                                    helperText={error.url}\n                                                    onChange={(e) => {\n                                                        setDatasetInfo({ ...dataset, url: e.target.value })\n                                                        setError({...error, url:false})\n                                                    }}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Button\n                                    color=\"primary\"\n                                    className={classes.submitBtn}\n                                    variant=\"contained\"\n                                    size = {'large'}\n                                    \n                                    onClick={handleSubmitDataset}\n                                >\n                                    Submit\n                                </Button>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </div>\n            {snackbar.open &&\n            <Snackbar\n                open={snackbar.open}\n                handleClose={handleSnackbarClose}\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n                message={snackbar.message}\n                variant={snackbar.variant}\n            />}\n        </div>\n    )\n}\n\nexport default withStyles(DatasetStyle)(SubmitDataset);","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/ChartRender.jsx",["355"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { withStyles, Typography, MuiThemeProvider, Paper, Button } from \"@material-ui/core\";\r\nimport ChartStyles from \"../../styles/Dashboard\";\r\nimport { ResponsiveContainer, BarChart, Bar, Cell, XAxis, LabelList, YAxis, Tooltip } from 'recharts';\r\nimport APITransport from \"../../../redux/actions/apitransport/apitransport\";\r\nimport FetchLanguageDataSets from \"../../../redux/actions/api/Dashboard/languageDatasets\";\r\nimport { ArrowBack } from '@material-ui/icons';\r\nimport Header from '../../components/common/Header';\r\nimport Dataset from \"../../../configs/DatasetItems\";\r\nimport authenticate from '../../../configs/authenticate';\r\nimport Theme from \"../../theme/theme-default\";\r\nimport TitleBar from \"./TitleBar\";\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport AppInfo from \"../../components/common/AppInfo\"\r\nvar colors = [\"188efc\", \"7a47a4\", \"b93e94\", \"1fc6a4\", \"f46154\", \"d088fd\", \"f3447d\", \"188efc\", \"f48734\", \"189ac9\", \"0e67bd\"]\r\n\r\n\r\nconst ChartRender = (props) => {\r\n\tconst [selectedOption, setSelectedOption] = useState(Dataset[0]);\r\n\tconst [title, setTitle] = useState(\"Number of parallel dataset per language with English\");\r\n\tconst [filterValue, setFilterValue] = useState(\"domains\");\r\n\tconst [popUp, setPopUp] = useState(authenticate() ? false : true);\r\n\tconst [selectedLanguage, setSelectedLanguage] = useState(\"\");\r\n\tconst [selectedLanguageName, setSelectedLanguageName] = useState(\"\");\r\n\tconst [page, setPage] = useState(0);\r\n\tconst history = useHistory();\r\n\tconst dispatch = useDispatch();\r\n\tconst DashboardReport = useSelector((state) => state.dashboardReport);\r\n\tconst { classes } = props;\r\n\tconst options = Dataset;\r\n\tuseEffect(() => {\r\n\t\tfetchChartData(selectedOption.value, \"languagePairs\", [])\r\n\t\t\thistory.push(`${process.env.PUBLIC_URL}/dashboard`)\r\n\t}, []);\r\n\r\n\tconst fetchChartData = (dataType, value, criterions) => {\r\n\t\tconst userObj = new FetchLanguageDataSets(dataType, value, criterions);\r\n\t\tdispatch(APITransport(userObj));\r\n\r\n\t}\r\n\tconst fetchParams = (event) => {\r\n\t\tvar sourceLanguage = \"\"\r\n\t\tlet targetLanguage = \"\"\r\n\t\tif (selectedOption.value === \"parallel-corpus\") {\r\n\t\t\tsourceLanguage = { \"type\": \"PARAMS\", \"value\": \"en\" };\r\n\t\t\ttargetLanguage = { \"type\": \"PARAMS\", \"value\": (selectedLanguage ? selectedLanguage : event && event.hasOwnProperty(\"_id\") && event._id) }\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsourceLanguage = { \"type\": \"PARAMS\", \"value\": (selectedLanguage ? selectedLanguage : event && event.hasOwnProperty(\"_id\") && event._id) };\r\n\t\t\ttargetLanguage = { \"type\": \"PARAMS\", \"value\": \"\" };\r\n\r\n\t\t}\r\n\t\tsetSelectedLanguage(selectedLanguage ? selectedLanguage : event && event.hasOwnProperty(\"_id\") && event._id)\r\n\t\tsetSelectedLanguageName(selectedLanguageName ? selectedLanguageName : event && event.hasOwnProperty(\"label\") && event.label)\r\n\t\treturn ([{ \"type\": \"PARAMS\", \"sourceLanguage\": sourceLanguage, \"targetLanguage\": targetLanguage }])\r\n\t}\r\n\r\n\tconst fetchNextParams = (eventValue) => {\r\n\t\tvar sourceLanguage = \"\"\r\n\t\tlet targetLanguage = \"\"\r\n\t\tlet event = { \"type\": \"PARAMS\", \"value\": eventValue && eventValue.hasOwnProperty(\"_id\") && eventValue._id }\r\n\t\tif (selectedOption.value === \"parallel-corpus\") {\r\n\t\t\tsourceLanguage = { \"type\": \"PARAMS\", \"value\": \"en\" };\r\n\t\t\ttargetLanguage = { \"type\": \"PARAMS\", \"value\": selectedLanguage }\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsourceLanguage = { \"type\": \"PARAMS\", \"value\": selectedLanguage };\r\n\t\t\ttargetLanguage = { \"type\": \"PARAMS\", \"value\": \"\" };\r\n\r\n\t\t}\r\n\t\tsetSelectedLanguage(selectedLanguage ? selectedLanguage : event && event.hasOwnProperty(\"_id\") && event._id)\r\n\t\tsetSelectedLanguageName(selectedLanguageName ? selectedLanguageName : event && event.hasOwnProperty(\"label\") && event.label)\r\n\t\treturn ([{ \"type\": \"PARAMS\", \"sourceLanguage\": sourceLanguage, \"targetLanguage\": targetLanguage }, event])\r\n\t}\r\n\r\n\tconst handleOnClick = (value, event, filter) => {\r\n\r\n\t\tswitch (value) {\r\n\t\t\tcase 1:\r\n\t\t\t\tfetchChartData(selectedOption.value, filter ? filter : filterValue, fetchParams(event))\r\n\t\t\t\thandleSelectChange(selectedOption, event, filter, value)\r\n\t\t\t\tsetPage(value)\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfetchChartData(selectedOption.value, filterValue === \"collectionMethod_collectionDescriptions\" ? \"domains\" : \"collectionMethod_collectionDescriptions\", fetchNextParams(event))\r\n\t\t\t\tsetPage(value)\r\n\t\t\t\tsetFilterValue('domains')\r\n\t\t\t\thandleSelectChange(selectedOption, event, filter, value)\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0:\r\n\t\t\t\tfetchChartData(selectedOption.value, \"languagePairs\", [])\r\n\t\t\t\tsetPage(value)\r\n\t\t\t\tsetFilterValue('domains')\r\n\t\t\t\thandleSelectChange(selectedOption, \"\", \"\", value)\r\n\t\t\t\tsetSelectedLanguage(\"\")\r\n\t\t\t\tsetSelectedLanguageName(\"\")\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst handleLanguageChange = (value) => {\r\n\t\tsetFilterValue(value)\r\n\t\tsetTitle(`English-${selectedLanguageName}  ${selectedOption.value}- Grouped by ${(value === \"domains\") ? \"Domain\" : (value === \"source\") ? \"Source\" : value === \"collectionMethod_collectionDescriptions\" ? \"Collection Method\" : \"Domain\"}`)\r\n\t\thandleOnClick(1, \"\", value)\r\n\t}\r\n\tconst handleCardNavigation = () => {\r\n\r\n\t\thandleOnClick(page - 1)\r\n\t}\r\n\r\n\tconst handleClosePopUp = () =>{\r\n\t\tsetPopUp (false)\r\n\t}\r\n\r\n\tconst fetchFilterButtons = () => {\r\n\t\treturn (\r\n\t\t\t<div className={classes.filterButton}>\r\n\t\t\t\t<Button color={filterValue === \"domains\" ? \"primary\" : \"default\"}  size=\"small\" variant=\"outlined\" className={classes.backButton} onClick={() => handleLanguageChange(\"domains\")}>Domain</Button>\r\n\t\t\t\t{/* <Button  color={filterValue === \"source\" ? \"primary\":\"default\"} style={ filterValue === \"source\" ? {backgroundColor: \"#E8F5F8\"} : {} }size=\"medium\" variant=\"outlined\" className={classes.backButton} onClick={() => handleLanguageChange(\"source\")}>Source</Button> */}\r\n\t\t\t\t<Button color={filterValue === \"collectionMethod_collectionDescriptions\" ? \"primary\" : \"default\"}  size=\"small\" variant=\"outlined\" onClick={() => handleLanguageChange(\"collectionMethod_collectionDescriptions\")}>Collection Method</Button>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tconst handleSelectChange = (dataSet, event, filter, page) => {\r\n\t\tsetSelectedOption(dataSet)\r\n\t\tswitch (dataSet.value) {\r\n\t\t\tcase 'parallel-corpus':\r\n\t\t\t\tif (page === 0) {\r\n\t\t\t\t\tsetTitle(\"Number of parallel sentences per language with English\")\r\n\t\t\t\t\tselectedOption.value !== dataSet.value && fetchChartData(dataSet.value, \"languagePairs\", [])\r\n\r\n\t\t\t\t} else if (page === 1) {\r\n\t\t\t\t\tsetTitle(`English-${selectedLanguageName ? selectedLanguageName : event && event.hasOwnProperty(\"label\") && event.label}  ${selectedOption.label} - Grouped by ${(filter === \"domains\") ? \"Domain\" : (filter === \"source\") ? \"Source\" : filter === \"collectionMethod_collectionDescriptions\" ? \"Collection Method\" : \"Domain\"}`)\r\n\r\n\t\t\t\t} else if (page === 2) {\r\n\t\t\t\t\tsetTitle(`English-${selectedLanguageName} ${selectedOption.label} `)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'monolingual-corpus':\r\n\t\t\t\tif (page === 0) {\r\n\t\t\t\t\tselectedOption.value !== dataSet.value && fetchChartData(dataSet.value, \"languagePairs\", [])\r\n\t\t\t\t\tsetTitle('Number of sentences per language')\r\n\t\t\t\t} else if (page === 1) {\r\n\t\t\t\t\tsetTitle(`Number of sentences in ${selectedLanguageName ? selectedLanguageName : event && event.hasOwnProperty(\"label\") && event.label} - Grouped by ${(filter === \"domains\") ? \"Domain\" : (filter === \"source\") ? \"Source\" : filter === \"collectionMethod_collectionDescriptions\" ? \"Collection Method\" : \"Domain\"}`)\r\n\t\t\t\t} else if (page === 2) {\r\n\t\t\t\t\tsetTitle(`Number of sentences in ${selectedLanguageName} `)\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'asr-corpus':\r\n\t\t\t\tif (page === 0) {\r\n\t\t\t\t\tselectedOption.value !== dataSet.value && fetchChartData(dataSet.value, \"languagePairs\", [])\r\n\t\t\t\t\tsetTitle(\"Number of audio hours per language\")\r\n\t\t\t\t} else if (page === 1) {\r\n\t\t\t\t\tsetTitle(`Number of audio hours in ${selectedLanguageName ? selectedLanguageName : event && event.hasOwnProperty(\"label\") && event.label} - Grouped by ${(filter === \"domains\") ? \"Domain\" : (filter === \"source\") ? \"Source\" : filter === \"collectionMethod_collectionDescriptions\" ? \"Collection Method\" : \"Domain\"}`)\r\n\t\t\t\t} else if (page === 2) {\r\n\t\t\t\t\tsetTitle(`Number of audio hours in ${selectedLanguageName} `)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ocr-corpus':\r\n\r\n\t\t\t\tif (page === 0) {\r\n\t\t\t\t\tselectedOption.value !== dataSet.value && fetchChartData(dataSet.value, \"languagePairs\", [])\r\n\t\t\t\t\tsetTitle(\"Number of images per language\")\r\n\t\t\t\t} else if (page === 1) {\r\n\t\t\t\t\tsetTitle(`Number of images with ${selectedLanguageName ? selectedLanguageName : event && event.hasOwnProperty(\"label\") && event.label} text - Grouped by ${(filter === \"domains\") ? \"Domain\" : (filter === \"source\") ? \"Source\" : filter === \"collectionMethod_collectionDescriptions\" ? \"Collection Method\" : \"Domain\"}`)\r\n\t\t\t\t} else if (page === 2) {\r\n\t\t\t\t\tsetTitle(`Number of images with ${selectedLanguageName} text`)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tsetTitle(\"\")\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<MuiThemeProvider theme={Theme}>\r\n\t\t\t<><Header style={{ marginBottom: \"10px\" }} /><br /><br /><br /> </>\r\n\t\t\t<div className={classes.container}>\r\n\t\t\t<TitleBar selectedOption=\t{selectedOption}\r\n\t\t\t\thandleSelectChange=\t{handleSelectChange}\r\n\t\t\t\toptions\t\t=\t{options}\r\n\t\t\t\tisDisabled\t=\t{page !== 0 ? true : false}\r\n\t\t\t\tpage\t\t= \t{page}\r\n\t\t\t\tcount \t\t= \t{DashboardReport.count}>\r\n\t\t\t\t{page === 1 && fetchFilterButtons()}\r\n\t\t\t\t\r\n\t\t\t</ TitleBar>\r\n\t\t\t<Button onClick = {()=> setPopUp(true)} color= \"primary\" variant=\"contained\" className={classes.infoBtn}><InfoOutlinedIcon/></Button>\r\n\t\t\t{popUp && <AppInfo handleClose = {handleClosePopUp} open ={popUp}/>}\r\n\r\n\t\t\t\t<Paper elevation={3} className={classes.paper}>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t<div className={classes.iconStyle}>\r\n\t\t\t\t\t \t<><Button size=\"small\" color=\"primary\" className={classes.backButton} style={page === 0 ? {visibility:\"hidden\"}:{}} startIcon={<ArrowBack />} onClick={() => handleCardNavigation()}>Back</Button></>\r\n\t\t\t\t\t\t<Typography className={classes.titleText} value=\"\" variant=\"h6\"> {title} </Typography>\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div className={classes.title}>\r\n\t\t\t\t\t\t<ResponsiveContainer width=\"95%\" height={550} >\r\n\t\t\t\t\t\t\t<BarChart width={900} height={350} data={DashboardReport.data} fontSize=\"14px\" fontFamily=\"Lato\" maxBarSize={100} >\r\n\r\n\t\t\t\t\t\t\t\t<XAxis dataKey=\"label\"\r\n\t\t\t\t\t\t\t\t\ttextAnchor={\"end\"}\r\n\t\t\t\t\t\t\t\t\ttick={{ angle: -30, marginTop: \"8px\" }}\r\n\t\t\t\t\t\t\t\t\theight={130}\r\n\t\t\t\t\t\t\t\t\tinterval={0}\r\n\t\t\t\t\t\t\t\t\tposition=\"insideLeft\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t</XAxis>\r\n\t\t\t\t\t\t\t\t<YAxis padding={{ top: 10 }} tickInterval={10} allowDecimals={false} type=\"number\" dx={0} tickFormatter={(value) => new Intl.NumberFormat('en', { notation: \"compact\" }).format(value)} />\r\n\r\n\r\n\t\t\t\t\t\t\t\t<Tooltip contentStyle={{fontFamily:\"Lato\", fontSize:\"14px\"}} formatter={(value) => new Intl.NumberFormat('en').format(value)} cursor={{ fill: 'none' }} />\r\n\t\t\t\t\t\t\t\t<Bar margin={{ top: 40, left: 20, right: 20, bottom: 20 }} dataKey=\"value\" cursor=\"pointer\" radius={[8, 8, 0, 0]} maxBarSize={65} onClick={(event) => { handleOnClick(page + 1, event) }}>\r\n\t\t\t\t\t\t\t\t\t<LabelList\r\n\t\t\t\t\t\t\t\t\t\tformatter={(value) => new Intl.NumberFormat('en').format(value)} cursor={{ fill: 'none' }}\r\n\t\t\t\t\t\t\t\t\t\tposition=\"top\"\r\n\t\t\t\t\t\t\t\t\t\tdataKey=\"value\"\r\n\t\t\t\t\t\t\t\t\t\tfill=\"black\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tDashboardReport.hasOwnProperty(\"data\") && DashboardReport.data.length > 0 && DashboardReport.data.map((entry, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\tconst color = colors[index < 9 ? index : index % 10]\r\n\t\t\t\t\t\t\t\t\t\t\treturn <Cell key={index} fill={`#${color}`} />;\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</Bar>\r\n\t\t\t\t\t\t\t</BarChart>\r\n\t\t\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</Paper>\r\n\r\n\t\t\t</div>\r\n\t\t</MuiThemeProvider>\r\n\t)\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default withStyles(ChartStyles(Theme))(ChartRender);\r\n","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/Dashboard/languageDatasets.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/Dashboard/languageDatasets.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/styles/Dashboard.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/UploadDataset/DatasetSubmission.jsx",["356"],"import { Button, Grid, Typography } from \"@material-ui/core\"\nimport { Paper } from \"@material-ui/core\"\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport { withStyles } from '@material-ui/core';\nimport DatasetStyle from '../../../styles/Dataset';\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport { withRouter, useHistory } from \"react-router-dom\";\nimport urlconfig from '../../../../configs/internalurlmapping';\nimport thumbsUpIcon from \"../../../../assets/thumbsUp.svg\"\n\nconst DatasetSubmission = (props) => {\n    const { classes } = props\n    const { reqno } = props.match.params\n    const history = useHistory();\n    const { dataset } = urlconfig\n    return (\n        <div>\n            <div className={classes.breadcrum}>\n                <BreadCrum links={[dataset]} activeLink=\"Submit Dataset\" />\n            </div>\n            <Paper>\n                <Grid container className={classes.dataSubmissionGrid}>\n                    <Grid className={classes.submissionIcon} item xs={12} sm={12} md={2} lg={2} xl={2}>\n                        {/* <span className={classes.thumbsUpIconSpan}><ThumbUpIcon className={classes.thumbsUpIcon} /></span> */}\n                        <img className={classes.yourSearchQuery}\n                        src={thumbsUpIcon}\n                        alt=\"Success Icon\"\n                    />\n                    </Grid>\n                    <Grid item xs={12} sm={12} md={10} lg={10} xl={10}>\n                        <Typography className={classes.thankYouTypo} color=\"primary\" variant=\"body1\">Thank you, for the dataset submission.</Typography>\n                        <Typography className={classes.reqNoTypo} variant=\"h5\">Your Service Request Number is {reqno}</Typography>\n                        <Typography color=\"textSecondary\" variant=\"body1\">We are currently fetching the dataset from the URL you provided. This process may take some time.</Typography>\n                        <Typography color=\"textSecondary\" variant=\"body1\">Note: The submitted dataset will go through a series of validation steps before it gets published.</Typography>\n                        <Button className={classes.myContriBtn} color=\"primary\" variant=\"outlined\"\n                            onClick={() => history.push(`${process.env.PUBLIC_URL}/my-contribution/true`)}\n                        >\n                            Go to My Contribution\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n    )\n}\n\nexport default withRouter(withStyles(DatasetStyle)(DatasetSubmission))","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/authenticate.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Spinner.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/internalurlmapping.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Snackbar.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetView/ContributionList.jsx",["357","358","359"],"import { withStyles, Link, Button } from \"@material-ui/core\";\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport DataSet from \"../../../styles/Dataset\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport MUIDataTable from \"mui-datatables\";\nimport MyContributionList from \"../../../../redux/actions/api/DataSet/DatasetView/MyContribution\";\nimport { PageChange, RowChange, FilterTable, clearFilter } from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\"\nimport ClearReport from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\";\nimport Dialog from \"../../../components/common/Dialog\"\nimport { Cached, DeleteOutline, VerticalAlignTop } from '@material-ui/icons';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport { useParams } from \"react-router\";\nimport C from \"../../../../redux/actions/constants\";\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport FilterList from \"./FilterList\";\nconst ContributionList = (props) => {\n\n        const history = useHistory();\n        const dispatch = useDispatch(ClearReport);\n        const myContributionReport = useSelector((state) => state.myContributionReport);\n        const PageInfo = useSelector((state) => state.pageChangeDetails);\n        const [open, setOpen] = useState(false)\n        const [message, setMessage] = useState(\"Do you want to delete\")\n        const [title, setTitle] = useState(\"Delete\")\n        const { added } = useParams()\n        const data = myContributionReport.filteredData\n        const [anchorEl, setAnchorEl] = React.useState(null);\n        const popoverOpen = Boolean(anchorEl);\n        const id = popoverOpen ? 'simple-popover' : undefined;\n\n        useEffect(() => {\n                (myContributionReport.filteredData.length === 0 || myContributionReport.refreshStatus || added) && MyContributionListApi()\n        }, []);\n\n        const MyContributionListApi = () => {\n                dispatch(ClearReport());\n                const userObj = new MyContributionList(\"SAVE\", \"A_FBTTR-VWSge-1619075981554\", \"241006445d1546dbb5db836c498be6381606221196566\");\n                dispatch(APITransport(userObj));\n        }\n\n        const handleShowFilter = (event) => {\n                setAnchorEl(event.currentTarget);\n                console.log(myContributionReport.filter, myContributionReport.selectedFilter)\n        }\n        const handleClose = () => {\n                setAnchorEl(null);\n        };\n        const clearAll = (data) => {\n                dispatch(clearFilter(data, C.CLEAR_FILTER))\n        }\n        const apply = (data) => {\n                handleClose()\n                dispatch(FilterTable(data, C.CONTRIBUTION_TABLE))\n        }\n\n\n        const fetchHeaderButton = () => {\n                return <>\n\n\n                        <Button color={\"primary\"} size=\"medium\" variant=\"outlined\" className={classes.ButtonRefresh} onClick={() => MyContributionListApi()}><Cached className={classes.iconStyle} />Refresh</Button>\n                        <Button color={\"default\"} size=\"medium\" variant=\"outlined\" className={classes.buttonStyle} onClick={handleShowFilter}> <FilterListIcon className={classes.iconStyle} />Filter</Button>\n                </>\n        }\n\n        const handleSetValues = (name) => {\n                setTitle(`Delete ${name}  `)\n                setMessage(`Do you want to delete ${name} ? `)\n                setOpen(true)\n        }\n\n        const renderStatus = (id, name, value) => {\n                if (value === \"In-Progress\") {\n                        return <Link className={classes.link} onClick={() => { history.push(`${process.env.PUBLIC_URL}/dataset-status/${value}/${name}/${id}`) }}> In-Progress </Link>\n                }\n                else {\n                        return <span\n                        >{value} </span>\n                }\n        }\n\n        const renderAction = (name, value) => {\n                if (value === \"In-Progress\") { }\n                else {\n                        return (<div className={classes.action}>\n                                <div className={classes.link}>\n                                        <Link className={classes.link} color={\"primary\"} onClick={() => { history.push(`${process.env.PUBLIC_URL}/submit-dataset/upload`) }}> Update <div ><VerticalAlignTop style={{ \"height\": \"0.8em\" }} onClick={() => { handleSetValues(name) }} />  </div></Link>\n                                </div>\n                                <div className={classes.span\n                                }>\n                                        <DeleteOutline onClick={() => { handleSetValues(name) }} />\n                                </div>\n                        </div>)\n                }\n        }\n\n        const handleRowClick = (rowData) => {\n\n                history.push(`${process.env.PUBLIC_URL}/dataset-status/${rowData[4]}/${rowData[1]}/${rowData[0]}`)\n\n                // if(rowMeta.colIndex !== 6){\n                //         const value = data[rowMeta.rowIndex].submitRefNumber;\n                //         const status = data[rowMeta.rowIndex].status.toLowerCase();\n                //         const name = data[rowMeta.rowIndex].datasetName;\n                //         history.push(`${process.env.PUBLIC_URL}/dataset-status/${status}/${name}/${value}`)\n                // }\n        };\n\n        const handleDialogSubmit = () => {\n\n        }\n\n        const processTableClickedNextOrPrevious = (page, sortOrder) => {\n                dispatch(PageChange(page, C.PAGE_CHANGE));\n\n        }\n\n\n\n        const columns = [\n                {\n                        name: \"submitRefNumber\",\n                        label: \"s id\",\n                        options: {\n                                filter: false,\n                                sort: false,\n                                display: \"excluded\",\n                        },\n                },\n\n                {\n                        name: \"datasetName\",\n                        label: \"Dataset Name\",\n                        options: {\n                                filter: false,\n                                sort: true,\n                        },\n                },\n                {\n                        name: \"datasetType\",\n                        label: \"Dataset Type\",\n                        options: {\n                                filter: false,\n                                sort: true,\n                        },\n                },\n                {\n                        name: \"submittedOn\",\n                        label: \"Submitted On\",\n                        options: {\n                                filter: false,\n                                sort: true,\n\n                        },\n                },\n                {\n                        name: \"status\",\n                        label: \"Status\",\n                        options: {\n                                filter: true,\n                                sort: true,\n\n                        },\n                },\n                // {\n                // name: \"Status\",\n                // label: \"Status\",\n                // options: {\n                //         filter  : false,\n                //         sort    : false,\n                //         empty   : true,\n                //         customBodyRender: (value, tableMeta, updateValue) => {\n                //                         if (tableMeta.rowData) {\n                //                                 return <div>{renderStatus(tableMeta.rowData[0],tableMeta.rowData[2],tableMeta.rowData[4])}</div>;\n                //                         }\n                //                 },\n                //         },\n                // },\n\n                // {\n                // name    : \"Action\",\n                // label   : \"Action\",\n                // options: {\n                //                 filter  : false,\n                //                 sort    : false,\n                //                 empty   : true,\n                //                 customBodyRender: (value, tableMeta, updateValue) => {\n                //                         if (tableMeta.rowData) {\n                //                                 return <div>{renderAction(tableMeta.rowData[2], tableMeta.rowData[4])}</div>;\n                //                         }\n                //         },\n                // },\n                // },\n        ];\n\n\n        const options = {\n\n\n                textLabels: {\n                        body: {\n\n                                noMatch: \"No records\"\n                        },\n                        toolbar: {\n                                search: \"Search\",\n                                viewColumns: \"View Column\",\n                        },\n                        pagination: {\n                                rowsPerPage: \"Rows per page\",\n                        },\n                        options: { sortDirection: \"desc\" },\n                },\n                onRowClick: rowData => handleRowClick(rowData),\n                // onCellClick     : (colData, cellMeta) => handleRowClick( cellMeta),\n                customToolbar: fetchHeaderButton,\n                filter: false,\n                displaySelectToolbar: false,\n                fixedHeader: false,\n                filterType: \"checkbox\",\n                download: false,\n                print: false,\n                viewColumns: false,\n                rowsPerPage: PageInfo.count,\n\n                rowsPerPageOptions: [10, 25, 50, 100],\n                selectableRows: \"none\",\n                page: PageInfo.page,\n                onTableChange: (action, tableState) => {\n                        switch (action) {\n                                case \"changePage\":\n                                        processTableClickedNextOrPrevious(\n                                                tableState.page\n                                        );\n                                        break;\n                                case \"changeRowsPerPage\":\n                                        dispatch(RowChange(tableState.rowsPerPage, C.ROW_COUNT_CHANGE))\n                                        break;\n                                default:\n                        }\n                },\n\n\n        };\n\n        const { classes } = props;\n        return (\n                <div>\n                        <div className={classes.breadcrum}>\n                                <BreadCrum links={[UrlConfig.dataset]} activeLink=\"My Contribution\" />\n                        </div>\n\n                        {/* <div className={classes.title}>\n                                \n                        </div> */}\n\n\n                        <MUIDataTable\n                                title={`My Contribution`}\n                                data={data}\n                                columns={columns}\n                                options={options}\n                        />\n\n                        {open && <Dialog\n                                message={message}\n                                handleClose={() => { setOpen(false) }}\n                                open\n                                title={title}\n                                handleSubmit={() => { handleDialogSubmit() }}\n                        />}\n                        {popoverOpen && <FilterList\n                                id={id}\n                                open={popoverOpen}\n                                anchorEl={anchorEl}\n                                handleClose={handleClose}\n                                filter={myContributionReport.filter}\n                                selectedFilter={myContributionReport.selectedFilter}\n                                clearAll={clearAll}\n                                apply={apply}\n                        />\n\n\n                        }\n                </div>\n        );\n};\n\nexport default withStyles(DataSet)(ContributionList);","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetView/DetailedStatus.jsx",["360","361"],"import { withStyles,  MuiThemeProvider, createMuiTheme, Button, Typography } from \"@material-ui/core\";\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport React, { useEffect} from \"react\";\nimport DataSet from \"../../../styles/Dataset\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport MUIDataTable from \"mui-datatables\";\nimport DetailedDatasetStatus from \"../../../../redux/actions/api/DataSet/DatasetView/DetailedDataset\";\nimport ErrorFileDownload from \"../../../../redux/actions/api/DataSet/DatasetView/ErrorDownload\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {Cached, SaveAlt} from '@material-ui/icons';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport { useParams } from \"react-router\";\n\nconst DetailedStatus = (props) => {\n\n        const {detailedReport, errorData}         =       useSelector((state) => state);\n        const dispatch = useDispatch();\n        const {status,name, id} = useParams();\n\n        useEffect(() => {\n                \n                 DetailedDataSetStatusApi()\n                 \n        }, []);\n\n        const DetailedDataSetStatusApi  = () =>{\n                const userObj           = new DetailedDatasetStatus(id);\n                const userId           = new ErrorFileDownload(id);\n                dispatch(APITransport(userObj));\n                dispatch(APITransport(userId));\n        }\n\n        const handleDownload = () =>{\n\n                \n                \n        }\n        \n\n        const getMuiTheme = () => createMuiTheme({\n                overrides: {\n                        MuiTableCell: {\n                                head    : {\n                                        \n                                        backgroundColor : \"#c7c6c68a !important\",\n                                        fontWeight      :\"bold\"\n                                }\n                        },\n                        MUIDataTableBodyCell:{root : {textTransform: \"capitalize\"}},\n                        MuiToolbar: {\n                                 root: { \n                                         display: \"none\" \n                                        } \n                                },\n                        MuiPaper: {\n                                root:{\n                                        boxShadow       : 'none !important',\n                                        borderRadius    : 0,\n                                        border          : \"1px solid rgb(224 224 224)\"\n                                }\n                        }\n                },\n        \n        });\n\n\n        const fetchHeaderButton= () => {\n                return (\n                        <div className={classes.headerButtons}>\n                                <Typography  variant=\"h5\" >{name}</Typography>\n                                { <Button color={\"primary\" } size=\"medium\" className = {classes.ButtonRefresh} variant=\"outlined\" disabled={(status.toLowerCase()===\"in-progress\" || status.toLowerCase()===\"pending\")? false:true}   onClick={() => DetailedDataSetStatusApi()}><Cached className ={classes.iconStyle}/>Refresh</Button>}\n                                <Button color={\"primary\"} href={errorData.file} target=\"_self\" size=\"medium\" variant=\"outlined\" disabled={(errorData.hasOwnProperty(\"file\"))? false:true} className={!(errorData.status!==\"completed\")? classes.ButtonRefresh : classes.buttonStyle } onClick={() => handleDownload()}><SaveAlt className ={classes.iconStyle}/>Error Logs</Button>\n                        \n                        </div>\n                );\n        }\n\n        const handleAbort = ()  => {\n                alert (\"Still in progress\")\n        }\n\n        \n        const columns = [\n                {\n                        name    : \"srNo\",\n                        label   : \"s id\",\n                        options : {\n                                filter  : false,\n                                sort    : false,\n                                display : \"excluded\",\n                        },\n                },{\n                        name    : \"datasetId\",\n                        label   : \"Dataset ID\",\n                        options : {\n                                filter  : false,\n                                sort    : false,\n                                display : \"excluded\",\n                        },\n                },\n                {\n                        name    : \"stage\",\n                        label   : \"Stage\",\n                        options : {\n                                filter  : false,\n                                sort    : false,\n                        },\n                },\n                {\n                        name    : \"status\",\n                        label   : \"Status\",\n                        options : {\n                                filter  : false,\n                                sort    : false,\n                        },\n                },\n                {\n                        name    : \"recordCount\",\n                        label   : \"Success Count\",\n                        options : {\n                                filter  : false,\n                                sort    : false,\n                                \n                        },\n                },\n                {\n                        name    : \"failedCount\",\n                        label   : \"Failed Count\",\n                        options : {\n                                filter  : false,\n                                sort    : false,\n                                \n                        },\n                }\n        \n        ];\n\n        const options = {\n                textLabels              :       {\n                        body            :       {\n                                noMatch: \"No records\"\n                        },\n                        toolbar         :       {\n                                search          : \"Search\",\n                                viewColumns     : \"View Column\",\n                        },\n                        pagination      :       { rowsPerPage     : \"Rows per page\"},\n                        options         :       { sortDirection   : \"desc\" },\n                },\n                displaySelectToolbar    :       false,\n                fixedHeader             :       false,\n                filterType              :       \"checkbox\",\n                download                :       false,\n                print                   :       false,\n                filter                  :       false,\n                selectableRows          :       \"none\",\n        };\n\n        const { classes }               = props;\n        return (\n                <div>\n                        <div className  = {classes.breadcrum}>\n                                <BreadCrum links = {[UrlConfig.dataset,UrlConfig.myContribution]} activeLink = \"Dataset details\" />\n                        </div>\n                        <div className = {classes.headerButtons}>\n                                {fetchHeaderButton()} \n                        </div>\n                        <MuiThemeProvider theme = {getMuiTheme()}>  \n                                <MUIDataTable\n                                        title   =       {`My Contribution`}\n                                        data    =       {detailedReport.responseData}\n                                        columns =               {columns}\n                                        options ={options}\n                                />\n                        </MuiThemeProvider>\n                        {/* {status === \"in-progress\" && <div className = {classes.footerButtons}>\n                                <Button color = {\"primary\" } size = \"medium\" variant = \"outlined\" className = {classes.backButton} onClick = {() => handleAbort()}>Abort Process</Button>\n                                \n                        </div>} */}\n                </div>\n        );\n};\n\nexport default withStyles(DataSet)(DetailedStatus);\n","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Dialog.jsx",["362"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {Dialog,Typography,Divider} from '@material-ui/core';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Theme from \"../../theme/theme-default\";\n\nexport default function ResponsiveDialog(props) {\n  \n\n//   const getMuiTheme = () => createMuiTheme({\n//     overrides: {\n\n//       MuiDialog: {\n//             paperWidthSm:{\n//                     width:\"30%\",\n//                     minWidth:\"300px\"\n//             }\n//     },\n   \n//     }\n// });\n\n  \n\n  const {title,message, open,handleSubmit, handleClose,actionButton, actionButton2  } = props;\n  return (\n    \n    <MuiThemeProvider theme={Theme}> \n\n      <Dialog\n        open={open}\n        onClose ={() =>{handleClose()}}\n        \n      >\n        <DialogTitle id=\"responsive-dialog-title\"> <Typography variant={\"body1\"}>{title}</Typography></DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            <Typography variant={\"body2\"}>\n            {message}\n            </Typography>\n          </DialogContentText>\n        </DialogContent >\n        <Divider light />\n        <DialogActions>\n          <Button size ={\"small\"} autoFocus onClick ={() =>{handleClose()}} color=\"default\" variant={\"outlined\"}>\n            {actionButton}\n          </Button>\n          <Button size ={\"small\"} variant=\"contained\" onClick={() =>{handleSubmit()}} color=\"primary\" autoFocus>\n            {actionButton2}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </MuiThemeProvider>\n  );\n}","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/MySearches.jsx",["363"],"import { withStyles, Button } from \"@material-ui/core\";\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport React, { useEffect,useState} from \"react\";\nimport DataSet from \"../../../styles/Dataset\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport MUIDataTable from \"mui-datatables\";\nimport MySearchReport from \"../../../../redux/actions/api/DataSet/DatasetSearch/MySearches\";\nimport {PageChange, RowChange} from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\";\nimport C from \"../../../../redux/actions/constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {Cached} from '@material-ui/icons';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport {  useHistory } from \"react-router-dom\";\n\nconst MySearches = (props) => {\n\n        const detailedReport            =       useSelector((state) => state.mySearchReport);\n        const PageInfo            =       useSelector((state) => state.searchPageDetails);\n        const dispatch                  = useDispatch();\n        const history                   = useHistory();\n        const [page, setPage]           = useState(0);\n        \n        useEffect(() => {\n                MySearchListApi()   \n        }, []);\n        const  MySearchListApi  = () =>{\n                \n                const userObj         = new MySearchReport()\n                dispatch(APITransport(userObj));\n        }\n\n        const processTableClickedNextOrPrevious = (page, sortOrder) => {\n                dispatch(PageChange(page, C.SEARCH_PAGE_NO));\n               setPage(page)\n                }\n              \n\n       \n\n        const fetchHeaderButton= () => {\n            return <Button color={\"primary\" } size=\"medium\" variant=\"outlined\" className={classes.ButtonRefresh}  onClick={() =>MySearchListApi() }><Cached className ={classes.iconStyle}/>Refresh</Button>\n    }\n\n    const renderAction = (rowData) =>{\n\n        const status = rowData[4].toLowerCase();\n\n        history.push({ \n                pathname: `/search-and-download-rec/${status}/${rowData[0]}`,\n                pageInfo: page\n               });\n        // history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/${status}/${rowData[0]}`)\n    }\n\n        \n        const columns = [\n                {\n                        name    : \"sr_no\",\n                        label   : \"SR No\",\n                        options : {\n                                filter  : false,\n                                sort    : false,\n                                display : \"excluded\"\n                                \n                        },\n                },\n                {\n                        name    : \"search_criteria\",\n                        label   : \"Search Criteria\",\n                        options : {\n                                filter  : false,\n                                sort    : true,\n                        },\n                },\n                {\n                        name    : \"searched_on\",\n                        label   : \"Searched On\",\n                        options : {\n                                filter  : false,\n                                sort    : true,\n                        },\n                },{\n                        name    : \"count\",\n                        label   : \"#Record\",\n                        options : {\n                                filter  : false,\n                                sort    : true,\n                                \n                  }  },\n                {\n                        name    : \"status\",\n                        label   : \"Status\",\n                        options : {\n                                filter  : true,\n                                sort    : true,\n                                \n                        },\n                }\n        \n        ];\n\n        const options = {\n                textLabels              :       {\n                        body            :       {\n                                noMatch: \"No records\"\n                        },\n                        toolbar         :       {\n                                search          : \"Search\",\n                                viewColumns     : \"View Column\",\n                        },\n                        pagination      :       { rowsPerPage     : \"Rows per page\"},\n                        options         :       { sortDirection   : \"desc\" },\n                },\n                customToolbar: fetchHeaderButton,\n                displaySelectToolbar    :       false,\n                fixedHeader             :       false,\n                filterType              :       \"checkbox\",\n                download                :       false,\n                print                   :       false,\n                rowsPerPageOptions      :       [10,25,50,100],\n                rowsPerPage:PageInfo.count,\n                filter                  :       true,\n                page: PageInfo.page,\n                viewColumns     : false,\n                selectableRows          :       \"none\",\n                onTableChange: (action, tableState) => {\n                        switch (action) {\n                          case \"changePage\":\n                            processTableClickedNextOrPrevious(\n                              tableState.page\n                            );\n                            break;\n                            case \"changeRowsPerPage\":\n                                dispatch(RowChange(tableState.rowsPerPage, C.SEARCH_ROW_COUNT_CHANGE))\n                                break;\n                          default:\n                        }\n                      },\n\n                onRowClick                 : (rowData, rowMeta) =>rowData[3] &&  renderAction(rowData)\n        };\n\n        const { classes }               = props;\n\n        return (\n                <div >\n                        <div className  = {classes.breadcrum}>\n                                <BreadCrum links = {[UrlConfig.dataset]} activeLink = \"My Searches\" />\n                        </div>\n\n                                <MUIDataTable\n                                        title   =       {`My Searches`}\n                                        data    =       {detailedReport.responseData}\n                                        columns =               {columns}\n                                        options ={options}\n                                />\n\n                        \n                </div>\n        );\n};\n\nexport default withStyles(DataSet)(MySearches);\n","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetView/DetailedDataset.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetView/MyContribution.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/DetailedDataSet.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetSearch/MySearches.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/myContribution.js",["364","365"],"import C from '../../../actions/constants';\nimport getDatasetName from '../../../../utils/getDataset';\nconst initialState = {\n    responseData: [],\n    filteredData:[],\n    refreshStatus:false,\n    filter : {status:[],datasetType:[]},\n    selectedFilter : {status:[],datasetType:[]},\n}\n\nconst dateConversion = (value) =>{\n    \n    var myDate = new Date(value);\n    let result = (myDate.toLocaleString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true }))\n    return result.toUpperCase();\n}\n\nconst getFilterValue = (payload, data) =>{\n   \n    let {filterValues}= payload\n    let statusFilter = []\n    let filterResult = []\n    if(filterValues.hasOwnProperty(\"status\") && filterValues.status.length>0){\n        statusFilter = data.responseData.filter(value =>{ \n            if(filterValues.status.includes(value.status)){\n                return value\n            }\n    })\n    \n}else{\n    statusFilter = data.responseData\n}\nif(filterValues.hasOwnProperty(\"datasetType\") && filterValues.datasetType.length>0){\n    filterResult = statusFilter.filter(value=>{\n        if(filterValues.datasetType.includes(value.datasetType)){\n            return value\n        }\n    })\n}\nelse{\n    filterResult = statusFilter\n}\ndata.filteredData = filterResult;\ndata.selectedFilter = filterValues;\n\nreturn data;\n    \n}\n\nconst getClearFilter = (data) =>{\n    data.filteredData = data.responseData;\n    data.selectedFilter = {status:[],datasetType:[]}\n    return data;\n}\n\nconst getContributionList = (payload) => {\n    let responseData = [];\n    let statusFilter = [];\n    let datatypeFilter = [];\n    let filter = {status:[],datasetType:[]}\n    let refreshStatus = false;\n    payload.forEach(element => {\n        responseData.push(\n            {\n                     submitRefNumber      : element.serviceRequestNumber,\n                     datasetName          : element.datasetName,\n                     submittedOn          : dateConversion(element.submittedOn),\n                     datasetType :          getDatasetName(element.datasetType),\n                     status               : element.status\n            }\n            \n        )\n        !statusFilter.includes(element.status) && statusFilter.push(element.status)\n        !datatypeFilter.includes(element.datasetName) && datatypeFilter.push(getDatasetName(element.datasetType))\n        if(element.status === \"In-Progress\" || element.status === \"Pending\"){\n            refreshStatus = true\n        }\n    }); \n\n    filter.status = [...(new Set(statusFilter))];\n    filter.datasetType = [...(new Set(datatypeFilter))];\n\n\n    responseData = responseData.reverse()\n    return {responseData ,filteredData:responseData, refreshStatus, filter, selectedFilter:{status:[],datasetType:[]}};\n}\n\nconst reducer = (state = initialState, action) => {\n    \n    switch (action.type) {\n\n        case C.GET_CONTRIBUTION_LIST:\n            return getContributionList(action.payload);\n            case C.CONTRIBUTION_TABLE:\n                return getFilterValue(action.payload, state);\n        case C.CLEAR_CONTRIBUTION_LIST:\n            return {\n                ...initialState\n            }\n            case C.CLEAR_FILTER:\n                return getClearFilter(state);\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default reducer;","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetSearch/MySearches.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/UserManagement/Login.js",["366","367"],"/**\n * Login API\n */\n import API from \"../../api\";\n import C from \"../../constants\";\n import CONFIGS from \"../../../../configs/configs\";\n import ENDPOINTS from \"../../../../configs/apiendpoints\";\n \n export default class LoginAPI extends API {\n   constructor(userLogin, timeout = 2000) {\n     super(\"POST\", timeout, false);\n    this.credentials = userLogin;\n     this.endpoint = `${super.apiEndPointAuto()}${ENDPOINTS.login}`;\n   }\n \n \n   apiEndPoint() {\n     return this.endpoint;\n   }\n \n   getBody() {\n     let apiParam = {\"authenticator\": \"ULCA\",\n     \"data\": this.credentials}\n     return apiParam;\n   }\n \n   getHeaders() {\n     this.headers = {\n       headers: {\n         \"Content-Type\": \"application/json\"\n       }\n     };\n     return this.headers;\n   }\n \n   getPayload() {\n     return this.credentials;\n   }\n }\n ","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/utils/Login.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/SearchDownloadRecords.jsx",["368","369","370"],"import {\n    Grid,\n    Typography,\n    Button,\n    TextField,\n    Checkbox,\n    FormControlLabel\n} from '@material-ui/core';\nimport SearchResult from \"./SearchResult\";\nimport { withStyles } from '@material-ui/core/styles';\nimport DatasetStyle from '../../../styles/Dataset';\nimport Snackbar from '../../../components/common/Snackbar';\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport { PageChange } from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\";\nimport C from \"../../../../redux/actions/constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useState, useEffect, useRef } from 'react';\nimport DownloadDatasetRecords from \"./DownloadDatasetRecords\";\nimport RequestNumberCreation from \"./RequestNumberCreation\";\nimport { useHistory, useParams } from 'react-router';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport MultiAutocomplete from '../../../components/common/Autocomplete';\nimport { Language, FilterBy } from '../../../../configs/DatasetItems';\nimport SubmitSearchRequest from '../../../../redux/actions/api/DataSet/DatasetSearch/SubmitSearchRequest';\nimport DatasetType from '../../../../configs/DatasetItems';\nimport getLanguageLabel from '../../../../utils/getLabel';\n\nconst SearchAndDownloadRecords = (props) => {\n    const { classes } = props;\n    const url = UrlConfig.dataset;\n    const urlMySearch = UrlConfig.mySearches;\n    const dispatch = useDispatch();\n    const param = useParams();\n    const history = useHistory();\n    const [languagePair, setLanguagePair] = useState({\n        source: '',\n        target: []\n    });\n    // const [filterBy, setFilterBy] = useState({\n    //     domain: [],\n    //     source: [],\n    //     collectionMethod: []\n    // });\n    const [filterBy, setFilterBy] = useState({\n        domain: '',\n        source: '',\n        collectionMethod: ''\n    });\n\n    const [datasetType, setDatasetType] = useState({\n        'parallel-corpus': true\n    })\n\n    const [count, setCount] = useState(0);\n    const [urls, setUrls] = useState({\n        downloadSample: '',\n        downloadAll: ''\n    })\n\n    const previousUrl = useRef();\n\n\n    const detailedReport = useSelector((state) => state.mySearchReport);\n\n    useEffect(() => {\n\n        previousUrl.current = params;\n\n        let data = detailedReport.responseData.filter((val) => {\n            return val.sr_no === srno\n        })\n        if (data[0]) {\n            setCount(data[0].count);\n            setUrls({\n                downloadSample: data[0].sampleUrl,\n                downloadAll: data[0].downloadUrl\n            })\n\n            let target = data[0].targetLanguage ? getLanguageLabel(data[0].targetLanguage) : getLanguageLabel(data[0].sourceLanguage)\n            let source = data[0].sourceLanguage && Language.filter(val => val.value === data[0].sourceLanguage[0])[0].label\n            let domain = data[0].domain && FilterBy.domain.filter(val => val.value === data[0].domain[0])[0].label\n            let collectionMethod = data[0].collection && FilterBy.collectionMethod.filter(val => val.value === data[0].collection[0])[0].label\n            setFilterBy({\n                ...filterBy, domain, collectionMethod\n            })\n            setLanguagePair({ target, source })\n            //   setLanguagePair({ target, source: getLanguageLabel(data[0].sourceLanguage)})\n            setDatasetType({ [data[0].datasetType]: true })\n        }\n\n        else if ((params === 'completed' || params === 'inprogress') && count === 0)\n            history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`)\n\n    }, []);\n\n    useEffect(() => {\n        if (previousUrl.current !== params && previousUrl.current !== 'initiate') {\n            setLanguagePair({ target: [], source: \"\" })\n            setFilterBy({\n                domain: \"\",\n                source: \"\",\n                collectionMethod: \"\"\n            })\n        }\n        previousUrl.current = params;\n    })\n\n\n    const handleCheckboxChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n    };\n    const handleLanguagePairChange = (value, property) => {\n        setLanguagePair({ ...languagePair, [property]: value });\n\n        if (property === 'source')\n            setSrcError(false)\n        else\n            setTgtError(false)\n    };\n    const handleFilterByChange = (value, property) => {\n        setFilterBy({ ...filterBy, [property]: value });\n    };\n    const [snackbar, setSnackbarInfo] = useState({\n        open: false,\n        message: '',\n        variant: 'success'\n    })\n    const [state, setState] = useState({\n        checkedA: false,\n        checkedB: false,\n    });\n    const [srcError, setSrcError] = useState(false)\n    const [tgtError, setTgtError] = useState(false)\n    const { params, srno } = param\n    const renderPage = () => {\n        let data = detailedReport.responseData.filter((val) => {\n            return val.sr_no === srno\n        })\n        let datasetType = data.length && getLanguageLabel(data[0].datasetType, 'datasetType')[0]\n        switch (params) {\n            case 'inprogress':\n                return <RequestNumberCreation reqno={srno} />\n            case 'completed':\n                return <DownloadDatasetRecords datasetType={datasetType ? datasetType : 'Parallel'} sentencePair={count} urls={urls} />\n            default:\n                return <SearchResult />\n        }\n    }\n\n    const handleDatasetClick = (property) => {\n        history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`)\n        clearfilter()\n        setDatasetType({ [property]: true })\n        setSrcError(false)\n        setTgtError(false)\n    }\n    const getLabel = () => {\n        if (datasetType['parallel-corpus'])\n            return \"Target Language *\"\n        // else if (datasetType['ocr-corpus'])\n        //     return \"Script *\"\n        else\n            return \"Language *\"\n    }\n\n    const getTitle = () => {\n        if (datasetType['parallel-corpus'])\n            return \"Select Language Pair\"\n        // else if (datasetType['ocr-corpus'])\n        //     return \"Select Script\"\n        else\n            return \"Select Language\"\n    }\n    const clearfilter = () => {\n        setFilterBy({\n            domain: \"\",\n            source: \"\",\n            collectionMethod: \"\"\n        });\n        setLanguagePair({\n            source: \"\",\n            target: []\n        });\n    }\n\n    const makeSubmitAPICall = (src, tgt, domain, collectionMethod, type) => {\n        const Dataset = Object.keys(type)[0]\n        setSnackbarInfo({\n            ...snackbar,\n            open: true,\n            message: 'Please wait while we process your request...',\n            variant: 'info'\n        })\n        const apiObj = new SubmitSearchRequest(Dataset, tgt, src, domain, collectionMethod)\n        fetch(apiObj.apiEndPoint(), {\n            method: 'post',\n            headers: apiObj.getHeaders().headers,\n            body: JSON.stringify(apiObj.getBody())\n        })\n            .then(async res => {\n                if (res.ok) {\n                    let response = await res.json()\n                    dispatch(PageChange(0, C.SEARCH_PAGE_NO));\n                    history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/inprogress/${response.serviceRequestNumber}`)\n                    handleSnackbarClose()\n\n                } else {\n                    new Promise.reject(\"\")\n                }\n            })\n            .catch(err => {\n                setSnackbarInfo({\n                    ...snackbar,\n                    open: true,\n                    message: 'Failed to submit your search request...',\n                    variant: 'error'\n                })\n            })\n\n    }\n    const handleSnackbarClose = () => {\n        setSnackbarInfo({ ...snackbar, open: false })\n    }\n    const getValueForLabel = (label) => {\n        return Language.filter(val => val.label === label)[0]\n\n    }\n    const getFilterValueForLabel = (data, label) => {\n        //  if (data === 'domain') {\n        return (FilterBy[data].filter(val => val.label === label)[0])\n        //  }\n        // else if (data === 'collectionMethod') {\n        //     return (FilterBy.collectionMethod.filter(val => val.label === label)[0])\n        // }\n    }\n\n    const handleSubmitBtn = () => {\n        let tgt = languagePair.target.map(trgt => trgt.value)\n        //let domain = filterBy.domain.map(domain => domain.value)\n        //let collectionMethod = filterBy.collectionMethod.map(method => method.value)\n        let domain = filterBy.domain && [getFilterValueForLabel('domain', filterBy.domain).value]\n        let collectionMethod = filterBy.collectionMethod && [getFilterValueForLabel('collectionMethod', filterBy.collectionMethod).value]\n        if (datasetType['parallel-corpus']) {\n            if (languagePair.source && languagePair.target.length) {\n                let source = getValueForLabel(languagePair.source).value\n                makeSubmitAPICall(source, tgt, domain, collectionMethod, datasetType)\n                //  makeSubmitAPICall(languagePair.source, tgt, domain, collectionMethod, datasetType)\n            }\n\n            else if (!languagePair.source && !languagePair.target.length) {\n                setSrcError(true)\n                setTgtError(true)\n            }\n\n            else if (!languagePair.source)\n                setSrcError(true)\n            else if (!languagePair.target.length)\n                setTgtError(true)\n        }\n        else {\n            if (!languagePair.target.length)\n                setTgtError(true)\n            else {\n                makeSubmitAPICall(null, tgt, domain, collectionMethod, datasetType)\n            }\n\n        }\n\n\n    }\n\n    const renderDatasetButtons = () => {\n        return (\n            DatasetType.map((type, i) => {\n                return (\n                    <Button size='small' className={classes.innerButton} variant=\"outlined\"\n                        color={datasetType[type.value] && \"primary\"}\n                        key={i}\n                        onClick={() => handleDatasetClick(type.value)}\n                    >\n                        {type.label}\n                    </Button>)\n            })\n\n        )\n    }\n\n    const renderFilterByOptions = (id, options, filter, value, label) => {\n        return (\n            <MultiAutocomplete\n                id={id}\n                options={options}\n                filter={filter}\n                value={value}\n                handleOnChange={handleFilterByChange}\n                label={label}\n            />\n\n        )\n    }\n    // const renderFilterByfield = (id, label, value, filter) => {\n    //     return (\n    //         <TextField className={classes.subHeader}\n    //             fullWidth\n    //             select\n    //             id={id}\n    //             label={label}\n    //             value={value}\n    //             onChange={(event) => handleFilterByChange(event.target.value, id)}\n    //         >\n    //             {filter.map((option) => (\n    //                 <MenuItem key={option.value} value={option.value}>\n    //                     {option.label}\n    //                 </MenuItem>\n    //             ))}\n    //         </TextField>\n    //     )\n    // }\n    const renderFilterByfield = (id, label, value, filter) => {\n        let filterByOptions = FilterBy[id].map(data => data.label)\n        return (\n            <Autocomplete\n                value={filterBy[id] ? filterBy[id] : null}\n                id={id}\n                options={filterByOptions}\n                onChange={(event, data) => handleFilterByChange(data, id)}\n                renderInput={(params) => <TextField fullWidth {...params} label={label} variant=\"standard\"\n                />}\n            />\n        )\n    }\n    const renderTexfield = (id, label, value, options, filter) => {\n        let labels = Language.map(lang => lang.label)\n        return (\n            <Autocomplete\n                value={languagePair.source ? languagePair.source : null}\n                id=\"source\"\n                options={labels}\n                onChange={(event, data) => handleLanguagePairChange(data, 'source')}\n                renderInput={(params) => <TextField fullWidth {...params} label=\"Source Language *\" variant=\"standard\"\n                    error={srcError}\n                    helperText={srcError && \"This field is mandatory\"}\n                />}\n            />\n\n\n        )\n    }\n    const renderCheckBox = (name, color, label) => {\n        return (\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={state[name]}\n                        onChange={handleCheckboxChange}\n                        name={name}\n                        color={color}\n                    />\n                }\n                label={label}\n            />\n        )\n    }\n    const getTargetLang = () => {\n        return Language.filter(lang => lang.label !== languagePair.source)\n    }\n    const renderclearNsubmitButtons = () => {\n        return (\n            /* <div className={classes.clearNSubmit}>\n                      <Button size=\"large\"  variant=\"outlined\" onClick={clearfilter}>\n                          Clear\n                  </Button>\n                      <Button size=\"large\" className={classes.buttonStyle} variant=\"contained\" color=\"primary\" onClick={handleSubmitBtn}>\n                          Submit\n                  </Button>\n                  </div> */\n            <Grid container className={classes.clearNSubmit}>\n                <Grid item xs={3}></Grid>\n                <Grid item xs={9}>\n                    <Grid container spacing={2} >\n                        <Grid item xs={6}>\n                            <Button size=\"large\" fullWidth variant=\"outlined\" onClick={clearfilter}>\n                                Clear\n                            </Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button fullWidth size=\"large\" variant=\"contained\" color=\"primary\" onClick={handleSubmitBtn}>\n                                Submit\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n\n        )\n    }\n\n    return (\n        <div>\n            <Grid container spacing={3}>\n                <Grid className={classes.leftSection} item xs={12} sm={5} md={4} lg={4} xl={4}>\n                    <Grid container spacing={2}>\n                        <Grid className={classes.breadcrum} item xs={12} sm={12} md={12} lg={12} xl={12}>\n                            <BreadCrum links={(params === 'inprogress' || params === 'completed') ? [url, urlMySearch] : [url]} activeLink=\"Search & Download Records\" />\n                        </Grid>\n                        <Grid item className={(params === 'inprogress' || params === 'completed') && classes.blurOut}\n                            xs={12} sm={12} md={12} lg={12} xl={12}\n                        >\n                            <Typography className={classes.subHeader} variant=\"body1\">Select Dataset Type</Typography>\n                            <div className={classes.buttonDiv}>\n                                {renderDatasetButtons()}\n                            </div>\n                            <Typography className={classes.subHeader} variant=\"body1\">{getTitle()}</Typography>\n                            <div className={classes.subHeader}>\n                                {datasetType['parallel-corpus'] && renderTexfield(\"select-source-language\", \"Source Language *\")}\n                            </div>\n                            <div className={classes.autoComplete}>\n                                <MultiAutocomplete\n                                    id=\"language-target\"\n                                    options={getTargetLang()}\n                                    filter='target'\n                                    value={languagePair.target}\n                                    handleOnChange={handleLanguagePairChange}\n                                    label={getLabel()}\n                                    error={tgtError}\n                                    helperText=\"This field is mandatory\"\n                                />\n                            </div>\n                            <Typography className={classes.subHeader} variant=\"body1\">Filter by</Typography>\n                            <Grid container spacing={1}>\n                                <Grid className={classes.subHeader} item xs={12} sm={12} md={12} lg={12} xl={12}>\n                                    {renderFilterByfield(\"domain\", \"Select Domain\", filterBy.domain, FilterBy.domain)}\n                                </Grid>\n                                <Grid className={classes.subHeader} item xs={12} sm={12} md={12} lg={12} xl={12}>\n                                    {renderFilterByfield(\"collectionMethod\", \"Select Collection Method\", filterBy.collectionMethod, FilterBy.collectionMethod)}\n                                </Grid>\n                            </Grid>\n\n                            {renderCheckBox(\"checkedA\", \"primary\", \"Vetted by multiple annotators\")}\n                            {renderCheckBox(\"checkedB\", \"primary\", \"Source sentences manually translated by multiple translators\")}\n                            {renderclearNsubmitButtons()}\n                        </Grid>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12} sm={7} md={8} lg={8} xl={8} className={classes.parent}>\n                    {renderPage()}\n                </Grid>\n\n            </Grid>\n            {\n                snackbar.open &&\n                <Snackbar\n                    open={snackbar.open}\n                    handleClose={handleSnackbarClose}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n                    message={snackbar.message}\n                    variant={snackbar.variant}\n                />\n            }\n        </div >\n    )\n\n\n}\n\nexport default withStyles(DatasetStyle)(SearchAndDownloadRecords);","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/UploadDataset/SubmitDataset.js",["371","372"],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/RequestNumberCreation.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/DownloadDatasetRecords.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/SearchResult.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Autocomplete.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetSearch/SearchAndDownload.js",["373","374"],"import API from \"../../../api\";\nimport C from \"../../../constants\";\nimport ENDPOINTS from \"../../../../../configs/apiendpoints\";\nimport CONFIGS from \"../../../../../configs/configs\";\n\nexport default class SearchAndDownload extends API {\n    constructor(timeout = 200000) {\n        super(\"GET\", timeout, false);\n        this.type = C.GET_SEARCH_OPTIONS;\n        this.endpoint= \"https://jsonplaceholder.typicode.com/posts\"\n        //this.endpoint = `${CONFIGS.API_URL}${ENDPOINTS.getSearchOptions}`;\n    }\n\n    toString() {\n        return `${super.toString()} email: ${this.email} token: ${this.token} expires: ${this.expires} userid: ${this.userid}, type: ${this.type}`;\n    }\n\n    processResponse(res) {\n        super.processResponse(res);\n        this.report = res\n    }\n\n    apiEndPoint() {\n        return this.endpoint;\n    }\n\n\n    getHeaders() {\n        this.headers = {\n            headers: {\n\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        return this.headers;\n    }\n\n    getPayload() {\n        return this.report\n    }\n\n}\n","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetSearch/SearchAndDownload.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/DatasetItems.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetSearch/SubmitSearchRequest.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetView/ErrorDownload.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/DataSet/DatasetView/DatasetAction.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/ErrorDownload.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/UserManagement/Register.js",["375","376"],"/**\n * Login API\n */\n import API from \"../../api\";\n import C from \"../../constants\";\n import CONFIGS from \"../../../../configs/configs\";\n import ENDPOINTS from \"../../../../configs/apiendpoints\";\n \n export default class RegisterAPI extends API {\n   constructor(userLogin, timeout = 2000) {\n     super(\"POST\", timeout, false);\n    this.details = userLogin;\n     this.endpoint = `${super.apiEndPointAuto()}${ENDPOINTS.register}`;\n   }\n \n \n   apiEndPoint() {\n     return this.endpoint;\n   }\n \n   getBody() {\n     let apiParam = {\n        \"users\": [this.details]}\n     return apiParam;\n   }\n \n   getHeaders() {\n     this.headers = {\n       headers: {\n         \"Content-Type\": \"application/json\"\n       }\n     };\n     return this.headers;\n   }\n \n   getPayload() {\n     return this.credentials;\n   }\n }\n ","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/ActivateUser.jsx",["377","378"],"\n\nimport React, { useEffect, useState } from \"react\";\nimport {  useHistory } from \"react-router-dom\";\nimport Snackbar from '../../components/common/Snackbar';\nimport ActivateUserId from \"../../../redux/actions/api/UserManagement/ActivateUser\";\nimport ActiveUser from \"./ActiveUser\";\nimport { useParams } from \"react-router\";\n\nconst ContributionList = (props) => {\n\n        const history                 = useHistory();\n       \n        const [open, setOpen]         = useState(false)\n        // const [message, setMessage]   = useState(\"Do you want to delete\")\n        //const [title, setTitle]       = useState(\"Delete\")\n        const {email, userId}                 = useParams()\n        const [loading, setLoading] = useState(true);\n        const [snackbar, setSnackbarInfo] = useState({\n            open: false,\n            message: '',\n            variant: 'success'\n        })\n        \n        useEffect(()                  => {\n                 UserActivate()\n        }, []);\n\n        const  UserActivate  = () =>{\n            let apiObj = new ActivateUserId(email, userId)\n            var rsp_data =[]\n              fetch(apiObj.apiEndPoint(), {\n                method: 'post',\n                body: JSON.stringify(apiObj.getBody()),\n                headers: apiObj.getHeaders().headers\n              }).then(async response => {\n                rsp_data = await response.json();\n                setLoading(false)\n                if (!response.ok) {\n                  \n                  return Promise.reject('');\n                } else {\n                    setOpen(true)\n                 \n                }\n              }).catch((error) => {\n                setLoading(false)\n                \n                  setSnackbarInfo({\n                                  ...snackbar,\n                                  open: true,\n                                  message: rsp_data.message ? rsp_data.message : \"Something went wrong. please try again\",\n                                  variant: 'error'\n                              })\n              });\n\n              setTimeout(() => {\n                history.push(`${process.env.PUBLIC_URL}/user/login`)\n            }, 4000)\n            \n              }\n              const handleSnackbarClose = () => {\n                setSnackbarInfo({ ...snackbar, open: false })\n            }\n        return (\n                <div >\n                       {open && <ActiveUser/>}\n                        \n                       {snackbar.open &&\n      <Snackbar\n          open={snackbar.open}\n          handleClose={handleSnackbarClose}\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n          message={snackbar.message}\n          variant={snackbar.variant}\n      />}\n                </div>\n        );\n};\n\nexport default (ContributionList);\n","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/actions/api/UserManagement/ActivateUser.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/UserManagement/ActiveUser.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/utils/getLabel.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/utils/getDataset.jsx",["379"],"import { DatasetItems } from '../configs/DatasetItems';\n\n\n\nexport default (value) => {\n\n    let name = \"\"\n    DatasetItems.forEach(val => {\n                \n                if(value === val.value){\n                    name = val.label\n                }\n\n            \n            \n    })\n    return name;\n}\n\n","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/ReadymadeDataset.jsx/ReadymadeDataset.jsx",["380","381","382","383"],"import { withStyles, Typography, MuiThemeProvider, createMuiTheme, Button } from \"@material-ui/core\";\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport React, { useEffect} from \"react\";\nimport DataSet from \"../../../styles/Dataset\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport MUIDataTable from \"mui-datatables\";\nimport MySearchReport from \"../../../../redux/actions/api/DataSet/DatasetSearch/MySearches\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {Cached} from '@material-ui/icons';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport {  useHistory } from \"react-router-dom\";\n\nconst ReadymadeDataset = (props) => {\n\n        const detailedReport            =       useSelector((state) => state.mySearchReport);\n        const dispatch                  = useDispatch();\n        const history                   = useHistory();\n        \n        useEffect(() => {\n                MySearchListApi()   \n        }, []);\n\n  \n        const  MySearchListApi  = () =>{\n                \n                const userObj         = new MySearchReport()\n                dispatch(APITransport(userObj));\n        }\n\n       \n\n        const fetchHeaderButton= () => {\n            return <Button color={\"primary\" } size=\"medium\" variant=\"outlined\" className={classes.ButtonRefresh}  onClick={() =>MySearchListApi() }><Cached className ={classes.iconStyle}/>Refresh</Button>\n    }\n\n    const renderAction = (rowData) =>{\n\n        const status = rowData[4].toLowerCase();\n        history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/${status}/${rowData[0]}`)\n    }\n\n        \n        const columns = [\n                {\n                        name    : \"sr_no\",\n                        label   : \"SR No\",\n                        options : {\n                                filter  : false,\n                                sort    : false,\n                                display : \"excluded\"\n                                \n                        },\n                },\n                {\n                        name    : \"search_criteria\",\n                        label   : \"Search Criteria\",\n                        options : {\n                                filter  : false,\n                                sort    : true,\n                        },\n                },\n                {\n                        name    : \"searched_on\",\n                        label   : \"Searched On\",\n                        options : {\n                                filter  : false,\n                                sort    : true,\n                        },\n                },{\n                        name    : \"count\",\n                        label   : \"#Record\",\n                        options : {\n                                filter  : false,\n                                sort    : true,\n                                \n                  }  },\n                {\n                        name    : \"status\",\n                        label   : \"Status\",\n                        options : {\n                                filter  : false,\n                                sort    : false,\n                                \n                        },\n                }\n        \n        ];\n\n        const options = {\n                textLabels              :       {\n                        body            :       {\n                                noMatch: \"No records\"\n                        },\n                        toolbar         :       {\n                                search          : \"Search\",\n                                viewColumns     : \"View Column\",\n                        },\n                        pagination      :       { rowsPerPage     : \"Rows per page\"},\n                        options         :       { sortDirection   : \"desc\" },\n                },\n                customToolbar: fetchHeaderButton,\n                displaySelectToolbar    :       false,\n                fixedHeader             :       false,\n                filterType              :       false,\n                download                :       false,\n                print                   :       false,\n                filter                  :       false,\n                viewColumns     : false,\n                selectableRows          :       \"none\",\n\n\n                onRowClick                 : (rowData, rowMeta) =>rowData[3] &&  renderAction(rowData)\n        };\n\n        const { classes }               = props;\n        return (\n                <div >\n                        <div className  = {classes.breadcrum}>\n                                <BreadCrum links = {[UrlConfig.dataset]} activeLink = \"Readymade Dataset\" />\n                        </div>\n\n                                <MUIDataTable\n                                        title   =       {`Readymade Dataset`}\n                                        data    =       {detailedReport.responseData}\n                                        columns =               {columns}\n                                        options ={options}\n                                />\n\n                        \n                </div>\n        );\n};\n\nexport default withStyles(DataSet)(ReadymadeDataset);\n","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/configs/menuItems.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/MenuItem.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/PageInfo.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetSearch/SearchPageInfo.js",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/TitleBar.jsx",[],"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/Statistics.jsx",["384","385","386","387","388","389","390","391","392","393","394","395"],"import React, { useState } from \"react\";\nimport { Toolbar, FormControl, InputLabel, NativeSelect, AppBar, Grid, Paper } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles, Button, Menu, MenuItem, MuiThemeProvider } from \"@material-ui/core\";\nimport DatasetStyles  from \"../../styles/Dataset\";\nimport { DatasetItems } from \"../../../configs/DatasetItems\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { SaveAlt } from '@material-ui/icons';\nimport HeaderStyles from \"../../styles/HeaderStyles\";\n\n\nconst Statistics = (props) => {\n    const { classes } = props;\n    return (\n        <AppBar position=\"static\" color=\"inherit\" elevation={0} style={{alignContent: 'center',display: 'grid'}}>\n            <Toolbar className={classes.toolbar}>\n                <Grid container style={{ alignItems: 'center' }}>\n                    < Grid item xs={2} sm={2} md={2} lg={2} xl={2}>\n                        <Typography variant=\"body2\" gutterBottom>\n                            {props.label}\n                        </Typography>\n                        <Typography variant=\"body1\">\n                            {props.totValue}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={8} sm={8} md={8} lg={8} xl={8}>\n                        <Grid container spacing={4}>\n                            {props.children}\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={2} sm={2} md={2} lg={2} xl={2} >\n                        <Button\n                            size=\"medium\"\n                            color=\"primary\"\n                            variant=\"outlined\"\n                            style={{ textTransform: 'none', float:'right' }}\n                            onClick={props.handleOnClick}\n                        >\n                            <SaveAlt className={classes.iconStyle} />Download\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Toolbar>\n        </AppBar>\n\n    )\n}\n\nexport default withStyles(HeaderStyles)(Statistics);","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/ReadymadeDataset.jsx/PopUp.jsx",["396","397","398","399","400"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useState } from \"react\";\nimport { Grid } from '@material-ui/core';\nimport { SaveAlt } from '@material-ui/icons';\nimport DatasetStyle from '../../../styles/Dataset';\nimport { withStyles } from '@material-ui/core/styles';\nimport CloseIcon from '@material-ui/icons/Close';\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1),\n    },\n}));\n\nconst PopUpDialog = (props) => {\n    const { classes } = props;\n    // const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [fullWidth, setFullWidth] = useState(true);\n    const [maxWidth, setMaxWidth] = useState('sm');\n    const rows = [\n        createData('Language Pair', 'Hindi-English'),\n        createData('Curation Date', '23/4/2019'),\n        createData('#Records', '128k'),\n        createData('#Downloaded', '3k'),\n    ];\n    function createData(name, calories) {\n        return { name, calories };\n    }\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    return (\n        <>\n            {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n                Open dialog\n      </Button> */}\n            <Dialog\n                fullWidth={fullWidth}\n                maxWidth={maxWidth}\n                open={true}\n                onClose={handleClose}\n            // className={classes.popupDialog}\n            >\n                <Grid container style={{ alignItems: 'center' }}>\n                    <Grid item xs={9} sm={9} md={9} lg={9} xl={9}>\n                        <DialogTitle>English-Hindi Parallel Text Corpus</DialogTitle>\n                    </Grid>\n                    <Grid item xs={3} sm={3} md={3} lg={3} xl={3}>\n                        <Button variant='outlined' onClick={handleClose} style={{ float: 'right', marginRight: \"21px\" }}><CloseIcon fontSize='small' className={classes.iconStyle} />\n                            Close\n                        </Button>\n                    </Grid>\n                </Grid>\n                <DialogContent>\n                    <DialogContentText>\n\n                    </DialogContentText>\n                    <TableContainer component={Paper} elevation={0} style={{ border: '1px solid #00000029', borderRadius: '0' }}>\n                        <Table>\n                            <TableBody>\n                                {rows.map((row) => (\n                                    <TableRow key={row.name}>\n                                        <TableCell style={{ boxShadow: '4px 0 4px -4px #00000029', width: '140px' }} component=\"th\" scope=\"row\">\n                                            {row.name}\n                                        </TableCell>\n                                        <TableCell align=\"left\">{row.calories}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </DialogContent>\n                <DialogActions>\n                    <Button size=\"small\" variant=\"outlined\" ><SaveAlt className={classes.iconStyle} />Download Sample</Button>\n                    <Button size=\"small\" variant=\"outlined\" className={classes.buttonStyle} ><SaveAlt className={classes.iconStyle} />Download All</Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nexport default withStyles(DatasetStyle)(PopUpDialog);\n","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/Slider.jsx",["401","402","403","404"],"import React, { Component, useState } from \"react\";\nimport { render } from \"react-dom\";\nimport SlidingPane from \"react-sliding-pane\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\n\nconst App = () => {\n  const [state, setState] = useState({\n    isPaneOpen: false,\n    isPaneOpenLeft: false,\n  });\n\n  return (\n    <div>\n      {/* <button onClick={() => setState({ isPaneOpen: true })}>\n        Click me to open right pane!\n      </button>\n      <div style={{ marginTop: \"32px\" }}>\n        <button onClick={() => setState({ isPaneOpenLeft: true })}>\n          Click me to open left pane with 20% width!\n        </button>\n      </div>\n      <SlidingPane\n        className=\"some-custom-class\"\n        overlayClassName=\"some-custom-overlay-class\"\n        isOpen={state.isPaneOpen}\n        title=\"Hey, it is optional pane title.  I can be React component too.\"\n        subtitle=\"Optional subtitle.\"\n        onRequestClose={() => {\n          // triggered on \"<\" on left top click or on outside click\n          setState({ isPaneOpen: false });\n        }}\n      >\n        <div>And I am pane content. BTW, what rocks?</div>\n        <br />\n        <img src=\"img.png\" />\n      </SlidingPane>\n      <SlidingPane\n        closeIcon={<div>Some div containing custom close icon.</div>}\n        isOpen={state.isPaneOpenLeft}\n        title=\"Hey, it is optional pane title.  I can be React component too.\"\n        from=\"left\"\n        width=\"200px\"\n        onRequestClose={() => setState({ isPaneOpenLeft: false })}\n      >\n        <div>And I am pane content on left.</div>\n      </SlidingPane> */}\n    </div>\n  );\n};\n\nrender(<App />, document.getElementById(\"app\"));","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/components/common/AppInfo.jsx",["405","406","407","408","409"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {Dialog,Typography,Divider} from '@material-ui/core';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\nimport Theme from \"../../theme/theme-default\";\nimport \"../../../assets/appInfo.css\"\n\nexport default function ResponsiveDialog(props) {\n\tconst { open, handleClose} = props;\n    const Transition = React.forwardRef(function Transition(props, ref) {\n        return <Slide direction=\"right\" ref={ref} {...props} />;\n      });\n  const getMuiTheme = () => createMuiTheme({\n\t  \n    overrides: {\n        MuiButton: {\n\t\t\t\n            label: {\n              textTransform: \"capitalize\",\n              fontFamily: '\"Lato\"',\n              fontSize:\"14px\",\n              fontWeight: \"600\",\n              lineHeight: \"1.14\",\n              letterSpacing: \"0.14px\",\n              textAlign: \"center\",\n              height: \"26px\",\n\t\t\t  \n            },\n          \n        },\n\t\tMuiTypography:{\n\t\t\tcolorTextSecondary:{\n\t\t\t\tcolor:\"black\"\n\t\t\t},\n\t\t\th4 : {\n\t\t\t\tfontSize: \"1.5rem\",\n\t\t\t\t// letterSpacing: \"1.98px\",\n\t\t\t\tfontFamily: '\"Poppins\",\"lato\" ,sans-serif',\n\t\t\t\tfontWeight: \"500\",\n\t\t\t\tcolor:\"#292576\",\n\t\t\t\tmargin: \"0 0 .8rem\"\n\t\t\t  },\n\t\t\t  h5 : {\n\t\t\t\tfontSize: \"1.3125rem\",\n\t\t\t\tpadding:\"10px 0 15px 0\",\n\t\t\t\tfontFamily: '\"Poppins\",\"lato\" ,sans-serif',\n\t\t\t\tfontWeight: \"500\",\n\t\t\t\tcolor:\"black\"\n\t\t\t  },\n\t\t\t  h6 : {\n\t\t\t\tfontSize: \"1.125rem\",\n\t\t\t\tfontFamily: '\"Poppins\",\"lato\" ,sans-serif',\n\t\t\t\tfontWeight: \"500\",\n\t\t\t\tpaddingTop:\"4px\",\n\t\t\t\tcolor:\"black\",\n\t\t\t\tmargin: \"0 0 .8rem\"\n\t\t\t  },\n\t\t\t  body1 : {\n\t\t\t\tfontSize: \"1rem\",\n\t\t\t\tfontFamily: '\"lato\" ,sans-serif',\n\t\t\t\tfontWeight: \"400\",\n\t\t\t\tcolor:\"black\",\n\t\t\t\tpadding:\"10px 0 15px 0\"\n\t\t\t  \n\t\t\t  },\n\t\t\t  body2 :{\n\t\t\t\tfontSize: \"0.875rem\",\n\t\t\t\tfontFamily: '\"lato\" ,sans-serif',\n\t\t\t\tfontWeight: \"400\",\n\t\t\t\tcolor:\"black\",\n\t\t\t\tpadding:\"10px 0 15px 0\"\n\t\t\t  }\n\t\t},\n         \n        \n        MuiDialog:{\n            paper:{\n\t\t\t\tminWidth:\"955px\",\n\t\t\t\tborder: \"4px solid #292576\",\n\tboxShadow: \"0 0 2px rgba(0,0,0.5),0 0 8px rgba(0,0,0,.5)\"\n\t\t\t\t\n\t\t},\n\n          },\n   \n    }\n});\n\n\n  return (\n    \n    <MuiThemeProvider theme={getMuiTheme()}> \n\n      <Dialog\n        open={open}\n        // TransitionComponent={Transition}\n        // onClose ={() =>{handleClose()}}\n        \n      >\n\t\t  <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n           \n         \n         \n\t\t\n\t\t<div class=\"introdetails\">\n\t\t\t<div class = \"titlerow\"><Typography variant={\"h4\"}>ULCA - Universal Language Contribution APIs</Typography> <Button onClick ={() =>handleClose()} style={{margin:\"auto\", marginRight:\"0\"}} color= \"default\"><CloseIcon size={\"small\"}/></Button></div>\n\t\t\t<Typography variant={\"h6\"}>A MeitY initiative.</Typography>\n\t\t\t<Typography variant={\"body1\"}>ULCA is an open-sourced scalable data platform, supporting various types of dataset for Indic languages, along with a user interface for interacting with the datasets.</Typography>\n\t\t\t<div class=\"features\">\n\t\t\t\t<div class=\"featureColumn\">\n\t\t\t\t\t<div class=\"featureDetail naviBlueColor\">\n\t\t\t\t\t<Typography variant={\"h6\"}>Dataset</Typography>\n\t\t\t\t\t\t<p>Language datasets</p>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<Typography style={{color:\"white\", marginLeft:\"1.5rem\", paddingTop:\"-5px\"}}>\n\t\t\t\t\t\t\tParallel corpus <br/>\n\t\t\t\t\t\t\tMonolingual corpus <br/>\n\t\t\t\t\t\t\tASR / TTS corpus <br/>\n\t\t\t\t\t\t\tOCR corpus<br/>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"arrow-pointer naviBlueColor\">Open sourced</div>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class=\"featureColumn\">\n\t\t\t\t\t<div class=\"featureDetail skyBlueColor\">\n\t\t\t\t\t<Typography variant={\"h6\"}>Model</Typography>\n\t\t\t\t\t\t<p>Language specific tasks</p>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t<Typography style={{color:\"white\", marginLeft:\"1.5rem\", paddingTop:\"-5px\"}}>\n\t\t\t\t\t\tTranslation <br/>\n\t\t\t\t\t\tSpeech recognition <br/>\n\t\t\t\t\t\tText to speech <br/>\n\t\t\t\t\t\tOptical Character Recognition<br/>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"arrow-pointer skyBlueColor\">Transparent</div>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class=\"featureColumn\">\n\t\t\t\t\t<div class=\"featureDetail purpleColor\">\n\t\t\t\t\t<Typography variant={\"h6\"}>Benchmark</Typography>\n\t\t\t\t\t<p>Open benchmarking</p>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t<Typography style={{color:\"white\", marginLeft:\"1.5rem\", paddingTop:\"-5px\"}}>\n\t\t\t\t\t\tLarge, diverse task specific benchmarks <br/>\n\t\t\t\t\t\tResearch community approved metric system <br/>\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"arrow-pointer purpleColor\">Inclusive</div>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"why mt16\">\n\t\t\t<Typography variant={\"h6\"}>Why ULCA ?</Typography>\n\t\t\t\t<ul class=\"mb0\">\n\t\t\t\t\t<li>Consolidate & share all the knowledge wealth related to Indic languages with various NLP projects/initiatives.</li>\n\t\t\t\t\t<li>Single stop for working with multiple dataset types.</li>\n\t\t\t\t\t<li>Streamlined data format for each of the dataset types.</li>\n\t\t\t\t\t<li>Collect all possible metadata along with the datasets.</li>\n\t\t\t\t\t<li>Attribute proper credits to every contributor of every record in the dataset.</li>\n\t\t\t\t\t<li>Handle canonical checks and deduplication for each submitted dataset.</li>\n\t\t\t\t\t<li>Provides simple user interface to enable anyone to search & download based on various filters.</li>\n\t\t\t\t\t<li>Open sourced for building a best ecosystem for Indian languages.</li>\n\t\t\t\t\t<li>Quality check of the submitted datasets.</li>\n\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t</div>\n\t\n\t</DialogContentText>\n        </DialogContent>\n        \n      </Dialog>\n    </MuiThemeProvider>\n  );\n}","/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetView/FilterList.jsx",[],{"ruleId":"410","replacedBy":"411"},{"ruleId":"412","replacedBy":"413"},{"ruleId":"410","replacedBy":"414"},{"ruleId":"412","replacedBy":"415"},{"ruleId":"416","severity":1,"message":"417","line":241,"column":9,"nodeType":"418","messageId":"419","endLine":241,"endColumn":15},{"ruleId":"420","severity":1,"message":"421","line":43,"column":20,"nodeType":"422","messageId":"423","endLine":43,"endColumn":28},{"ruleId":"420","severity":1,"message":"424","line":29,"column":12,"nodeType":"422","messageId":"423","endLine":29,"endColumn":20},{"ruleId":"420","severity":1,"message":"425","line":39,"column":12,"nodeType":"422","messageId":"423","endLine":39,"endColumn":18},{"ruleId":"420","severity":1,"message":"426","line":39,"column":20,"nodeType":"422","messageId":"423","endLine":39,"endColumn":29},{"ruleId":"420","severity":1,"message":"427","line":46,"column":11,"nodeType":"422","messageId":"423","endLine":46,"endColumn":22},{"ruleId":"428","severity":1,"message":"429","line":36,"column":5,"nodeType":"430","endLine":36,"endColumn":7,"suggestions":"431"},{"ruleId":"420","severity":1,"message":"432","line":3,"column":8,"nodeType":"422","messageId":"423","endLine":3,"endColumn":19},{"ruleId":"428","severity":1,"message":"433","line":36,"column":12,"nodeType":"430","endLine":36,"endColumn":14,"suggestions":"434"},{"ruleId":"420","severity":1,"message":"435","line":75,"column":15,"nodeType":"422","messageId":"423","endLine":75,"endColumn":27},{"ruleId":"420","severity":1,"message":"436","line":85,"column":15,"nodeType":"422","messageId":"423","endLine":85,"endColumn":27},{"ruleId":"428","severity":1,"message":"437","line":24,"column":12,"nodeType":"430","endLine":24,"endColumn":14,"suggestions":"438"},{"ruleId":"420","severity":1,"message":"439","line":78,"column":15,"nodeType":"422","messageId":"423","endLine":78,"endColumn":26},{"ruleId":"420","severity":1,"message":"440","line":8,"column":28,"nodeType":"422","messageId":"423","endLine":8,"endColumn":42},{"ruleId":"428","severity":1,"message":"441","line":25,"column":12,"nodeType":"430","endLine":25,"endColumn":14,"suggestions":"442"},{"ruleId":"443","severity":1,"message":"444","line":24,"column":55,"nodeType":"445","messageId":"446","endLine":24,"endColumn":57},{"ruleId":"443","severity":1,"message":"444","line":34,"column":45,"nodeType":"445","messageId":"446","endLine":34,"endColumn":47},{"ruleId":"420","severity":1,"message":"447","line":5,"column":9,"nodeType":"422","messageId":"423","endLine":5,"endColumn":10},{"ruleId":"420","severity":1,"message":"448","line":6,"column":9,"nodeType":"422","messageId":"423","endLine":6,"endColumn":16},{"ruleId":"428","severity":1,"message":"449","line":95,"column":8,"nodeType":"430","endLine":95,"endColumn":10,"suggestions":"450"},{"ruleId":"428","severity":1,"message":"451","line":97,"column":5,"nodeType":"422","endLine":97,"endColumn":14,"suggestions":"452"},{"ruleId":"420","severity":1,"message":"453","line":289,"column":11,"nodeType":"422","messageId":"423","endLine":289,"endColumn":32},{"ruleId":"420","severity":1,"message":"447","line":5,"column":9,"nodeType":"422","messageId":"423","endLine":5,"endColumn":10},{"ruleId":"420","severity":1,"message":"448","line":6,"column":9,"nodeType":"422","messageId":"423","endLine":6,"endColumn":16},{"ruleId":"420","severity":1,"message":"454","line":3,"column":8,"nodeType":"422","messageId":"423","endLine":3,"endColumn":17},{"ruleId":"420","severity":1,"message":"448","line":4,"column":8,"nodeType":"422","messageId":"423","endLine":4,"endColumn":15},{"ruleId":"420","severity":1,"message":"447","line":5,"column":9,"nodeType":"422","messageId":"423","endLine":5,"endColumn":10},{"ruleId":"420","severity":1,"message":"448","line":6,"column":9,"nodeType":"422","messageId":"423","endLine":6,"endColumn":16},{"ruleId":"420","severity":1,"message":"455","line":18,"column":16,"nodeType":"422","messageId":"423","endLine":18,"endColumn":23},{"ruleId":"428","severity":1,"message":"456","line":27,"column":12,"nodeType":"430","endLine":27,"endColumn":14,"suggestions":"457"},{"ruleId":"458","severity":1,"message":"459","line":5,"column":1,"nodeType":"460","endLine":18,"endColumn":2},{"ruleId":"420","severity":1,"message":"461","line":1,"column":22,"nodeType":"422","messageId":"423","endLine":1,"endColumn":32},{"ruleId":"420","severity":1,"message":"462","line":1,"column":34,"nodeType":"422","messageId":"423","endLine":1,"endColumn":50},{"ruleId":"420","severity":1,"message":"440","line":1,"column":52,"nodeType":"422","messageId":"423","endLine":1,"endColumn":66},{"ruleId":"428","severity":1,"message":"441","line":21,"column":12,"nodeType":"430","endLine":21,"endColumn":14,"suggestions":"463"},{"ruleId":"420","severity":1,"message":"464","line":1,"column":17,"nodeType":"422","messageId":"423","endLine":1,"endColumn":25},{"ruleId":"420","severity":1,"message":"465","line":2,"column":19,"nodeType":"422","messageId":"423","endLine":2,"endColumn":30},{"ruleId":"420","severity":1,"message":"466","line":2,"column":32,"nodeType":"422","messageId":"423","endLine":2,"endColumn":42},{"ruleId":"420","severity":1,"message":"467","line":2,"column":44,"nodeType":"422","messageId":"423","endLine":2,"endColumn":56},{"ruleId":"420","severity":1,"message":"468","line":2,"column":72,"nodeType":"422","messageId":"423","endLine":2,"endColumn":77},{"ruleId":"420","severity":1,"message":"469","line":4,"column":30,"nodeType":"422","messageId":"423","endLine":4,"endColumn":34},{"ruleId":"420","severity":1,"message":"470","line":4,"column":36,"nodeType":"422","messageId":"423","endLine":4,"endColumn":44},{"ruleId":"420","severity":1,"message":"462","line":4,"column":46,"nodeType":"422","messageId":"423","endLine":4,"endColumn":62},{"ruleId":"420","severity":1,"message":"471","line":5,"column":8,"nodeType":"422","messageId":"423","endLine":5,"endColumn":21},{"ruleId":"420","severity":1,"message":"472","line":6,"column":10,"nodeType":"422","messageId":"423","endLine":6,"endColumn":22},{"ruleId":"420","severity":1,"message":"473","line":7,"column":8,"nodeType":"422","messageId":"423","endLine":7,"endColumn":12},{"ruleId":"420","severity":1,"message":"474","line":8,"column":8,"nodeType":"422","messageId":"423","endLine":8,"endColumn":19},{"ruleId":"420","severity":1,"message":"475","line":21,"column":7,"nodeType":"422","messageId":"423","endLine":21,"endColumn":16},{"ruleId":"420","severity":1,"message":"476","line":40,"column":12,"nodeType":"422","messageId":"423","endLine":40,"endColumn":16},{"ruleId":"420","severity":1,"message":"477","line":41,"column":23,"nodeType":"422","messageId":"423","endLine":41,"endColumn":35},{"ruleId":"420","severity":1,"message":"478","line":42,"column":22,"nodeType":"422","messageId":"423","endLine":42,"endColumn":33},{"ruleId":"420","severity":1,"message":"479","line":52,"column":11,"nodeType":"422","messageId":"423","endLine":52,"endColumn":26},{"ruleId":"420","severity":1,"message":"480","line":1,"column":17,"nodeType":"422","messageId":"423","endLine":1,"endColumn":26},{"ruleId":"420","severity":1,"message":"481","line":3,"column":8,"nodeType":"422","messageId":"423","endLine":3,"endColumn":19},{"ruleId":"420","severity":1,"message":"482","line":7,"column":10,"nodeType":"422","messageId":"423","endLine":7,"endColumn":15},{"ruleId":"420","severity":1,"message":"483","line":7,"column":17,"nodeType":"422","messageId":"423","endLine":7,"endColumn":25},{"ruleId":"420","severity":1,"message":"484","line":3,"column":27,"nodeType":"422","messageId":"423","endLine":3,"endColumn":34},{"ruleId":"420","severity":1,"message":"485","line":4,"column":8,"nodeType":"422","messageId":"423","endLine":4,"endColumn":21},{"ruleId":"420","severity":1,"message":"486","line":7,"column":8,"nodeType":"422","messageId":"423","endLine":7,"endColumn":19},{"ruleId":"420","severity":1,"message":"487","line":12,"column":8,"nodeType":"422","messageId":"423","endLine":12,"endColumn":13},{"ruleId":"420","severity":1,"message":"488","line":17,"column":11,"nodeType":"422","messageId":"423","endLine":17,"endColumn":21},"no-native-reassign",["489"],"no-negated-in-lhs",["490"],["489"],["490"],"no-dupe-keys","Duplicate key 'margin'.","ObjectExpression","unexpected","no-unused-vars","'lastName' is assigned a value but never used.","Identifier","unusedVar","'anchorEl' is assigned a value but never used.","'search' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'handleClose' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchChartData', 'history', and 'selectedOption.value'. Either include them or remove the dependency array.","ArrayExpression",["491"],"'ThumbUpIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'MyContributionListApi', 'added', 'myContributionReport.filteredData.length', and 'myContributionReport.refreshStatus'. Either include them or remove the dependency array.",["492"],"'renderStatus' is assigned a value but never used.","'renderAction' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'DetailedDataSetStatusApi'. Either include it or remove the dependency array.",["493"],"'handleAbort' is assigned a value but never used.","'createMuiTheme' is defined but never used.","React Hook useEffect has a missing dependency: 'MySearchListApi'. Either include it or remove the dependency array.",["494"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'C' is defined but never used.","'CONFIGS' is defined but never used.","React Hook useEffect has missing dependencies: 'count', 'detailedReport.responseData', 'filterBy', 'history', 'params', and 'srno'. Either include them or remove the dependency array. You can also do a functional update 'setFilterBy(f => ...)' if you only need 'filterBy' in the 'setFilterBy' call.",["495"],"React Hook useEffect contains a call to 'setLanguagePair'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [params] as a second argument to the useEffect Hook.",["496"],"'renderFilterByOptions' is assigned a value but never used.","'ENDPOINTS' is defined but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'UserActivate'. Either include it or remove the dependency array.",["497"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Typography' is defined but never used.","'MuiThemeProvider' is defined but never used.",["498"],"'useState' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'NativeSelect' is defined but never used.","'Paper' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'DatasetStyles' is defined but never used.","'DatasetItems' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'useStyles' is assigned a value but never used.","'open' is assigned a value but never used.","'setFullWidth' is assigned a value but never used.","'setMaxWidth' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'Component' is defined but never used.","'SlidingPane' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'Divider' is defined but never used.","'DialogActions' is defined but never used.","'DialogTitle' is defined but never used.","'Theme' is defined but never used.","'Transition' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"499","fix":"500"},{"desc":"501","fix":"502"},{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"desc":"505","fix":"513"},"Update the dependencies array to be: [fetchChartData, history, selectedOption.value]",{"range":"514","text":"515"},"Update the dependencies array to be: [MyContributionListApi, added, myContributionReport.filteredData.length, myContributionReport.refreshStatus]",{"range":"516","text":"517"},"Update the dependencies array to be: [DetailedDataSetStatusApi]",{"range":"518","text":"519"},"Update the dependencies array to be: [MySearchListApi]",{"range":"520","text":"521"},"Update the dependencies array to be: [count, detailedReport.responseData, filterBy, history, params, srno]",{"range":"522","text":"523"},"Add dependencies array: [params]",{"range":"524","text":"525"},"Update the dependencies array to be: [UserActivate]",{"range":"526","text":"527"},{"range":"528","text":"521"},[1963,1965],"[fetchChartData, history, selectedOption.value]",[2066,2068],"[MyContributionListApi, added, myContributionReport.filteredData.length, myContributionReport.refreshStatus]",[1121,1123],"[DetailedDataSetStatusApi]",[1268,1270],"[MySearchListApi]",[3675,3677],"[count, detailedReport.responseData, filterBy, history, params, srno]",[4030,4030],", [params]",[977,979],"[UserActivate]",[1009,1011]]