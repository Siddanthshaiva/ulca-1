{"ast":null,"code":"var _jsxFileName = \"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/SearchDownloadRecords.jsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, Typography, Button, TextField, MenuItem, Checkbox, FormControlLabel, Divider } from '@material-ui/core';\nimport SearchResult from \"./SearchResult\";\nimport { withStyles } from '@material-ui/core/styles';\nimport DatasetStyle from '../../../styles/Dataset';\nimport Snackbar from '../../../components/common/Snackbar';\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport SearchAndDownload from '../../../../redux/actions/api/DataSet/DatasetSearch/SearchAndDownload';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport { useState, useEffect } from 'react';\nimport DownloadDatasetRecords from \"./DownloadDatasetRecords\";\nimport RequestNumberCreation from \"./RequestNumberCreation\";\nimport { useHistory, useParams } from 'react-router';\nimport Autocomplete from '../../../components/common/Autocomplete';\nimport { Language, FilterBy } from '../../../../configs/DatasetItems';\nimport SubmitSearchRequest from '../../../../redux/actions/api/DataSet/DatasetSearch/SubmitSearchRequest';\nimport DatasetType from '../../../../configs/DatasetItems';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchAndDownloadRecords = props => {\n  _s();\n\n  const {\n    classes\n  } = props;\n  const url = UrlConfig.dataset;\n  const urlMySearch = UrlConfig.mySearches;\n  const param = useParams();\n  const history = useHistory();\n  const [languagePair, setLanguagePair] = useState({\n    source: '',\n    target: []\n  });\n  const [filterBy, setFilterBy] = useState({\n    domain: [],\n    source: [],\n    collectionMethod: []\n  });\n  const [datasetType, setDatasetType] = useState({\n    'parallel-corpus': true\n  }); // const searchOptions = useSelector((state) => state.mySearchOptions);\n  // const dispatch = useDispatch();\n  // useEffect(() => {\n  //     const userObj = new SearchAndDownload();\n  //     searchOptions.result.length === 0 && dispatch(APITransport(userObj));\n  // }, []);\n\n  const handleCheckboxChange = event => {\n    setState({ ...state,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const handleLanguagePairChange = (value, property) => {\n    setLanguagePair({ ...languagePair,\n      [property]: value\n    });\n    if (property === 'source') setSrcError(false);else setTgtError(false);\n  };\n\n  const handleFilterByChange = (value, property) => {\n    setFilterBy({ ...filterBy,\n      [property]: value\n    });\n  };\n\n  const [snackbar, setSnackbarInfo] = useState({\n    open: false,\n    message: '',\n    variant: 'success'\n  });\n  const [state, setState] = useState({\n    checkedA: false,\n    checkedB: false\n  });\n  const [srcError, setSrcError] = useState(false);\n  const [tgtError, setTgtError] = useState(false);\n  const {\n    params,\n    srno\n  } = param;\n\n  const renderPage = () => {\n    switch (params) {\n      case 'inprogress':\n        return /*#__PURE__*/_jsxDEV(RequestNumberCreation, {\n          reqno: srno\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 24\n        }, this);\n\n      case 'published':\n        return /*#__PURE__*/_jsxDEV(DownloadDatasetRecords, {\n          datasetType: \"Parallel\",\n          sentencePair: \"9.8 Million\",\n          datasetsContributed: \"29\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(SearchResult, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 24\n        }, this);\n    }\n  };\n\n  const handleDatasetClick = property => {\n    history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`);\n    clearfilter();\n    setDatasetType({\n      [property]: true\n    });\n    setSrcError(false);\n    setTgtError(false);\n  };\n\n  const getLabel = () => {\n    if (datasetType['parallel-corpus']) return \"Target Language *\";else if (datasetType['ocr-corpus']) return \"Select Script *\";else return \"Select Language *\";\n  };\n\n  const getTitle = () => {\n    if (datasetType['parallel-corpus']) return \"Select Language Pair\";else if (datasetType['ocr-corpus']) return \"Select Script\";else return \"Select Language\";\n  };\n\n  const clearfilter = () => {\n    setFilterBy({\n      domain: [],\n      source: [],\n      collectionMethod: []\n    });\n    setLanguagePair({\n      source: \"\",\n      target: []\n    });\n  };\n\n  const makeSubmitAPICall = (src, tgt, domain, collectionMethod, type) => {\n    setSnackbarInfo({ ...snackbar,\n      open: true,\n      message: 'Please wait while we process your request...',\n      variant: 'info'\n    });\n    const apiObj = new SubmitSearchRequest(type, tgt, src, domain, collectionMethod);\n    fetch(apiObj.apiEndPoint(), {\n      method: 'post',\n      headers: apiObj.getHeaders().headers,\n      body: JSON.stringify(apiObj.getBody())\n    }).then(async res => {\n      if (res.ok) {\n        let response = await res.json();\n        history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/inprogress/${response.serviceRequestNumber}`);\n        handleSnackbarClose();\n      } else {\n        new Promise.reject(\"\");\n      }\n    }).catch(err => {\n      setSnackbarInfo({ ...snackbar,\n        open: true,\n        message: 'Failed to submit your search request...',\n        variant: 'error'\n      });\n    });\n  };\n\n  const handleSnackbarClose = () => {\n    setSnackbarInfo({ ...snackbar,\n      open: false\n    });\n  };\n\n  const handleSubmitBtn = () => {\n    let tgt = languagePair.target.map(trgt => trgt.value);\n    let domain = filterBy.domain.map(domain => domain.value);\n    let collectionMethod = filterBy.collectionMethod.map(method => method.value);\n\n    if (datasetType['parallel-corpus']) {\n      if (languagePair.source && languagePair.target.length) {\n        makeSubmitAPICall(languagePair.source, tgt, domain, collectionMethod);\n      } else if (!languagePair.source && !languagePair.target.length) {\n        setSrcError(true);\n        setTgtError(true);\n      } else if (!languagePair.source) setSrcError(true);else if (!languagePair.target.length) setTgtError(true);\n    } else {\n      if (!languagePair.target.length) setTgtError(true);else {\n        makeSubmitAPICall(null, tgt, domain, collectionMethod);\n      }\n    }\n  };\n\n  const renderDatasetButtons = () => {\n    return DatasetType.map((type, i) => {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.innerButton,\n        variant: datasetType[type.value] ? \"contained\" : \"outlined\",\n        color: \"primary\",\n        onClick: () => handleDatasetClick(type.value),\n        children: type.label\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this);\n    });\n  };\n\n  const getTargetLang = () => {\n    return Language.filter(lang => lang.value !== languagePair.source);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.searchDivStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.breadcrum,\n      children: /*#__PURE__*/_jsxDEV(BreadCrum, {\n        links: params === 'inprogress' || params === 'published' ? [url, urlMySearch] : [url],\n        activeLink: \"Search & Download Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        className: (params === 'inprogress' || params === 'published') && classes.blurOut,\n        item: true,\n        xs: 12,\n        sm: 5,\n        md: 4,\n        lg: 4,\n        xl: 4,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.subHeader,\n          variant: \"h6\",\n          children: \"Select Dataset Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.buttonDiv,\n          children: renderDatasetButtons()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.subHeader,\n          variant: \"h6\",\n          children: getTitle()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.subHeader,\n          children: [datasetType['parallel-corpus'] && /*#__PURE__*/_jsxDEV(TextField, {\n            className: classes.subHeader,\n            fullWidth: true,\n            error: srcError,\n            helperText: srcError && \"Source language is mandatory\",\n            select: true,\n            id: \"select-source-language\",\n            label: \"Source Language *\",\n            value: languagePair.source,\n            onChange: event => handleLanguagePairChange(event.target.value, 'source'),\n            children: Language.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: option.value,\n              children: option.label\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            id: \"language-target\",\n            options: getTargetLang(),\n            filter: \"target\",\n            value: languagePair.target,\n            handleOnChange: handleLanguagePairChange,\n            label: getLabel(),\n            error: tgtError,\n            helperText: \"This field is mandatory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.subHeader,\n          variant: \"h6\",\n          children: \"Filter by\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.subHeader,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 1,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              className: classes.subHeader,\n              item: true,\n              xs: 12,\n              sm: 12,\n              md: 12,\n              lg: 12,\n              xl: 12,\n              children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                id: \"domain\",\n                options: FilterBy.domain,\n                filter: \"domain\",\n                value: filterBy.domain,\n                handleOnChange: handleFilterByChange,\n                label: \"Select Domain\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            id: \"collection-method\",\n            options: FilterBy.collectionMethod,\n            filter: \"collectionMethod\",\n            value: filterBy.collectionMethod,\n            handleOnChange: handleFilterByChange,\n            label: \"Select Collection Method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: state.checkedA,\n            onChange: handleCheckboxChange,\n            name: \"checkedA\",\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 29\n          }, this),\n          label: \"Vetted by multiple annotators\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: state.checkedB,\n            onChange: handleCheckboxChange,\n            name: \"checkedB\",\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 29\n          }, this),\n          label: \"Source sentences manually translated by multiple translators\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.clearNSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            onClick: clearfilter,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleSubmitBtn,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 1,\n        sm: 1,\n        md: 1,\n        lg: 1,\n        xl: 1,\n        children: /*#__PURE__*/_jsxDEV(Divider, {\n          className: classes.divider,\n          orientation: \"vertical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 7,\n        lg: 7,\n        xl: 7,\n        children: renderPage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), snackbar.open && /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      handleClose: handleSnackbarClose,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      message: snackbar.message,\n      variant: snackbar.variant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchAndDownloadRecords, \"QJXv5octP0PPNncBbJiVB5ABl04=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = SearchAndDownloadRecords;\nexport default withStyles(DatasetStyle)(SearchAndDownloadRecords);\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchAndDownloadRecords\");","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/SearchDownloadRecords.jsx"],"names":["Grid","Typography","Button","TextField","MenuItem","Checkbox","FormControlLabel","Divider","SearchResult","withStyles","DatasetStyle","Snackbar","BreadCrum","UrlConfig","SearchAndDownload","useDispatch","useSelector","APITransport","useState","useEffect","DownloadDatasetRecords","RequestNumberCreation","useHistory","useParams","Autocomplete","Language","FilterBy","SubmitSearchRequest","DatasetType","SearchAndDownloadRecords","props","classes","url","dataset","urlMySearch","mySearches","param","history","languagePair","setLanguagePair","source","target","filterBy","setFilterBy","domain","collectionMethod","datasetType","setDatasetType","handleCheckboxChange","event","setState","state","name","checked","handleLanguagePairChange","value","property","setSrcError","setTgtError","handleFilterByChange","snackbar","setSnackbarInfo","open","message","variant","checkedA","checkedB","srcError","tgtError","params","srno","renderPage","handleDatasetClick","push","process","env","PUBLIC_URL","clearfilter","getLabel","getTitle","makeSubmitAPICall","src","tgt","type","apiObj","fetch","apiEndPoint","method","headers","getHeaders","body","JSON","stringify","getBody","then","res","ok","response","json","serviceRequestNumber","handleSnackbarClose","Promise","reject","catch","err","handleSubmitBtn","map","trgt","length","renderDatasetButtons","i","innerButton","label","getTargetLang","filter","lang","searchDivStyle","breadcrum","blurOut","subHeader","buttonDiv","option","clearNSubmit","divider","vertical","horizontal"],"mappings":"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","sourcesContent":["import {\n    Grid,\n    Typography,\n    Button,\n    TextField,\n    MenuItem,\n    Checkbox,\n    FormControlLabel,\n    Divider\n} from '@material-ui/core';\nimport SearchResult from \"./SearchResult\";\nimport { withStyles } from '@material-ui/core/styles';\nimport DatasetStyle from '../../../styles/Dataset';\nimport Snackbar from '../../../components/common/Snackbar';\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport SearchAndDownload from '../../../../redux/actions/api/DataSet/DatasetSearch/SearchAndDownload';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport { useState, useEffect } from 'react';\nimport DownloadDatasetRecords from \"./DownloadDatasetRecords\";\nimport RequestNumberCreation from \"./RequestNumberCreation\";\nimport { useHistory, useParams } from 'react-router';\nimport Autocomplete from '../../../components/common/Autocomplete';\nimport { Language, FilterBy } from '../../../../configs/DatasetItems';\nimport SubmitSearchRequest from '../../../../redux/actions/api/DataSet/DatasetSearch/SubmitSearchRequest';\nimport DatasetType from '../../../../configs/DatasetItems';\n\nconst SearchAndDownloadRecords = (props) => {\n    const { classes } = props;\n    const url = UrlConfig.dataset;\n    const urlMySearch= UrlConfig.mySearches;\n    const param = useParams();\n    const history = useHistory();\n    const [languagePair, setLanguagePair] = useState({\n        source: '',\n        target: []\n    });\n    const [filterBy, setFilterBy] = useState({\n        domain: [],\n        source: [],\n        collectionMethod: []\n    });\n\n    const [datasetType, setDatasetType] = useState({\n        'parallel-corpus': true\n    })\n\n    // const searchOptions = useSelector((state) => state.mySearchOptions);\n    // const dispatch = useDispatch();\n    // useEffect(() => {\n    //     const userObj = new SearchAndDownload();\n    //     searchOptions.result.length === 0 && dispatch(APITransport(userObj));\n    // }, []);\n\n    const handleCheckboxChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n    };\n    const handleLanguagePairChange = (value, property) => {\n        setLanguagePair({ ...languagePair, [property]: value });\n\n        if (property === 'source')\n            setSrcError(false)\n        else\n            setTgtError(false)\n    };\n    const handleFilterByChange = (value, property) => {\n        setFilterBy({ ...filterBy, [property]: value });\n    };\n    const [snackbar, setSnackbarInfo] = useState({\n        open: false,\n        message: '',\n        variant: 'success'\n    })\n    const [state, setState] = useState({\n        checkedA: false,\n        checkedB: false,\n    });\n    const [srcError, setSrcError] = useState(false)\n    const [tgtError, setTgtError] = useState(false)\n    const { params, srno } = param\n    const renderPage = () => {\n        switch (params) {\n            case 'inprogress':\n                return <RequestNumberCreation reqno={srno} />\n            case 'published':\n                return <DownloadDatasetRecords datasetType={\"Parallel\"} sentencePair={\"9.8 Million\"} datasetsContributed={\"29\"} />\n            default:\n                return <SearchResult />\n        }\n    }\n\n    const handleDatasetClick = (property) => {\n        history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`)\n        clearfilter()\n        setDatasetType({ [property]: true })\n        setSrcError(false)\n        setTgtError(false)\n    }\n    const getLabel = () => {\n        if (datasetType['parallel-corpus'])\n            return \"Target Language *\"\n        else if (datasetType['ocr-corpus'])\n            return \"Select Script *\"\n        else\n            return \"Select Language *\"\n    }\n\n    const getTitle = () => {\n        if (datasetType['parallel-corpus'])\n            return \"Select Language Pair\"\n        else if (datasetType['ocr-corpus'])\n            return \"Select Script\"\n        else\n            return \"Select Language\"\n    }\n    const clearfilter = () => {\n        setFilterBy({\n            domain: [],\n            source: [],\n            collectionMethod: []\n        });\n        setLanguagePair({\n            source: \"\",\n            target: []\n        });\n    }\n\n    const makeSubmitAPICall = (src, tgt, domain, collectionMethod, type) => {\n        setSnackbarInfo({\n            ...snackbar,\n            open: true,\n            message: 'Please wait while we process your request...',\n            variant: 'info'\n        })\n        const apiObj = new SubmitSearchRequest(type, tgt, src, domain, collectionMethod)\n        fetch(apiObj.apiEndPoint(), {\n            method: 'post',\n            headers: apiObj.getHeaders().headers,\n            body: JSON.stringify(apiObj.getBody())\n        })\n            .then(async res => {\n                if (res.ok) {\n                    let response = await res.json()\n                    history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/inprogress/${response.serviceRequestNumber}`)\n                    handleSnackbarClose()\n\n                } else {\n                    new Promise.reject(\"\")\n                }\n            })\n            .catch(err => {\n                setSnackbarInfo({\n                    ...snackbar,\n                    open: true,\n                    message: 'Failed to submit your search request...',\n                    variant: 'error'\n                })\n            })\n\n    }\n    const handleSnackbarClose = () => {\n        setSnackbarInfo({ ...snackbar, open: false })\n    }\n    const handleSubmitBtn = () => {\n        let tgt = languagePair.target.map(trgt => trgt.value)\n        let domain = filterBy.domain.map(domain => domain.value)\n        let collectionMethod = filterBy.collectionMethod.map(method => method.value)\n        if (datasetType['parallel-corpus']) {\n            if (languagePair.source && languagePair.target.length) {\n                makeSubmitAPICall(languagePair.source, tgt, domain, collectionMethod)\n            }\n\n            else if (!languagePair.source && !languagePair.target.length) {\n                setSrcError(true)\n                setTgtError(true)\n            }\n\n            else if (!languagePair.source)\n                setSrcError(true)\n            else if (!languagePair.target.length)\n                setTgtError(true)\n        }\n        else {\n            if (!languagePair.target.length)\n                setTgtError(true)\n            else {\n                makeSubmitAPICall(null, tgt, domain, collectionMethod)\n            }\n\n        }\n\n\n    }\n\n    const renderDatasetButtons = () => {\n        return (\n            DatasetType.map((type, i) => {\n                return (\n                    <Button className={classes.innerButton} variant={datasetType[type.value] ? \"contained\" : \"outlined\"}\n                        color=\"primary\"\n                        key={i}\n                        onClick={() => handleDatasetClick(type.value)}\n                    >\n                        {type.label}\n                    </Button>)\n            })\n\n        )\n    }\n    const getTargetLang = () => {\n        return Language.filter(lang => lang.value !== languagePair.source)\n    }\n\n    return (\n        <div className={classes.searchDivStyle}>\n            <div className={classes.breadcrum}>\n                \n                <BreadCrum links={(params === 'inprogress' || params === 'published') ? [url,urlMySearch]:[url]} activeLink=\"Search & Download Records\" />\n            </div>\n            <Grid container spacing={3}>\n                <Grid className={(params === 'inprogress' || params === 'published') && classes.blurOut} item xs={12} sm={5} md={4} lg={4} xl={4}>\n\n                    <Typography className={classes.subHeader} variant=\"h6\">Select Dataset Type</Typography>\n\n                    <div className={classes.buttonDiv} >\n                        {renderDatasetButtons()}\n                        {/* <Button className={classes.innerButton} variant={datasetType.pd ? \"contained\" : \"outlined\"}\n                            color=\"primary\"\n                            onClick={() => handleDatasetClick('pd')}\n                        >\n                            Parallel Dataset\n                    </Button>\n                        <Button className={classes.innerButton} variant={datasetType.md ? \"contained\" : \"outlined\"}\n                            color=\"primary\"\n                            onClick={() => handleDatasetClick('md')}\n                        >\n                            Monolingual Dataset\n                    </Button>\n                        <Button className={classes.innerButton} variant={datasetType.atd ? \"contained\" : \"outlined\"}\n                            color=\"primary\"\n                            onClick={() => handleDatasetClick('atd')}\n                        >\n                            ASR/TTS Dataset\n                    </Button>\n                        <Button className={classes.innerButton} variant={datasetType.od ? \"contained\" : \"outlined\"}\n                            color=\"primary\"\n                            onClick={() => handleDatasetClick('od')}\n                        >\n                            OCR Dataset\n                    </Button> */}\n                    </div>\n\n                    <Typography className={classes.subHeader} variant=\"h6\">{getTitle()}</Typography>\n                    <div className={classes.subHeader}>\n                        {datasetType['parallel-corpus'] &&\n                            <TextField className={classes.subHeader}\n                                fullWidth\n                                error={srcError}\n                                helperText={srcError && \"Source language is mandatory\"}\n                                select\n                                id=\"select-source-language\"\n                                label=\"Source Language *\"\n                                value={languagePair.source}\n                                onChange={(event) => handleLanguagePairChange(event.target.value, 'source')}\n                            >\n                                {Language.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>}\n\n                        <Autocomplete\n                            id=\"language-target\"\n                            options={getTargetLang()}\n                            filter='target'\n                            value={languagePair.target}\n                            handleOnChange={handleLanguagePairChange}\n                            label={getLabel()}\n                            error={tgtError}\n                            helperText=\"This field is mandatory\"\n                        />\n                    </div>\n                    <Typography className={classes.subHeader} variant=\"h6\">Filter by</Typography>\n                    <div className={classes.subHeader}>\n                        <Grid container spacing={1}>\n                            <Grid className={classes.subHeader} item xs={12} sm={12} md={12} lg={12} xl={12}>\n                                <Autocomplete\n                                    id=\"domain\"\n                                    options={FilterBy.domain}\n                                    filter=\"domain\"\n                                    value={filterBy.domain}\n                                    handleOnChange={handleFilterByChange}\n                                    label=\"Select Domain\"\n                                />\n                            </Grid>\n                            {/* <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\n                                <Autocomplete\n                                    id=\"source\"\n                                    options={sourceLanguages}\n                                    filter=\"source\"\n                                    value={filterBy.source}\n                                    handleOnChange={handleFilterByChange}\n                                    label=\"Select Source\"\n                                />\n                            </Grid> */}\n                        </Grid>\n                        <Autocomplete\n                            id=\"collection-method\"\n                            options={FilterBy.collectionMethod}\n                            filter=\"collectionMethod\"\n                            value={filterBy.collectionMethod}\n                            handleOnChange={handleFilterByChange}\n                            label=\"Select Collection Method\"\n                        />\n                    </div>\n\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={state.checkedA}\n                                onChange={handleCheckboxChange}\n                                name=\"checkedA\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Vetted by multiple annotators\"\n                    />\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={state.checkedB}\n                                onChange={handleCheckboxChange}\n                                name=\"checkedB\"\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Source sentences manually translated by multiple translators\"\n                    />\n                    <div className={classes.clearNSubmit}>\n                        <Button color=\"primary\" onClick={clearfilter}>\n                            Clear\n                    </Button>\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitBtn}>\n                            Submit\n                    </Button>\n                    </div>\n                </Grid>\n                <Grid item xs={1} sm={1} md={1} lg={1} xl={1}>\n                    <Divider className={classes.divider} orientation=\"vertical\" />\n                </Grid>\n                <Grid item xs={12} sm={6} md={7} lg={7} xl={7}>\n                    {renderPage()}\n                </Grid>\n\n            </Grid>\n            {snackbar.open &&\n                <Snackbar\n                    open={snackbar.open}\n                    handleClose={handleSnackbarClose}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n                    message={snackbar.message}\n                    variant={snackbar.variant}\n                />}\n        </div>\n    )\n\n\n}\n\nexport default withStyles(DatasetStyle)(SearchAndDownloadRecords);"]},"metadata":{},"sourceType":"module"}