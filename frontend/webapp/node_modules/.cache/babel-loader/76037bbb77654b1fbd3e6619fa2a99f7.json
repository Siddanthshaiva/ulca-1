{"ast":null,"code":"var _jsxFileName = \"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/SearchDownloadRecords.jsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, Typography, Button, TextField, MenuItem, Checkbox, FormControlLabel, Divider } from '@material-ui/core';\nimport SearchResult from \"./SearchResult\";\nimport { withStyles } from '@material-ui/core/styles';\nimport DatasetStyle from '../../../styles/Dataset';\nimport Snackbar from '../../../components/common/Snackbar';\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport SearchAndDownload from '../../../../redux/actions/api/DataSet/DatasetSearch/SearchAndDownload';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport { useState, useEffect, useRef } from 'react';\nimport DownloadDatasetRecords from \"./DownloadDatasetRecords\";\nimport RequestNumberCreation from \"./RequestNumberCreation\";\nimport { useHistory, useParams } from 'react-router';\nimport Autocomplete from '../../../components/common/Autocomplete';\nimport { Language, FilterBy } from '../../../../configs/DatasetItems';\nimport SubmitSearchRequest from '../../../../redux/actions/api/DataSet/DatasetSearch/SubmitSearchRequest';\nimport DatasetType from '../../../../configs/DatasetItems';\nimport getLanguageLabel from '../../../../utils/getLabel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchAndDownloadRecords = props => {\n  _s();\n\n  const {\n    classes\n  } = props;\n  const url = UrlConfig.dataset;\n  const urlMySearch = UrlConfig.mySearches;\n  const param = useParams();\n  const history = useHistory();\n  const [languagePair, setLanguagePair] = useState({\n    source: '',\n    target: []\n  }); // const [filterBy, setFilterBy] = useState({\n  //     domain: [],\n  //     source: [],\n  //     collectionMethod: []\n  // });\n\n  const [filterBy, setFilterBy] = useState({\n    domain: '',\n    source: '',\n    collectionMethod: ''\n  });\n  const [datasetType, setDatasetType] = useState({\n    'parallel-corpus': true\n  });\n  const [count, setCount] = useState(0);\n  const [urls, setUrls] = useState({\n    downloadSample: '',\n    downloadAll: ''\n  });\n  const previousUrl = useRef();\n  const detailedReport = useSelector(state => state.mySearchReport);\n  useEffect(() => {\n    previousUrl.current = params;\n    let data = detailedReport.responseData.filter(val => {\n      return val.sr_no === srno;\n    });\n\n    if (data[0]) {\n      setCount(data[0].count);\n      setUrls({\n        downloadSample: data[0].sampleUrl,\n        downloadAll: data[0].downloadUrl\n      });\n      let target = data[0].targetLanguage ? getLanguageLabel(data[0].targetLanguage) : getLanguageLabel(data[0].sourceLanguage);\n      setLanguagePair({\n        target,\n        source: data[0].sourceLanguage\n      });\n      setDatasetType({\n        [data[0].datasetType]: true\n      });\n    } else if ((params === 'completed' || params === 'inprogress') && count === 0) history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`);\n  }, []);\n  useEffect(() => {\n    if (previousUrl.current !== params && previousUrl.current !== 'initiate') {\n      setLanguagePair({\n        target: [],\n        source: \"\"\n      });\n      setFilterBy({\n        domain: [],\n        source: [],\n        collectionMethod: []\n      });\n    }\n\n    previousUrl.current = params;\n  });\n\n  const handleCheckboxChange = event => {\n    setState({ ...state,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const handleLanguagePairChange = (value, property) => {\n    setLanguagePair({ ...languagePair,\n      [property]: value\n    });\n    if (property === 'source') setSrcError(false);else setTgtError(false);\n  };\n\n  const handleFilterByChange = (value, property) => {\n    setFilterBy({ ...filterBy,\n      [property]: value\n    });\n  };\n\n  const [snackbar, setSnackbarInfo] = useState({\n    open: false,\n    message: '',\n    variant: 'success'\n  });\n  const [state, setState] = useState({\n    checkedA: false,\n    checkedB: false\n  });\n  const [srcError, setSrcError] = useState(false);\n  const [tgtError, setTgtError] = useState(false);\n  const {\n    params,\n    srno\n  } = param;\n\n  const renderPage = () => {\n    let data = detailedReport.responseData.filter(val => {\n      return val.sr_no === srno;\n    });\n    let datasetType = data.length && getLanguageLabel(data[0].datasetType, 'datasetType')[0];\n\n    switch (params) {\n      case 'inprogress':\n        return /*#__PURE__*/_jsxDEV(RequestNumberCreation, {\n          reqno: srno\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 24\n        }, this);\n\n      case 'completed':\n        return /*#__PURE__*/_jsxDEV(DownloadDatasetRecords, {\n          datasetType: datasetType ? datasetType : 'Parallel',\n          sentencePair: count,\n          urls: urls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(SearchResult, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 24\n        }, this);\n    }\n  };\n\n  const handleDatasetClick = property => {\n    history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`);\n    clearfilter();\n    setDatasetType({\n      [property]: true\n    });\n    setSrcError(false);\n    setTgtError(false);\n  };\n\n  const getLabel = () => {\n    if (datasetType['parallel-corpus']) return \"Target Language *\";else if (datasetType['ocr-corpus']) return \"Script *\";else return \"Language *\";\n  };\n\n  const getTitle = () => {\n    if (datasetType['parallel-corpus']) return \"Select Language Pair\";else if (datasetType['ocr-corpus']) return \"Select Script\";else return \"Select Language\";\n  };\n\n  const clearfilter = () => {\n    setFilterBy({\n      domain: [],\n      source: [],\n      collectionMethod: []\n    });\n    setLanguagePair({\n      source: \"\",\n      target: []\n    });\n  };\n\n  const makeSubmitAPICall = (src, tgt, domain, collectionMethod, type) => {\n    debugger;\n    const Dataset = Object.keys(type)[0];\n    console.log(Dataset);\n    setSnackbarInfo({ ...snackbar,\n      open: true,\n      message: 'Please wait while we process your request...',\n      variant: 'info'\n    });\n    const apiObj = new SubmitSearchRequest(Dataset, tgt, src, domain, collectionMethod);\n    fetch(apiObj.apiEndPoint(), {\n      method: 'post',\n      headers: apiObj.getHeaders().headers,\n      body: JSON.stringify(apiObj.getBody())\n    }).then(async res => {\n      if (res.ok) {\n        let response = await res.json();\n        history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/inprogress/${response.serviceRequestNumber}`);\n        handleSnackbarClose();\n      } else {\n        new Promise.reject(\"\");\n      }\n    }).catch(err => {\n      setSnackbarInfo({ ...snackbar,\n        open: true,\n        message: 'Failed to submit your search request...',\n        variant: 'error'\n      });\n    });\n  };\n\n  const handleSnackbarClose = () => {\n    setSnackbarInfo({ ...snackbar,\n      open: false\n    });\n  };\n\n  const handleSubmitBtn = () => {\n    let tgt = languagePair.target.map(trgt => trgt.value); //let domain = filterBy.domain.map(domain => domain.value)\n    //let collectionMethod = filterBy.collectionMethod.map(method => method.value)\n\n    let domain = [filterBy.domain];\n    let collectionMethod = [filterBy.collectionMethod];\n\n    if (datasetType['parallel-corpus']) {\n      if (languagePair.source && languagePair.target.length) {\n        makeSubmitAPICall(languagePair.source, tgt, domain, collectionMethod, datasetType);\n      } else if (!languagePair.source && !languagePair.target.length) {\n        setSrcError(true);\n        setTgtError(true);\n      } else if (!languagePair.source) setSrcError(true);else if (!languagePair.target.length) setTgtError(true);\n    } else {\n      if (!languagePair.target.length) setTgtError(true);else {\n        makeSubmitAPICall(null, tgt, domain, collectionMethod, datasetType);\n      }\n    }\n  };\n\n  const renderDatasetButtons = () => {\n    return DatasetType.map((type, i) => {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        className: classes.innerButton,\n        variant: datasetType[type.value] ? \"contained\" : \"outlined\",\n        color: \"primary\",\n        onClick: () => handleDatasetClick(type.value),\n        children: type.label\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }, this);\n    });\n  };\n\n  const renderFilterByOptions = (id, options, filter, value, label) => {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, {\n      id: id,\n      options: options,\n      filter: filter,\n      value: value,\n      handleOnChange: handleFilterByChange,\n      label: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderFilterByfield = (id, label, value, filter) => {\n    return /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.subHeader,\n      fullWidth: true,\n      select: true,\n      id: id,\n      label: label,\n      value: value,\n      onChange: event => handleFilterByChange(event.target.value, id),\n      children: filter.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n        value: option.value,\n        children: option.label\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTexfield = (id, label) => {\n    return /*#__PURE__*/_jsxDEV(TextField, {\n      className: classes.subHeader,\n      fullWidth: true,\n      error: srcError,\n      helperText: srcError && \"Source language is mandatory\",\n      select: true,\n      id: id,\n      label: label,\n      value: languagePair.source,\n      onChange: event => handleLanguagePairChange(event.target.value, 'source'),\n      children: Language.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n        value: option.value,\n        children: option.label\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderCheckBox = (name, color, label) => {\n    return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: state[name],\n        onChange: handleCheckboxChange,\n        name: name,\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this),\n      label: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }, this);\n  };\n\n  const getTargetLang = () => {\n    return Language.filter(lang => lang.value !== languagePair.source);\n  };\n\n  const renderclearNsubmitButtons = () => {\n    return (\n      /*#__PURE__*/\n\n      /* <div className={classes.clearNSubmit}>\n                <Button size=\"large\"  variant=\"outlined\" onClick={clearfilter}>\n                    Clear\n            </Button>\n                <Button size=\"large\" className={classes.buttonStyle} variant=\"contained\" color=\"primary\" onClick={handleSubmitBtn}>\n                    Submit\n            </Button>\n            </div> */\n      _jsxDEV(Grid, {\n        container: true,\n        className: classes.clearNSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 9,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                size: \"large\",\n                fullWidth: true,\n                variant: \"outlined\",\n                onClick: clearfilter,\n                children: \"Clear\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                fullWidth: true,\n                size: \"large\",\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: handleSubmitBtn,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 21\n      }, this)\n    );\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.breadcrum,\n      children: /*#__PURE__*/_jsxDEV(BreadCrum, {\n        links: params === 'inprogress' || params === 'completed' ? [url, urlMySearch] : [url],\n        activeLink: \"Search & Download Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        className: (params === 'inprogress' || params === 'completed') && classes.blurOut,\n        item: true,\n        xs: 12,\n        sm: 5,\n        md: 4,\n        lg: 4,\n        xl: 4,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.subHeader,\n          variant: \"h6\",\n          children: \"Select Dataset Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.buttonDiv,\n          children: renderDatasetButtons()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.subHeader,\n          variant: \"h6\",\n          children: getTitle()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.subHeader,\n          children: [datasetType['parallel-corpus'] && renderTexfield(\"select-source-language\", \"Source Language *\"), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            id: \"language-target\",\n            options: getTargetLang(),\n            filter: \"target\",\n            value: languagePair.target,\n            handleOnChange: handleLanguagePairChange,\n            label: getLabel(),\n            error: tgtError,\n            helperText: \"This field is mandatory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.subHeader,\n          variant: \"h6\",\n          children: \"Filter by\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.subHeader,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 1,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              className: classes.subHeader,\n              item: true,\n              xs: 12,\n              sm: 12,\n              md: 12,\n              lg: 12,\n              xl: 12,\n              children: renderFilterByfield(\"domain\", \"Select Domain\", filterBy.domain, FilterBy.domain)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 25\n          }, this), renderFilterByfield(\"collectionMethod\", \"Select Collection Method\", filterBy.collectionMethod, FilterBy.collectionMethod)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 21\n        }, this), renderCheckBox(\"checkedA\", \"primary\", \"Vetted by multiple annotators\"), renderCheckBox(\"checkedB\", \"primary\", \"Source sentences manually translated by multiple translators\"), renderclearNsubmitButtons()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 1,\n        sm: 1,\n        md: 1,\n        lg: 1,\n        xl: 1,\n        children: /*#__PURE__*/_jsxDEV(Divider, {\n          orientation: \"vertical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 7,\n        lg: 7,\n        xl: 7,\n        className: classes.parent,\n        children: renderPage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 13\n    }, this), snackbar.open && /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      handleClose: handleSnackbarClose,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      message: snackbar.message,\n      variant: snackbar.variant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchAndDownloadRecords, \"cQXXKRiopa+ftPdz6HRy/Qmy8SE=\", false, function () {\n  return [useParams, useHistory, useSelector];\n});\n\n_c = SearchAndDownloadRecords;\nexport default withStyles(DatasetStyle)(SearchAndDownloadRecords);\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchAndDownloadRecords\");","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/SearchDownloadRecords.jsx"],"names":["Grid","Typography","Button","TextField","MenuItem","Checkbox","FormControlLabel","Divider","SearchResult","withStyles","DatasetStyle","Snackbar","BreadCrum","UrlConfig","SearchAndDownload","useDispatch","useSelector","APITransport","useState","useEffect","useRef","DownloadDatasetRecords","RequestNumberCreation","useHistory","useParams","Autocomplete","Language","FilterBy","SubmitSearchRequest","DatasetType","getLanguageLabel","SearchAndDownloadRecords","props","classes","url","dataset","urlMySearch","mySearches","param","history","languagePair","setLanguagePair","source","target","filterBy","setFilterBy","domain","collectionMethod","datasetType","setDatasetType","count","setCount","urls","setUrls","downloadSample","downloadAll","previousUrl","detailedReport","state","mySearchReport","current","params","data","responseData","filter","val","sr_no","srno","sampleUrl","downloadUrl","targetLanguage","sourceLanguage","push","process","env","PUBLIC_URL","handleCheckboxChange","event","setState","name","checked","handleLanguagePairChange","value","property","setSrcError","setTgtError","handleFilterByChange","snackbar","setSnackbarInfo","open","message","variant","checkedA","checkedB","srcError","tgtError","renderPage","length","handleDatasetClick","clearfilter","getLabel","getTitle","makeSubmitAPICall","src","tgt","type","Dataset","Object","keys","console","log","apiObj","fetch","apiEndPoint","method","headers","getHeaders","body","JSON","stringify","getBody","then","res","ok","response","json","serviceRequestNumber","handleSnackbarClose","Promise","reject","catch","err","handleSubmitBtn","map","trgt","renderDatasetButtons","i","innerButton","label","renderFilterByOptions","id","options","renderFilterByfield","subHeader","option","renderTexfield","renderCheckBox","color","getTargetLang","lang","renderclearNsubmitButtons","clearNSubmit","breadcrum","blurOut","buttonDiv","parent","vertical","horizontal"],"mappings":"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","sourcesContent":["import {\n    Grid,\n    Typography,\n    Button,\n    TextField,\n    MenuItem,\n    Checkbox,\n    FormControlLabel,\n    Divider\n} from '@material-ui/core';\nimport SearchResult from \"./SearchResult\";\nimport { withStyles } from '@material-ui/core/styles';\nimport DatasetStyle from '../../../styles/Dataset';\nimport Snackbar from '../../../components/common/Snackbar';\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport SearchAndDownload from '../../../../redux/actions/api/DataSet/DatasetSearch/SearchAndDownload';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport { useState, useEffect, useRef } from 'react';\nimport DownloadDatasetRecords from \"./DownloadDatasetRecords\";\nimport RequestNumberCreation from \"./RequestNumberCreation\";\nimport { useHistory, useParams } from 'react-router';\nimport Autocomplete from '../../../components/common/Autocomplete';\nimport { Language, FilterBy } from '../../../../configs/DatasetItems';\nimport SubmitSearchRequest from '../../../../redux/actions/api/DataSet/DatasetSearch/SubmitSearchRequest';\nimport DatasetType from '../../../../configs/DatasetItems';\nimport getLanguageLabel from '../../../../utils/getLabel';\n\nconst SearchAndDownloadRecords = (props) => {\n    const { classes } = props;\n    const url = UrlConfig.dataset;\n    const urlMySearch = UrlConfig.mySearches;\n    const param = useParams();\n    const history = useHistory();\n    const [languagePair, setLanguagePair] = useState({\n        source: '',\n        target: []\n    });\n    // const [filterBy, setFilterBy] = useState({\n    //     domain: [],\n    //     source: [],\n    //     collectionMethod: []\n    // });\n    const [filterBy, setFilterBy] = useState({\n        domain: '',\n        source: '',\n        collectionMethod: ''\n    });\n\n    const [datasetType, setDatasetType] = useState({\n        'parallel-corpus': true\n    })\n\n    const [count, setCount] = useState(0);\n    const [urls, setUrls] = useState({\n        downloadSample: '',\n        downloadAll: ''\n    })\n\n    const previousUrl = useRef();\n\n\n    const detailedReport = useSelector((state) => state.mySearchReport);\n\n    useEffect(() => {\n\n        previousUrl.current = params;\n\n        let data = detailedReport.responseData.filter((val) => {\n            return val.sr_no === srno\n        })\n        if (data[0]) {\n            setCount(data[0].count);\n            setUrls({\n                downloadSample: data[0].sampleUrl,\n                downloadAll: data[0].downloadUrl\n            })\n\n            let target = data[0].targetLanguage ? getLanguageLabel(data[0].targetLanguage) : getLanguageLabel(data[0].sourceLanguage)\n\n            setLanguagePair({ target, source: data[0].sourceLanguage })\n            setDatasetType({ [data[0].datasetType]: true })\n        }\n\n        else if ((params === 'completed' || params === 'inprogress') && count === 0)\n            history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`)\n\n    }, []);\n\n    useEffect(() => {\n        if (previousUrl.current !== params && previousUrl.current !== 'initiate') {\n            setLanguagePair({ target: [], source: \"\" })\n            setFilterBy({\n                domain: [],\n                source: [],\n                collectionMethod: []\n            })\n        }\n        previousUrl.current = params;\n    })\n\n\n\n    const handleCheckboxChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n    };\n    const handleLanguagePairChange = (value, property) => {\n        setLanguagePair({ ...languagePair, [property]: value });\n\n        if (property === 'source')\n            setSrcError(false)\n        else\n            setTgtError(false)\n    };\n    const handleFilterByChange = (value, property) => {\n        setFilterBy({ ...filterBy, [property]: value });\n    };\n    const [snackbar, setSnackbarInfo] = useState({\n        open: false,\n        message: '',\n        variant: 'success'\n    })\n    const [state, setState] = useState({\n        checkedA: false,\n        checkedB: false,\n    });\n    const [srcError, setSrcError] = useState(false)\n    const [tgtError, setTgtError] = useState(false)\n    const { params, srno } = param\n    const renderPage = () => {\n        let data = detailedReport.responseData.filter((val) => {\n            return val.sr_no === srno\n        })\n        let datasetType = data.length && getLanguageLabel(data[0].datasetType, 'datasetType')[0]\n        switch (params) {\n            case 'inprogress':\n                return <RequestNumberCreation reqno={srno} />\n            case 'completed':\n                return <DownloadDatasetRecords datasetType={datasetType ? datasetType : 'Parallel'} sentencePair={count} urls={urls} />\n            default:\n                return <SearchResult />\n        }\n    }\n\n    const handleDatasetClick = (property) => {\n        history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`)\n        clearfilter()\n        setDatasetType({ [property]: true })\n        setSrcError(false)\n        setTgtError(false)\n    }\n    const getLabel = () => {\n        if (datasetType['parallel-corpus'])\n            return \"Target Language *\"\n        else if (datasetType['ocr-corpus'])\n            return \"Script *\"\n        else\n            return \"Language *\"\n    }\n\n    const getTitle = () => {\n        if (datasetType['parallel-corpus'])\n            return \"Select Language Pair\"\n        else if (datasetType['ocr-corpus'])\n            return \"Select Script\"\n        else\n            return \"Select Language\"\n    }\n    const clearfilter = () => {\n        setFilterBy({\n            domain: [],\n            source: [],\n            collectionMethod: []\n        });\n        setLanguagePair({\n            source: \"\",\n            target: []\n        });\n    }\n\n    const makeSubmitAPICall = (src, tgt, domain, collectionMethod, type) => {\n        debugger\n        const Dataset = Object.keys(type)[0]\n        console.log(Dataset)\n        setSnackbarInfo({\n            ...snackbar,\n            open: true,\n            message: 'Please wait while we process your request...',\n            variant: 'info'\n        })\n        const apiObj = new SubmitSearchRequest(Dataset, tgt, src, domain, collectionMethod)\n        fetch(apiObj.apiEndPoint(), {\n            method: 'post',\n            headers: apiObj.getHeaders().headers,\n            body: JSON.stringify(apiObj.getBody())\n        })\n            .then(async res => {\n                if (res.ok) {\n                    let response = await res.json()\n                    history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/inprogress/${response.serviceRequestNumber}`)\n                    handleSnackbarClose()\n\n                } else {\n                    new Promise.reject(\"\")\n                }\n            })\n            .catch(err => {\n                setSnackbarInfo({\n                    ...snackbar,\n                    open: true,\n                    message: 'Failed to submit your search request...',\n                    variant: 'error'\n                })\n            })\n\n    }\n    const handleSnackbarClose = () => {\n        setSnackbarInfo({ ...snackbar, open: false })\n    }\n    const handleSubmitBtn = () => {\n        let tgt = languagePair.target.map(trgt => trgt.value)\n        //let domain = filterBy.domain.map(domain => domain.value)\n        //let collectionMethod = filterBy.collectionMethod.map(method => method.value)\n        let domain = [filterBy.domain]\n        let collectionMethod = [filterBy.collectionMethod]\n        if (datasetType['parallel-corpus']) {\n            if (languagePair.source && languagePair.target.length) {\n                makeSubmitAPICall(languagePair.source, tgt, domain, collectionMethod, datasetType)\n            }\n\n            else if (!languagePair.source && !languagePair.target.length) {\n                setSrcError(true)\n                setTgtError(true)\n            }\n\n            else if (!languagePair.source)\n                setSrcError(true)\n            else if (!languagePair.target.length)\n                setTgtError(true)\n        }\n        else {\n            if (!languagePair.target.length)\n                setTgtError(true)\n            else {\n                makeSubmitAPICall(null, tgt, domain, collectionMethod, datasetType)\n            }\n\n        }\n\n\n    }\n\n    const renderDatasetButtons = () => {\n        return (\n            DatasetType.map((type, i) => {\n                return (\n                    <Button size='small' className={classes.innerButton} variant={datasetType[type.value] ? \"contained\" : \"outlined\"}\n                        color=\"primary\"\n                        key={i}\n                        onClick={() => handleDatasetClick(type.value)}\n                    >\n                        {type.label}\n                    </Button>)\n            })\n\n        )\n    }\n\n    const renderFilterByOptions = (id, options, filter, value, label) => {\n        return (\n            <Autocomplete\n                id={id}\n                options={options}\n                filter={filter}\n                value={value}\n                handleOnChange={handleFilterByChange}\n                label={label}\n            />\n\n        )\n    }\n    const renderFilterByfield = (id, label, value, filter) => {\n        return (\n            <TextField className={classes.subHeader}\n                fullWidth\n                select\n                id={id}\n                label={label}\n                value={value}\n                onChange={(event) => handleFilterByChange(event.target.value, id)}\n            >\n                {filter.map((option) => (\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                    </MenuItem>\n                ))}\n            </TextField>\n        )\n    }\n    const renderTexfield = (id, label) => {\n        return (\n            <TextField className={classes.subHeader}\n                fullWidth\n                error={srcError}\n                helperText={srcError && \"Source language is mandatory\"}\n                select\n                id={id}\n                label={label}\n                value={languagePair.source}\n                onChange={(event) => handleLanguagePairChange(event.target.value, 'source')}\n            >\n                {Language.map((option) => (\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                    </MenuItem>\n                ))}\n            </TextField>\n        )\n    }\n    const renderCheckBox = (name, color, label) => {\n        return (\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={state[name]}\n                        onChange={handleCheckboxChange}\n                        name={name}\n                        color={color}\n                    />\n                }\n                label={label}\n            />\n        )\n    }\n    const getTargetLang = () => {\n        return Language.filter(lang => lang.value !== languagePair.source)\n    }\n    const renderclearNsubmitButtons=()=>{\n        return(\n              /* <div className={classes.clearNSubmit}>\n                        <Button size=\"large\"  variant=\"outlined\" onClick={clearfilter}>\n                            Clear\n                    </Button>\n                        <Button size=\"large\" className={classes.buttonStyle} variant=\"contained\" color=\"primary\" onClick={handleSubmitBtn}>\n                            Submit\n                    </Button>\n                    </div> */\n                    <Grid container className={classes.clearNSubmit}>\n                        <Grid item xs={3}></Grid>\n                        <Grid item xs={9}>\n                            <Grid container spacing={2} >\n                                <Grid item xs={6}>\n                                    <Button size=\"large\" fullWidth variant=\"outlined\" onClick={clearfilter}>\n                                        Clear\n                                    </Button>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Button fullWidth size=\"large\" variant=\"contained\" color=\"primary\" onClick={handleSubmitBtn}>\n                                        Submit\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n        )\n    }\n\n    return (\n        <div>\n            <div className={classes.breadcrum}>\n\n                <BreadCrum links={(params === 'inprogress' || params === 'completed') ? [url, urlMySearch] : [url]} activeLink=\"Search & Download Records\" />\n            </div>\n            <Grid container spacing={3}>\n                <Grid className={(params === 'inprogress' || params === 'completed') && classes.blurOut} item xs={12} sm={5} md={4} lg={4} xl={4}>\n\n                    <Typography className={classes.subHeader} variant=\"h6\">Select Dataset Type</Typography>\n\n                    <div className={classes.buttonDiv} >\n                        {renderDatasetButtons()}\n                    </div>\n\n                    <Typography className={classes.subHeader} variant=\"h6\">{getTitle()}</Typography>\n                    <div className={classes.subHeader}>\n                        {datasetType['parallel-corpus'] && renderTexfield(\"select-source-language\", \"Source Language *\")}\n\n                        <Autocomplete\n                            id=\"language-target\"\n                            options={getTargetLang()}\n                            filter='target'\n                            value={languagePair.target}\n                            handleOnChange={handleLanguagePairChange}\n                            label={getLabel()}\n                            error={tgtError}\n                            helperText=\"This field is mandatory\"\n                        />\n                    </div>\n                    <Typography className={classes.subHeader} variant=\"h6\">Filter by</Typography>\n                    <div className={classes.subHeader}>\n                        <Grid container spacing={1}>\n                            <Grid className={classes.subHeader} item xs={12} sm={12} md={12} lg={12} xl={12}>\n                                {/* {renderFilterByOptions(\"domain\", FilterBy.domain, \"domain\", filterBy.domain, \"Select Domain\")} */}\n                                {renderFilterByfield(\"domain\", \"Select Domain\", filterBy.domain, FilterBy.domain)}\n                            </Grid>\n\n                        </Grid>\n                        {/* {renderFilterByOptions(\"collection-method\", FilterBy.collectionMethod, \"collectionMethod\", filterBy.collectionMethod, \"Select Collection Method\")} */}\n                        {renderFilterByfield(\"collectionMethod\", \"Select Collection Method\", filterBy.collectionMethod, FilterBy.collectionMethod)}\n                    </div>\n\n                    {renderCheckBox(\"checkedA\", \"primary\", \"Vetted by multiple annotators\")}\n                    {renderCheckBox(\"checkedB\", \"primary\", \"Source sentences manually translated by multiple translators\")}\n\n                    {renderclearNsubmitButtons()}\n                </Grid>\n                <Grid item xs={1} sm={1} md={1} lg={1} xl={1}>\n                    <Divider orientation=\"vertical\" />\n                </Grid>\n                <Grid item xs={12} sm={6} md={7} lg={7} xl={7} className={classes.parent}>\n                    {renderPage()}\n                </Grid>\n\n            </Grid>\n            {snackbar.open &&\n                <Snackbar\n                    open={snackbar.open}\n                    handleClose={handleSnackbarClose}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n                    message={snackbar.message}\n                    variant={snackbar.variant}\n                />}\n        </div>\n    )\n\n\n}\n\nexport default withStyles(DatasetStyle)(SearchAndDownloadRecords);"]},"metadata":{},"sourceType":"module"}