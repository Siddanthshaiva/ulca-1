{"ast":null,"code":"var _jsxFileName = \"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/SearchDownloadRecords.jsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, Typography, Button, TextField, MenuItem, Checkbox, FormControlLabel, Divider } from '@material-ui/core';\nimport SearchResult from \"./SearchResult\";\nimport { withStyles } from '@material-ui/core/styles';\nimport DatasetStyle from '../../../styles/Dataset';\nimport Snackbar from '../../../components/common/Snackbar';\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport SearchAndDownload from '../../../../redux/actions/api/DataSet/DatasetSearch/SearchAndDownload';\nimport { PageChange } from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\";\nimport C from \"../../../../redux/actions/constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport { useState, useEffect, useRef } from 'react';\nimport DownloadDatasetRecords from \"./DownloadDatasetRecords\";\nimport RequestNumberCreation from \"./RequestNumberCreation\";\nimport { useHistory, useParams } from 'react-router';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport MultiAutocomplete from '../../../components/common/Autocomplete';\nimport { Language, FilterBy } from '../../../../configs/DatasetItems';\nimport SubmitSearchRequest from '../../../../redux/actions/api/DataSet/DatasetSearch/SubmitSearchRequest';\nimport DatasetType from '../../../../configs/DatasetItems';\nimport getLanguageLabel from '../../../../utils/getLabel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchAndDownloadRecords = props => {\n  _s();\n\n  const {\n    classes\n  } = props;\n  const url = UrlConfig.dataset;\n  const urlMySearch = UrlConfig.mySearches;\n  const dispatch = useDispatch();\n  const param = useParams();\n  const history = useHistory();\n  const [languagePair, setLanguagePair] = useState({\n    source: '',\n    target: []\n  }); // const [filterBy, setFilterBy] = useState({\n  //     domain: [],\n  //     source: [],\n  //     collectionMethod: []\n  // });\n\n  const [filterBy, setFilterBy] = useState({\n    domain: '',\n    source: '',\n    collectionMethod: ''\n  });\n  const [datasetType, setDatasetType] = useState({\n    'parallel-corpus': true\n  });\n  const [count, setCount] = useState(0);\n  const [urls, setUrls] = useState({\n    downloadSample: '',\n    downloadAll: ''\n  });\n  const previousUrl = useRef();\n  const detailedReport = useSelector(state => state.mySearchReport);\n  useEffect(() => {\n    previousUrl.current = params;\n    let data = detailedReport.responseData.filter(val => {\n      return val.sr_no === srno;\n    });\n\n    if (data[0]) {\n      setCount(data[0].count);\n      setUrls({\n        downloadSample: data[0].sampleUrl,\n        downloadAll: data[0].downloadUrl\n      });\n      let target = data[0].targetLanguage ? getLanguageLabel(data[0].targetLanguage) : getLanguageLabel(data[0].sourceLanguage);\n      let source = data[0].sourceLanguage && Language.filter(val => val.value === data[0].sourceLanguage[0])[0].label;\n      let domain = data[0].domain && FilterBy.domain.filter(val => val.value === data[0].domain[0])[0].label;\n      let collectionMethod = data[0].collection && FilterBy.collectionMethod.filter(val => val.value === data[0].collection[0])[0].label;\n      console.log(domain, collectionMethod, data[0]);\n      setFilterBy({ ...filterBy,\n        domain,\n        collectionMethod\n      });\n      setLanguagePair({\n        target,\n        source\n      }); //   setLanguagePair({ target, source: getLanguageLabel(data[0].sourceLanguage)})\n\n      setDatasetType({\n        [data[0].datasetType]: true\n      });\n    } else if ((params === 'completed' || params === 'inprogress') && count === 0) history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`);\n  }, []);\n  useEffect(() => {\n    if (previousUrl.current !== params && previousUrl.current !== 'initiate') {\n      setLanguagePair({\n        target: [],\n        source: \"\"\n      });\n      setFilterBy({\n        domain: \"\",\n        source: \"\",\n        collectionMethod: \"\"\n      });\n    }\n\n    previousUrl.current = params;\n  });\n\n  const handleCheckboxChange = event => {\n    setState({ ...state,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const handleLanguagePairChange = (value, property) => {\n    setLanguagePair({ ...languagePair,\n      [property]: value\n    });\n    if (property === 'source') setSrcError(false);else setTgtError(false);\n  };\n\n  const handleFilterByChange = (value, property) => {\n    setFilterBy({ ...filterBy,\n      [property]: value\n    });\n  };\n\n  const [snackbar, setSnackbarInfo] = useState({\n    open: false,\n    message: '',\n    variant: 'success'\n  });\n  const [state, setState] = useState({\n    checkedA: false,\n    checkedB: false\n  });\n  const [srcError, setSrcError] = useState(false);\n  const [tgtError, setTgtError] = useState(false);\n  const {\n    params,\n    srno\n  } = param;\n\n  const renderPage = () => {\n    let data = detailedReport.responseData.filter(val => {\n      return val.sr_no === srno;\n    });\n    let datasetType = data.length && getLanguageLabel(data[0].datasetType, 'datasetType')[0];\n\n    switch (params) {\n      case 'inprogress':\n        return /*#__PURE__*/_jsxDEV(RequestNumberCreation, {\n          reqno: srno\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 24\n        }, this);\n\n      case 'completed':\n        return /*#__PURE__*/_jsxDEV(DownloadDatasetRecords, {\n          datasetType: datasetType ? datasetType : 'Parallel',\n          sentencePair: count,\n          urls: urls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(SearchResult, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 24\n        }, this);\n    }\n  };\n\n  const handleDatasetClick = property => {\n    history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`);\n    clearfilter();\n    setDatasetType({\n      [property]: true\n    });\n    setSrcError(false);\n    setTgtError(false);\n  };\n\n  const getLabel = () => {\n    if (datasetType['parallel-corpus']) return \"Target Language *\";else if (datasetType['ocr-corpus']) return \"Script *\";else return \"Language *\";\n  };\n\n  const getTitle = () => {\n    if (datasetType['parallel-corpus']) return \"Select Language Pair\";else if (datasetType['ocr-corpus']) return \"Select Script\";else return \"Select Language\";\n  };\n\n  const clearfilter = () => {\n    setFilterBy({\n      domain: \"\",\n      source: \"\",\n      collectionMethod: \"\"\n    });\n    setLanguagePair({\n      source: \"\",\n      target: []\n    });\n  };\n\n  const makeSubmitAPICall = (src, tgt, domain, collectionMethod, type) => {\n    const Dataset = Object.keys(type)[0];\n    setSnackbarInfo({ ...snackbar,\n      open: true,\n      message: 'Please wait while we process your request...',\n      variant: 'info'\n    });\n    const apiObj = new SubmitSearchRequest(Dataset, tgt, src, domain, collectionMethod);\n    fetch(apiObj.apiEndPoint(), {\n      method: 'post',\n      headers: apiObj.getHeaders().headers,\n      body: JSON.stringify(apiObj.getBody())\n    }).then(async res => {\n      if (res.ok) {\n        let response = await res.json();\n        dispatch(PageChange(0, C.SEARCH_PAGE_NO));\n        history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/inprogress/${response.serviceRequestNumber}`);\n        handleSnackbarClose();\n      } else {\n        new Promise.reject(\"\");\n      }\n    }).catch(err => {\n      setSnackbarInfo({ ...snackbar,\n        open: true,\n        message: 'Failed to submit your search request...',\n        variant: 'error'\n      });\n    });\n  };\n\n  const handleSnackbarClose = () => {\n    setSnackbarInfo({ ...snackbar,\n      open: false\n    });\n  };\n\n  const getValueForLabel = label => {\n    console.log(label, 'hiii');\n    console.log(Language.filter(val => val.label === label)[0]);\n    return Language.filter(val => val.label === label)[0];\n  };\n\n  const getFilterValueForLabel = (data, label) => {\n    //  if (data === 'domain') {\n    return FilterBy[data].filter(val => val.label === label)[0]; //  }\n    // else if (data === 'collectionMethod') {\n    //     return (FilterBy.collectionMethod.filter(val => val.label === label)[0])\n    // }\n  };\n\n  const handleSubmitBtn = () => {\n    let tgt = languagePair.target.map(trgt => trgt.value); //let domain = filterBy.domain.map(domain => domain.value)\n    //let collectionMethod = filterBy.collectionMethod.map(method => method.value)\n\n    let domain = filterBy.domain && [getFilterValueForLabel('domain', filterBy.domain).value];\n    let collectionMethod = filterBy.collectionMethod && [getFilterValueForLabel('collectionMethod', filterBy.collectionMethod).value];\n\n    if (datasetType['parallel-corpus']) {\n      if (languagePair.source && languagePair.target.length) {\n        let source = getValueForLabel(languagePair.source).value;\n        makeSubmitAPICall(source, tgt, domain, collectionMethod, datasetType); //  makeSubmitAPICall(languagePair.source, tgt, domain, collectionMethod, datasetType)\n      } else if (!languagePair.source && !languagePair.target.length) {\n        setSrcError(true);\n        setTgtError(true);\n      } else if (!languagePair.source) setSrcError(true);else if (!languagePair.target.length) setTgtError(true);\n    } else {\n      if (!languagePair.target.length) setTgtError(true);else {\n        makeSubmitAPICall(null, tgt, domain, collectionMethod, datasetType);\n      }\n    }\n  };\n\n  const renderDatasetButtons = () => {\n    return DatasetType.map((type, i) => {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        className: classes.innerButton,\n        variant: \"outlined\",\n        color: datasetType[type.value] && \"primary\",\n        onClick: () => handleDatasetClick(type.value),\n        children: type.label\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }, this);\n    });\n  };\n\n  const renderFilterByOptions = (id, options, filter, value, label) => {\n    return /*#__PURE__*/_jsxDEV(MultiAutocomplete, {\n      id: id,\n      options: options,\n      filter: filter,\n      value: value,\n      handleOnChange: handleFilterByChange,\n      label: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this);\n  }; // const renderFilterByfield = (id, label, value, filter) => {\n  //     return (\n  //         <TextField className={classes.subHeader}\n  //             fullWidth\n  //             select\n  //             id={id}\n  //             label={label}\n  //             value={value}\n  //             onChange={(event) => handleFilterByChange(event.target.value, id)}\n  //         >\n  //             {filter.map((option) => (\n  //                 <MenuItem key={option.value} value={option.value}>\n  //                     {option.label}\n  //                 </MenuItem>\n  //             ))}\n  //         </TextField>\n  //     )\n  // }\n\n\n  const renderFilterByfield = (id, label, value, filter) => {\n    let filterByOptions = FilterBy[id].map(data => data.label);\n    return /*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: filterBy[id] ? filterBy[id] : null,\n      id: id,\n      options: filterByOptions,\n      onChange: (event, data) => handleFilterByChange(data, id),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        ...params,\n        label: label,\n        variant: \"standard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 42\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTexfield = (id, label, value, options, filter) => {\n    let labels = Language.map(lang => lang.label);\n    return /*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: languagePair.source ? languagePair.source : null,\n      id: \"source\",\n      options: labels,\n      onChange: (event, data) => handleLanguagePairChange(data, 'source'),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        ...params,\n        label: \"Source Language *\",\n        variant: \"standard\",\n        error: srcError,\n        helperText: srcError && \"Source language is mandatory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 42\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderCheckBox = (name, color, label) => {\n    return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: state[name],\n        onChange: handleCheckboxChange,\n        name: name,\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 21\n      }, this),\n      label: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }, this);\n  };\n\n  const getTargetLang = () => {\n    return Language.filter(lang => lang.label !== languagePair.source);\n  };\n\n  const renderclearNsubmitButtons = () => {\n    return (\n      /*#__PURE__*/\n\n      /* <div className={classes.clearNSubmit}>\n                <Button size=\"large\"  variant=\"outlined\" onClick={clearfilter}>\n                    Clear\n            </Button>\n                <Button size=\"large\" className={classes.buttonStyle} variant=\"contained\" color=\"primary\" onClick={handleSubmitBtn}>\n                    Submit\n            </Button>\n            </div> */\n      _jsxDEV(Grid, {\n        container: true,\n        className: classes.clearNSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 9,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                size: \"large\",\n                fullWidth: true,\n                variant: \"outlined\",\n                onClick: clearfilter,\n                children: \"Clear\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                fullWidth: true,\n                size: \"large\",\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: handleSubmitBtn,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 13\n      }, this)\n    );\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      className: classes.searchGrid,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        className: classes.leftSection,\n        item: true,\n        xs: 12,\n        sm: 5,\n        md: 4,\n        lg: 4,\n        xl: 4,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            className: classes.breadcrum,\n            item: true,\n            xs: 12,\n            sm: 12,\n            md: 12,\n            lg: 12,\n            xl: 12,\n            children: /*#__PURE__*/_jsxDEV(BreadCrum, {\n              links: params === 'inprogress' || params === 'completed' ? [url, urlMySearch] : [url],\n              activeLink: \"Search & Download Records\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            className: (params === 'inprogress' || params === 'completed') && classes.blurOut,\n            xs: 12,\n            sm: 12,\n            md: 12,\n            lg: 12,\n            xl: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.subHeader,\n              variant: \"body1\",\n              children: \"Select Dataset Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.buttonDiv,\n              children: renderDatasetButtons()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.subHeader,\n              variant: \"body1\",\n              children: getTitle()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.subHeader,\n              children: datasetType['parallel-corpus'] && renderTexfield(\"select-source-language\", \"Source Language *\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.subHeader,\n              children: /*#__PURE__*/_jsxDEV(MultiAutocomplete, {\n                id: \"language-target\",\n                options: getTargetLang(),\n                filter: \"target\",\n                value: languagePair.target,\n                handleOnChange: handleLanguagePairChange,\n                label: getLabel(),\n                error: tgtError,\n                helperText: \"This field is mandatory\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.subHeader,\n              variant: \"body1\",\n              children: \"Filter by\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 1,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                className: classes.subHeader,\n                item: true,\n                xs: 12,\n                sm: 12,\n                md: 12,\n                lg: 12,\n                xl: 12,\n                children: renderFilterByfield(\"domain\", \"Select Domain\", filterBy.domain, FilterBy.domain)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                className: classes.subHeader,\n                item: true,\n                xs: 12,\n                sm: 12,\n                md: 12,\n                lg: 12,\n                xl: 12,\n                children: renderFilterByfield(\"collectionMethod\", \"Select Collection Method\", filterBy.collectionMethod, FilterBy.collectionMethod)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 29\n            }, this), renderCheckBox(\"checkedA\", \"primary\", \"Vetted by multiple annotators\"), renderCheckBox(\"checkedB\", \"primary\", \"Source sentences manually translated by multiple translators\"), renderclearNsubmitButtons()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 7,\n        md: 8,\n        lg: 8,\n        xl: 8,\n        className: classes.parent,\n        children: renderPage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }, this), snackbar.open && /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      handleClose: handleSnackbarClose,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      message: snackbar.message,\n      variant: snackbar.variant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchAndDownloadRecords, \"+lul2TMiYK1MHzcw9CHnTUXv1ls=\", false, function () {\n  return [useDispatch, useParams, useHistory, useSelector];\n});\n\n_c = SearchAndDownloadRecords;\nexport default withStyles(DatasetStyle)(SearchAndDownloadRecords);\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchAndDownloadRecords\");","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetSeatch/SearchDownloadRecords.jsx"],"names":["Grid","Typography","Button","TextField","MenuItem","Checkbox","FormControlLabel","Divider","SearchResult","withStyles","DatasetStyle","Snackbar","BreadCrum","UrlConfig","SearchAndDownload","PageChange","C","useDispatch","useSelector","APITransport","useState","useEffect","useRef","DownloadDatasetRecords","RequestNumberCreation","useHistory","useParams","Autocomplete","MultiAutocomplete","Language","FilterBy","SubmitSearchRequest","DatasetType","getLanguageLabel","SearchAndDownloadRecords","props","classes","url","dataset","urlMySearch","mySearches","dispatch","param","history","languagePair","setLanguagePair","source","target","filterBy","setFilterBy","domain","collectionMethod","datasetType","setDatasetType","count","setCount","urls","setUrls","downloadSample","downloadAll","previousUrl","detailedReport","state","mySearchReport","current","params","data","responseData","filter","val","sr_no","srno","sampleUrl","downloadUrl","targetLanguage","sourceLanguage","value","label","collection","console","log","push","process","env","PUBLIC_URL","handleCheckboxChange","event","setState","name","checked","handleLanguagePairChange","property","setSrcError","setTgtError","handleFilterByChange","snackbar","setSnackbarInfo","open","message","variant","checkedA","checkedB","srcError","tgtError","renderPage","length","handleDatasetClick","clearfilter","getLabel","getTitle","makeSubmitAPICall","src","tgt","type","Dataset","Object","keys","apiObj","fetch","apiEndPoint","method","headers","getHeaders","body","JSON","stringify","getBody","then","res","ok","response","json","SEARCH_PAGE_NO","serviceRequestNumber","handleSnackbarClose","Promise","reject","catch","err","getValueForLabel","getFilterValueForLabel","handleSubmitBtn","map","trgt","renderDatasetButtons","i","innerButton","renderFilterByOptions","id","options","renderFilterByfield","filterByOptions","renderTexfield","labels","lang","renderCheckBox","color","getTargetLang","renderclearNsubmitButtons","clearNSubmit","searchGrid","leftSection","breadcrum","blurOut","subHeader","buttonDiv","parent","vertical","horizontal"],"mappings":"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","sourcesContent":["import {\n    Grid,\n    Typography,\n    Button,\n    TextField,\n    MenuItem,\n    Checkbox,\n    FormControlLabel,\n    Divider\n} from '@material-ui/core';\nimport SearchResult from \"./SearchResult\";\nimport { withStyles } from '@material-ui/core/styles';\nimport DatasetStyle from '../../../styles/Dataset';\nimport Snackbar from '../../../components/common/Snackbar';\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport SearchAndDownload from '../../../../redux/actions/api/DataSet/DatasetSearch/SearchAndDownload';\nimport {PageChange} from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\";\nimport C from \"../../../../redux/actions/constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport { useState, useEffect, useRef } from 'react';\nimport DownloadDatasetRecords from \"./DownloadDatasetRecords\";\nimport RequestNumberCreation from \"./RequestNumberCreation\";\nimport { useHistory, useParams } from 'react-router';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport MultiAutocomplete from '../../../components/common/Autocomplete';\nimport { Language, FilterBy } from '../../../../configs/DatasetItems';\nimport SubmitSearchRequest from '../../../../redux/actions/api/DataSet/DatasetSearch/SubmitSearchRequest';\nimport DatasetType from '../../../../configs/DatasetItems';\nimport getLanguageLabel from '../../../../utils/getLabel';\n\nconst SearchAndDownloadRecords = (props) => {\n    const { classes } = props;\n    const url = UrlConfig.dataset;\n    const urlMySearch = UrlConfig.mySearches;\n    const dispatch                  = useDispatch();\n    const param = useParams();\n    const history = useHistory();\n    const [languagePair, setLanguagePair] = useState({\n        source: '',\n        target: []\n    });\n    // const [filterBy, setFilterBy] = useState({\n    //     domain: [],\n    //     source: [],\n    //     collectionMethod: []\n    // });\n    const [filterBy, setFilterBy] = useState({\n        domain: '',\n        source: '',\n        collectionMethod: ''\n    });\n\n    const [datasetType, setDatasetType] = useState({\n        'parallel-corpus': true\n    })\n\n    const [count, setCount] = useState(0);\n    const [urls, setUrls] = useState({\n        downloadSample: '',\n        downloadAll: ''\n    })\n\n    const previousUrl = useRef();\n\n\n    const detailedReport = useSelector((state) => state.mySearchReport);\n\n    useEffect(() => {\n\n        previousUrl.current = params;\n\n        let data = detailedReport.responseData.filter((val) => {\n            return val.sr_no === srno\n        })\n        if (data[0]) {\n            setCount(data[0].count);\n            setUrls({\n                downloadSample: data[0].sampleUrl,\n                downloadAll: data[0].downloadUrl\n            })\n\n            let target = data[0].targetLanguage ? getLanguageLabel(data[0].targetLanguage) : getLanguageLabel(data[0].sourceLanguage)\n            let source = data[0].sourceLanguage && Language.filter(val => val.value === data[0].sourceLanguage[0])[0].label\n            let domain = data[0].domain && FilterBy.domain.filter(val => val.value === data[0].domain[0])[0].label\n            let collectionMethod = data[0].collection && FilterBy.collectionMethod.filter(val => val.value === data[0].collection[0])[0].label\n           console.log(domain, collectionMethod, data[0])\n            setFilterBy({\n                ...filterBy, domain, collectionMethod\n            })\n            setLanguagePair({ target, source })\n            //   setLanguagePair({ target, source: getLanguageLabel(data[0].sourceLanguage)})\n            setDatasetType({ [data[0].datasetType]: true })\n        }\n\n        else if ((params === 'completed' || params === 'inprogress') && count === 0)\n            history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`)\n\n    }, []);\n\n    useEffect(() => {\n        if (previousUrl.current !== params && previousUrl.current !== 'initiate') {\n            setLanguagePair({ target: [], source: \"\" })\n            setFilterBy({\n                domain: \"\",\n                source: \"\",\n                collectionMethod: \"\"\n            })\n        }\n        previousUrl.current = params;\n    })\n\n\n    const handleCheckboxChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n    };\n    const handleLanguagePairChange = (value, property) => {\n        setLanguagePair({ ...languagePair, [property]: value });\n\n        if (property === 'source')\n            setSrcError(false)\n        else\n            setTgtError(false)\n    };\n    const handleFilterByChange = (value, property) => {\n        setFilterBy({ ...filterBy, [property]: value });\n    };\n    const [snackbar, setSnackbarInfo] = useState({\n        open: false,\n        message: '',\n        variant: 'success'\n    })\n    const [state, setState] = useState({\n        checkedA: false,\n        checkedB: false,\n    });\n    const [srcError, setSrcError] = useState(false)\n    const [tgtError, setTgtError] = useState(false)\n    const { params, srno } = param\n    const renderPage = () => {\n        let data = detailedReport.responseData.filter((val) => {\n            return val.sr_no === srno\n        })\n        let datasetType = data.length && getLanguageLabel(data[0].datasetType, 'datasetType')[0]\n        switch (params) {\n            case 'inprogress':\n                return <RequestNumberCreation reqno={srno} />\n            case 'completed':\n                return <DownloadDatasetRecords datasetType={datasetType ? datasetType : 'Parallel'} sentencePair={count} urls={urls} />\n            default:\n                return <SearchResult />\n        }\n    }\n\n    const handleDatasetClick = (property) => {\n        history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/initiate/-1`)\n        clearfilter()\n        setDatasetType({ [property]: true })\n        setSrcError(false)\n        setTgtError(false)\n    }\n    const getLabel = () => {\n        if (datasetType['parallel-corpus'])\n            return \"Target Language *\"\n        else if (datasetType['ocr-corpus'])\n            return \"Script *\"\n        else\n            return \"Language *\"\n    }\n\n    const getTitle = () => {\n        if (datasetType['parallel-corpus'])\n            return \"Select Language Pair\"\n        else if (datasetType['ocr-corpus'])\n            return \"Select Script\"\n        else\n            return \"Select Language\"\n    }\n    const clearfilter = () => {\n        setFilterBy({\n            domain: \"\",\n            source: \"\",\n            collectionMethod: \"\"\n        });\n        setLanguagePair({\n            source: \"\",\n            target: []\n        });\n    }\n\n    const makeSubmitAPICall = (src, tgt, domain, collectionMethod, type) => {\n        const Dataset = Object.keys(type)[0]\n        setSnackbarInfo({\n            ...snackbar,\n            open: true,\n            message: 'Please wait while we process your request...',\n            variant: 'info'\n        })\n        const apiObj = new SubmitSearchRequest(Dataset, tgt, src, domain, collectionMethod)\n        fetch(apiObj.apiEndPoint(), {\n            method: 'post',\n            headers: apiObj.getHeaders().headers,\n            body: JSON.stringify(apiObj.getBody())\n        })\n            .then(async res => {\n                if (res.ok) {\n                    let response = await res.json()\n                    dispatch(PageChange(0, C.SEARCH_PAGE_NO));\n                    history.push(`${process.env.PUBLIC_URL}/search-and-download-rec/inprogress/${response.serviceRequestNumber}`)\n                    handleSnackbarClose()\n\n                } else {\n                    new Promise.reject(\"\")\n                }\n            })\n            .catch(err => {\n                setSnackbarInfo({\n                    ...snackbar,\n                    open: true,\n                    message: 'Failed to submit your search request...',\n                    variant: 'error'\n                })\n            })\n\n    }\n    const handleSnackbarClose = () => {\n        setSnackbarInfo({ ...snackbar, open: false })\n    }\n    const getValueForLabel = (label) => {\n        console.log(label, 'hiii')\n        console.log(Language.filter(val => val.label === label)[0])\n        return Language.filter(val => val.label === label)[0]\n\n    }\n    const getFilterValueForLabel = (data, label) => {\n        //  if (data === 'domain') {\n        return (FilterBy[data].filter(val => val.label === label)[0])\n        //  }\n        // else if (data === 'collectionMethod') {\n        //     return (FilterBy.collectionMethod.filter(val => val.label === label)[0])\n        // }\n    }\n\n    const handleSubmitBtn = () => {\n        let tgt = languagePair.target.map(trgt => trgt.value)\n        //let domain = filterBy.domain.map(domain => domain.value)\n        //let collectionMethod = filterBy.collectionMethod.map(method => method.value)\n        let domain = filterBy.domain && [getFilterValueForLabel('domain', filterBy.domain).value]\n        let collectionMethod = filterBy.collectionMethod && [getFilterValueForLabel('collectionMethod', filterBy.collectionMethod).value]\n        if (datasetType['parallel-corpus']) {\n            if (languagePair.source && languagePair.target.length) {\n                let source = getValueForLabel(languagePair.source).value\n                makeSubmitAPICall(source, tgt, domain, collectionMethod, datasetType)\n                //  makeSubmitAPICall(languagePair.source, tgt, domain, collectionMethod, datasetType)\n            }\n\n            else if (!languagePair.source && !languagePair.target.length) {\n                setSrcError(true)\n                setTgtError(true)\n            }\n\n            else if (!languagePair.source)\n                setSrcError(true)\n            else if (!languagePair.target.length)\n                setTgtError(true)\n        }\n        else {\n            if (!languagePair.target.length)\n                setTgtError(true)\n            else {\n                makeSubmitAPICall(null, tgt, domain, collectionMethod, datasetType)\n            }\n\n        }\n\n\n    }\n\n    const renderDatasetButtons = () => {\n        return (\n            DatasetType.map((type, i) => {\n                return (\n                    <Button size='small' className={classes.innerButton} variant=\"outlined\"\n                        color={datasetType[type.value] && \"primary\"}\n                        key={i}\n                        onClick={() => handleDatasetClick(type.value)}\n                    >\n                        {type.label}\n                    </Button>)\n            })\n\n        )\n    }\n\n    const renderFilterByOptions = (id, options, filter, value, label) => {\n        return (\n            <MultiAutocomplete\n                id={id}\n                options={options}\n                filter={filter}\n                value={value}\n                handleOnChange={handleFilterByChange}\n                label={label}\n            />\n\n        )\n    }\n    // const renderFilterByfield = (id, label, value, filter) => {\n    //     return (\n    //         <TextField className={classes.subHeader}\n    //             fullWidth\n    //             select\n    //             id={id}\n    //             label={label}\n    //             value={value}\n    //             onChange={(event) => handleFilterByChange(event.target.value, id)}\n    //         >\n    //             {filter.map((option) => (\n    //                 <MenuItem key={option.value} value={option.value}>\n    //                     {option.label}\n    //                 </MenuItem>\n    //             ))}\n    //         </TextField>\n    //     )\n    // }\n    const renderFilterByfield = (id, label, value, filter) => {\n        let filterByOptions = FilterBy[id].map(data => data.label)\n        return (\n            <Autocomplete\n                value={filterBy[id] ? filterBy[id] : null}\n                id={id}\n                options={filterByOptions}\n                onChange={(event, data) => handleFilterByChange(data, id)}\n                renderInput={(params) => <TextField fullWidth {...params} label={label} variant=\"standard\"\n                />}\n            />\n        )\n    }\n    const renderTexfield = (id, label, value, options, filter) => {\n        let labels = Language.map(lang => lang.label)\n        return (\n            <Autocomplete\n                value={languagePair.source ? languagePair.source : null}\n                id=\"source\"\n                options={labels}\n                onChange={(event, data) => handleLanguagePairChange(data, 'source')}\n                renderInput={(params) => <TextField fullWidth {...params} label=\"Source Language *\" variant=\"standard\"\n                    error={srcError}\n                    helperText={srcError && \"Source language is mandatory\"}\n                />}\n            />\n\n\n        )\n    }\n    const renderCheckBox = (name, color, label) => {\n        return (\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={state[name]}\n                        onChange={handleCheckboxChange}\n                        name={name}\n                        color={color}\n                    />\n                }\n                label={label}\n            />\n        )\n    }\n    const getTargetLang = () => {\n        return Language.filter(lang => lang.label !== languagePair.source)\n    }\n    const renderclearNsubmitButtons = () => {\n        return (\n            /* <div className={classes.clearNSubmit}>\n                      <Button size=\"large\"  variant=\"outlined\" onClick={clearfilter}>\n                          Clear\n                  </Button>\n                      <Button size=\"large\" className={classes.buttonStyle} variant=\"contained\" color=\"primary\" onClick={handleSubmitBtn}>\n                          Submit\n                  </Button>\n                  </div> */\n            <Grid container className={classes.clearNSubmit}>\n                <Grid item xs={3}></Grid>\n                <Grid item xs={9}>\n                    <Grid container spacing={2} >\n                        <Grid item xs={6}>\n                            <Button size=\"large\" fullWidth variant=\"outlined\" onClick={clearfilter}>\n                                Clear\n                                    </Button>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Button fullWidth size=\"large\" variant=\"contained\" color=\"primary\" onClick={handleSubmitBtn}>\n                                Submit\n                                    </Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n\n        )\n    }\n\n    return (\n        <div>\n            <Grid container spacing={3} className={classes.searchGrid}>\n                <Grid className={classes.leftSection} item xs={12} sm={5} md={4} lg={4} xl={4}>\n                    <Grid container spacing={2}>\n                        <Grid className={classes.breadcrum} item xs={12} sm={12} md={12} lg={12} xl={12}>\n                            <BreadCrum links={(params === 'inprogress' || params === 'completed') ? [url, urlMySearch] : [url]} activeLink=\"Search & Download Records\" />\n                        </Grid>\n                        <Grid item className={(params === 'inprogress' || params === 'completed') && classes.blurOut}\n                            xs={12} sm={12} md={12} lg={12} xl={12}\n                        >\n                            <Typography className={classes.subHeader} variant=\"body1\">Select Dataset Type</Typography>\n                            <div className={classes.buttonDiv}>\n                                {renderDatasetButtons()}\n                            </div>\n                            <Typography className={classes.subHeader} variant=\"body1\">{getTitle()}</Typography>\n                            <div className={classes.subHeader}>\n                                {datasetType['parallel-corpus'] && renderTexfield(\"select-source-language\", \"Source Language *\")}\n                            </div>\n                            <div className={classes.subHeader}>\n                                <MultiAutocomplete\n                                    id=\"language-target\"\n                                    options={getTargetLang()}\n                                    filter='target'\n                                    value={languagePair.target}\n                                    handleOnChange={handleLanguagePairChange}\n                                    label={getLabel()}\n                                    error={tgtError}\n                                    helperText=\"This field is mandatory\"\n                                />\n                            </div>\n                            <Typography className={classes.subHeader} variant=\"body1\">Filter by</Typography>\n                            <Grid container spacing={1}>\n                                <Grid className={classes.subHeader} item xs={12} sm={12} md={12} lg={12} xl={12}>\n                                    {renderFilterByfield(\"domain\", \"Select Domain\", filterBy.domain, FilterBy.domain)}\n                                </Grid>\n                                <Grid className={classes.subHeader} item xs={12} sm={12} md={12} lg={12} xl={12}>\n                                    {renderFilterByfield(\"collectionMethod\", \"Select Collection Method\", filterBy.collectionMethod, FilterBy.collectionMethod)}\n                                </Grid>\n                            </Grid>\n\n                            {renderCheckBox(\"checkedA\", \"primary\", \"Vetted by multiple annotators\")}\n                            {renderCheckBox(\"checkedB\", \"primary\", \"Source sentences manually translated by multiple translators\")}\n                            {renderclearNsubmitButtons()}\n                        </Grid>\n                    </Grid>\n                </Grid>\n\n                <Grid item xs={12} sm={7} md={8} lg={8} xl={8} className={classes.parent}>\n                    {renderPage()}\n                </Grid>\n\n            </Grid>\n            {\n                snackbar.open &&\n                <Snackbar\n                    open={snackbar.open}\n                    handleClose={handleSnackbarClose}\n                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n                    message={snackbar.message}\n                    variant={snackbar.variant}\n                />\n            }\n        </div >\n    )\n\n\n}\n\nexport default withStyles(DatasetStyle)(SearchAndDownloadRecords);"]},"metadata":{},"sourceType":"module"}