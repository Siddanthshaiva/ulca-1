{"ast":null,"code":"var _jsxFileName = \"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/ChartRender.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport Theme from \"../../theme/theme-default\";\nimport { withStyles, Typography, MuiThemeProvider, Paper, Button } from \"@material-ui/core\";\nimport ChartStyles from \"../../styles/Dashboard\";\nimport { ResponsiveContainer, BarChart, Bar, Cell, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport Select from 'react-select';\nimport APITransport from \"../../../redux/actions/apitransport/apitransport\";\nimport FetchLanguageDataSets from \"../../../redux/actions/api/Dashboard/languageDatasets\";\nimport { isMobile } from 'react-device-detect';\nimport { FilterList } from '@material-ui/icons';\nimport Header from '../../components/common/Header';\nimport authenticate from '../../../configs/authenticate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar colors = [\"188efc\", \"7a47a4\", \"b93e94\", \"1fc6a4\", \"f46154\", \"d088fd\", \"f3447d\", \"188efc\", \"f48734\", \"189ac9\", \"0e67bd\"];\n\nconst ChartRender = props => {\n  _s();\n\n  const [selectedOption, setSelectedOption] = useState({\n    value: 'Parallel Dataset',\n    label: 'Parallel Dataset'\n  });\n  const [title, setTitle] = useState(\"Number of parallel sentences per language with English\");\n  const [filterValue, setfilterValue] = useState(\"domain\");\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const DashboardReport = useSelector(state => state.dashboardReport);\n  const {\n    classes\n  } = props;\n  const options = [{\n    value: 'Parallel Dataset',\n    label: 'Parallel Dataset'\n  }, {\n    value: 'Monolingual Dataset',\n    label: 'Monolingual Dataset'\n  }, {\n    value: 'ASR / TTS Dataset',\n    label: 'ASR / TTS Dataset'\n  }, {\n    value: 'OCR Dataset',\n    label: 'OCR Dataset'\n  }];\n  useEffect(() => {\n    const userObj = new FetchLanguageDataSets(\"parallel-corpus\", \"languagePairs\");\n    dispatch(APITransport(userObj));\n\n    if (authenticate()) {\n      history.push(`${process.env.PUBLIC_URL}/private-dashboard`);\n    } else {\n      localStorage.removeItem('token');\n      history.push(`${process.env.PUBLIC_URL}/dashboard`);\n    }\n  }, []);\n  const customStyles = {\n    option: (provided, state) => ({ ...provided,\n      borderColor: \"green\",\n      color: 'black',\n      padding: 20,\n      background: state.isSelected && \"#c7c6c68a !important\"\n    }),\n    control: (base, state) => ({ ...base,\n      // This line disable the blue border\n      borderColor: \"#392C71\",\n      border: \"1px solid rgba(57, 44, 113, 0.5)\",\n      boxShadow: state.isFocused ? 0 : 0,\n      fontFamily: \"Source Sans Pro, Arial, sans-serif \"\n    })\n  };\n\n  const handleOnClick = (value, event, filterValue) => {\n    // if (event && event.hasOwnProperty(\"label\") && event.label === \"Others\") {\n    //     let others = this.props.dataValues.slice(7, this.props.dataValues.length)\n    //     this.setState({\n    // \tdataSetValues: others,\n    // \tcardNavigation: true\n    //     })\n    // } else {\n    switch (value) {\n      case 1:\n        handleApiCall(\"parallel-corpus\", filterValue ? filterValue : this.state.filterValue, [{\n          \"type\": \"PARAMS\",\n          \"sourceLanguage\": {\n            \"type\": \"PARAMS\",\n            \"value\": \"English\"\n          },\n          \"targetLanguage\": {\n            \"type\": \"PARAMS\",\n            \"value\": this.state.selectedLanguage ? this.state.selectedLanguage : event && event.hasOwnProperty(\"label\") && event.label\n          }\n        }]);\n        this.setState({\n          currentPage: value,\n          dataSetValues: [],\n          selectedLanguage: this.state.selectedLanguage ? this.state.selectedLanguage : event && event.hasOwnProperty(\"label\") && event.label,\n          title: `English-${this.state.selectedLanguage ? this.state.selectedLanguage : event && event.hasOwnProperty(\"label\") && event.label}  parallel corpus - Grouped by ${filterValue == \"domain\" ? \"Domain\" : filterValue == \"source\" ? \"Source\" : filterValue == \"collectionMethod\" ? \"Collection Method\" : \"Domain\"}`\n        });\n        break;\n\n      case 2:\n        handleApiCall(\"parallel-corpus\", this.state.filterValue == \"source\" ? \"domain\" : \"source\", [{\n          \"type\": \"PARAMS\",\n          \"sourceLanguage\": {\n            \"type\": \"PARAMS\",\n            \"value\": \"English\"\n          },\n          \"targetLanguage\": {\n            \"type\": \"PARAMS\",\n            \"value\": this.state.selectedLanguage\n          }\n        }, {\n          \"type\": \"PARAMS\",\n          \"value\": event && event.hasOwnProperty(\"label\") && event.label\n        }]);\n        this.setState({\n          currentPage: value,\n          dataSetValues: [],\n          title: `English-${this.state.selectedLanguage} parallel corpus`,\n          filterValue: 'domain'\n        });\n        break;\n\n      case 0:\n        handleApiCall(\"parallel-corpus\", \"languagePairs\", []);\n        this.setState({\n          currentPage: value,\n          filterValue: 'domain',\n          selectedLanguage: '',\n          dataSetValues: [],\n          title: \"English-Indic language parallel corpus\"\n        });\n        break;\n    }\n  };\n\n  const handleLanguageChange = value => {\n    setfilterValue(value);\n    handleOnClick(1, \"\", value);\n  };\n\n  const fetchLanuagePairButtons = () => {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: filterValue === \"domain\" ? \"primary\" : \"light\",\n        style: filterValue === \"domain\" ? {\n          backgroundColor: \"#E8F5F8\"\n        } : {},\n        size: \"medium\",\n        variant: \"outlined\",\n        className: classes.backButton,\n        onClick: () => handleLanguageChange(\"domain\"),\n        children: \"Domain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: filterValue === \"source\" ? \"primary\" : \"light\",\n        style: filterValue === \"source\" ? {\n          backgroundColor: \"#E8F5F8\"\n        } : {},\n        size: \"medium\",\n        variant: \"outlined\",\n        className: classes.backButton,\n        onClick: () => handleLanguageChange(\"source\"),\n        children: \"Source\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: filterValue === \"collectionMethod\" ? \"primary\" : \"light\",\n        style: filterValue === \"collectionMethod\" ? {\n          backgroundColor: \"#E8F5F8\"\n        } : {},\n        size: \"medium\",\n        variant: \"outlined\",\n        className: classes.backButton,\n        onClick: () => handleLanguageChange(\"collectionMethod\"),\n        children: \"Collection Method\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleSelectChange = value => {\n    setSelectedOption(value);\n\n    switch (value.label) {\n      case 'Parallel Dataset':\n        setTitle(\"Number of parallel sentences per language with English\");\n        break;\n\n      case 'Monolingual Dataset':\n        setTitle('Number of sentences per language');\n        break;\n\n      case 'ASR / TTS Dataset':\n        setTitle(\"Numer of audio hours per language\");\n        break;\n\n      case 'OCR Dataset':\n        setTitle(\"Numer of images per script\");\n        break;\n\n      default:\n        setTitle(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!authenticate() && /*#__PURE__*/_jsxDEV(MuiThemeProvider, {\n      theme: Theme,\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        className: classes.paper,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.titleBar,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"b\",\n            component: \"h3\",\n            className: classes.Typography,\n            children: \" Dataset Type : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            className: classes.select,\n            styles: customStyles,\n            color: \"primary\",\n            value: selectedOption,\n            onChange: value => {\n              handleSelectChange(value);\n            },\n            options: options\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 6\n          }, this), fetchLanuagePairButtons()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.title,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            value: \"\",\n            variant: \"h6\",\n            children: [\" \", title, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"95%\",\n          height: 450,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            width: 900,\n            height: 450,\n            data: DashboardReport,\n            maxBarSize: 100,\n            children: [/*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"label\",\n              textAnchor: isMobile ? \"end\" : \"middle\",\n              tick: {\n                angle: isMobile ? -60 : 0\n              },\n              height: isMobile ? 100 : 60,\n              interval: 0,\n              position: \"insideLeft\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              type: \"number\",\n              dx: 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n              horizontal: true,\n              vertical: false,\n              textAnchor: \"middle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              cursor: {\n                fill: 'none'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"value\",\n              radius: [4, 4, 0, 0],\n              maxBarSize: 30,\n              children: DashboardReport.length > 0 && DashboardReport.map((entry, index) => {\n                const color = colors[index < 9 ? index : index % 10];\n                return /*#__PURE__*/_jsxDEV(Cell, {\n                  fill: `#${color}`\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 17\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChartRender, \"CY37PmJl9WsvFcS/HmmwVjFrLIs=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c = ChartRender;\nexport default withStyles(ChartStyles(Theme))(ChartRender);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartRender\");","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/ChartRender.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useHistory","Theme","withStyles","Typography","MuiThemeProvider","Paper","Button","ChartStyles","ResponsiveContainer","BarChart","Bar","Cell","CartesianGrid","XAxis","YAxis","Tooltip","Select","APITransport","FetchLanguageDataSets","isMobile","FilterList","Header","authenticate","colors","ChartRender","props","selectedOption","setSelectedOption","value","label","title","setTitle","filterValue","setfilterValue","history","dispatch","DashboardReport","state","dashboardReport","classes","options","userObj","push","process","env","PUBLIC_URL","localStorage","removeItem","customStyles","option","provided","borderColor","color","padding","background","isSelected","control","base","border","boxShadow","isFocused","fontFamily","handleOnClick","event","handleApiCall","selectedLanguage","hasOwnProperty","setState","currentPage","dataSetValues","handleLanguageChange","fetchLanuagePairButtons","backgroundColor","backButton","handleSelectChange","container","paper","titleBar","select","angle","fill","length","map","entry","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Theme from \"../../theme/theme-default\";\r\nimport { withStyles, Typography, MuiThemeProvider, Paper, Button } from \"@material-ui/core\";\r\nimport ChartStyles from \"../../styles/Dashboard\";\r\nimport { ResponsiveContainer, BarChart, Bar, Cell, CartesianGrid, XAxis, YAxis, Tooltip,} from 'recharts';\r\nimport Select from 'react-select';\r\nimport APITransport from \"../../../redux/actions/apitransport/apitransport\";\r\nimport FetchLanguageDataSets from \"../../../redux/actions/api/Dashboard/languageDatasets\";\r\nimport { isMobile } from 'react-device-detect';\r\nimport {FilterList} from '@material-ui/icons';\r\nimport Header from '../../components/common/Header';\r\nimport authenticate from '../../../configs/authenticate';\r\n\r\nvar colors = [\"188efc\", \"7a47a4\", \"b93e94\", \"1fc6a4\", \"f46154\", \"d088fd\", \"f3447d\", \"188efc\", \"f48734\", \"189ac9\", \"0e67bd\"]\r\n\r\n\r\nconst ChartRender = (props) => {\r\n        const [selectedOption, setSelectedOption]   \t= \tuseState({ value: 'Parallel Dataset', label: 'Parallel Dataset' });\r\n        const [title, setTitle]                     \t= \tuseState(\"Number of parallel sentences per language with English\");\r\n\tconst [filterValue, setfilterValue]\t\t=\tuseState(\"domain\")\r\n        const history                               \t= \tuseHistory();\r\n        const dispatch                             \t= \tuseDispatch();\r\n        const DashboardReport                       \t= \tuseSelector( (state) => state.dashboardReport);\r\n        const { classes }                           \t= \tprops;\r\n        const options \t\t\t\t    \t= \t[\r\n\t\t\t\t\t\t\t\t\t{ value: 'Parallel Dataset', label: 'Parallel Dataset' },\r\n\t\t\t\t\t\t\t\t\t{ value: 'Monolingual Dataset', label: 'Monolingual Dataset' },\r\n\t\t\t\t\t\t\t\t\t{ value: 'ASR / TTS Dataset', label: 'ASR / TTS Dataset' },\r\n\t\t\t\t\t\t\t\t\t{ value: 'OCR Dataset', label: 'OCR Dataset' },\r\n\t\t\t\t\t\t\t\t];\r\n\r\n\tuseEffect(() => {\r\n\t\tconst userObj \t\t= \tnew FetchLanguageDataSets(\"parallel-corpus\", \"languagePairs\");\r\n\t\tdispatch(APITransport(userObj));\r\n\t\tif (authenticate()) {\r\n\t\t\thistory.push(`${process.env.PUBLIC_URL}/private-dashboard`)\r\n\t\t} \r\n\t\telse {\r\n\t\t\tlocalStorage.removeItem('token')\r\n\t\t\thistory.push(`${process.env.PUBLIC_URL}/dashboard`)\r\n\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst customStyles = {\r\n\t\toption\t: (provided, state) => ({\r\n\t\t\t...provided,\r\n\t\t\tborderColor\t:\t\"green\",\r\n\t\t\tcolor\t\t: \t'black',\r\n\t\t\tpadding\t\t: \t20,\r\n\t\t\tbackground\t: \tstate.isSelected && \"#c7c6c68a !important\",\r\n\r\n\t\t}),\r\n\t\tcontrol: (base, state) => ({\r\n\t\t...base,\r\n\t\t// This line disable the blue border\r\n\t\t\tborderColor\t:\t\"#392C71\",\r\n\t\t\tborder \t\t: \t\"1px solid rgba(57, 44, 113, 0.5)\",\r\n\t\t\tboxShadow\t: \tstate.isFocused ? 0 : 0,\r\n\t\t\tfontFamily\t: \t\"Source Sans Pro, Arial, sans-serif \"\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleOnClick= (value, event, filterValue) =>  {\r\n\t\t// if (event && event.hasOwnProperty(\"label\") && event.label === \"Others\") {\r\n\t\t//     let others = this.props.dataValues.slice(7, this.props.dataValues.length)\r\n\t\t//     this.setState({\r\n\t\t// \tdataSetValues: others,\r\n\t\t// \tcardNavigation: true\r\n\t\t//     })\r\n\t\t// } else {\r\n\t\t    switch (value) {\r\n\t\t\tcase 1:\r\n\t\t\t    handleApiCall(\"parallel-corpus\", filterValue ? filterValue : this.state.filterValue, [{ \"type\": \"PARAMS\", \"sourceLanguage\": { \"type\": \"PARAMS\", \"value\": \"English\" }, \"targetLanguage\": { \"type\": \"PARAMS\", \"value\": this.state.selectedLanguage ? this.state.selectedLanguage : event && event.hasOwnProperty(\"label\") && event.label } }])\r\n\t\t\t    this.setState({ currentPage: value, dataSetValues: [], selectedLanguage: this.state.selectedLanguage ? this.state.selectedLanguage : event && event.hasOwnProperty(\"label\") && event.label, title: `English-${this.state.selectedLanguage ? this.state.selectedLanguage : event && event.hasOwnProperty(\"label\") && event.label}  parallel corpus - Grouped by ${(filterValue == \"domain\") ? \"Domain\" : (filterValue == \"source\") ? \"Source\" : filterValue == \"collectionMethod\" ? \"Collection Method\" : \"Domain\"}` })\r\n\t\t\t    break;\r\n\t\t\tcase 2:\r\n\t\t\t    handleApiCall(\"parallel-corpus\", this.state.filterValue == \"source\" ? \"domain\" : \"source\", [{ \"type\": \"PARAMS\", \"sourceLanguage\": { \"type\": \"PARAMS\", \"value\": \"English\" }, \"targetLanguage\": { \"type\": \"PARAMS\", \"value\": this.state.selectedLanguage } }, { \"type\": \"PARAMS\", \"value\": event && event.hasOwnProperty(\"label\") && event.label }])\r\n\t\t\t    this.setState({ currentPage: value, dataSetValues: [], title: `English-${this.state.selectedLanguage} parallel corpus`, filterValue: 'domain' })\r\n\t\t\t    break;\r\n\t\t\tcase 0:\r\n\t\t\t    handleApiCall(\"parallel-corpus\", \"languagePairs\", [])\r\n\t\t\t    this.setState({ currentPage: value, filterValue: 'domain', selectedLanguage: '', dataSetValues: [], title: \"English-Indic language parallel corpus\" })\r\n\t\t\t    break;\r\n\t\r\n\t\t    }\r\n\t\t\r\n\t    }\r\n\r\n\tconst handleLanguageChange = (value) => {\r\n\t\tsetfilterValue(value)\r\n\t\thandleOnClick(1, \"\", value)\r\n\t    }\r\n\r\n\tconst fetchLanuagePairButtons = () => {\r\n\t\tconst { classes } = this.props;\r\n\t\r\n\t\treturn (\r\n\t\t    <div>\r\n\t\t\t<Button color={filterValue === \"domain\" ? \"primary\" : \"light\"} style={ filterValue === \"domain\" ? {backgroundColor: \"#E8F5F8\"} : {} } size=\"medium\" variant=\"outlined\" className={classes.backButton} onClick={() => handleLanguageChange(\"domain\")}>Domain</Button>\r\n\t\t\t<Button color={filterValue === \"source\" ? \"primary\" : \"light\"} style={ filterValue === \"source\" ? {backgroundColor: \"#E8F5F8\"} : {} }size=\"medium\" variant=\"outlined\" className={classes.backButton} onClick={() => handleLanguageChange(\"source\")}>Source</Button>\r\n\t\t\t<Button color={filterValue === \"collectionMethod\" ? \"primary\" : \"light\"} style={ filterValue === \"collectionMethod\" ? {backgroundColor: \"#E8F5F8\"} : {} } size=\"medium\" variant=\"outlined\" className={classes.backButton} onClick={() => handleLanguageChange(\"collectionMethod\")}>Collection Method</Button>\r\n\t\t   \r\n\t\t    </div>\r\n\t\t)\r\n\t    }\r\n\r\n\tconst handleSelectChange = (value) =>{\r\n\t\tsetSelectedOption( value)\r\n\t\tswitch (value.label) {\r\n\t\t\tcase 'Parallel Dataset':\r\n\t\t\t\t setTitle(\"Number of parallel sentences per language with English\")\r\n\t\t\t\t break;\r\n\t\t\tcase 'Monolingual Dataset':\r\n\t\t\t\t setTitle('Number of sentences per language')\r\n\t\t\t\t break;\r\n\t\t\tcase 'ASR / TTS Dataset':\r\n\t\t\t\t setTitle(\"Numer of audio hours per language\")\r\n\t\t\t\t break;\r\n\t\t\tcase 'OCR Dataset':\r\n\t\t\t\tsetTitle(\"Numer of images per script\")\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tsetTitle(\"\")\r\n\t\t}\r\n\r\n\t\t\r\n\t}\r\n\r\n     return (\r\n        <>\r\n            \t{ !authenticate() &&\r\n\t\t\t<MuiThemeProvider theme={Theme}>\r\n\t\t\t\t<Header /><br /><br /><br /><br />\r\n\t\t\t</MuiThemeProvider>\r\n        \t}\r\n                <div className\t=\t{classes.container}>\r\n\t\t\t{/* <div className={classes.breadcrum}>\r\n\t\t\t\t<BreadCrum links={[\"Dataset\"]} activeLink=\"Submit Dataset\" />\r\n\t\t\t</div> */}\r\n\t\t\t<Paper elevation  = {3} className  = {classes.paper}>\r\n\t\t\t\t<div className  =\t{classes.titleBar}>\r\n\t\t\t\t\t<Typography \tvariant   \t=\t\"b\" component = \"h3\" \r\n\t\t\t\t\t\t\tclassName \t= \t{classes.Typography}> Dataset Type :\t</Typography>\r\n\t\t\t\t\t<Select \tclassName \t= \t{classes.select} \r\n\t\t\t\t\t\t\tstyles \t\t= \t{customStyles} color= \"primary\"\r\n\t\t\t\t\t\t\tvalue   \t=\t{selectedOption}\r\n\t\t\t\t\t\t\tonChange\t=\t{(value)=>{handleSelectChange(value)}}\r\n\t\t\t\t\t\t\toptions\t\t=\t{options}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{fetchLanuagePairButtons()}\r\n\t\t\t\t\t{/* <Button color={\"primary\" } size=\"medium\" variant=\"outlined\" className={classes.filterButton} onClick={() => this.handleLanguageChange(\"domain\")}><FilterList className ={classes.iconStyle}/>Filter</Button>\r\n\t\t\t\t\t<Button color={\"primary\" } size=\"medium\" variant=\"outlined\" className={classes.filterButtonIcon} onClick={() => this.handleLanguageChange(\"domain\")}><FilterList className ={classes.iconStyle}/></Button> */}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={classes.title}>\r\n\t\t\t\t\t<Typography value=\"\" variant=\"h6\"> {title} </Typography>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ResponsiveContainer width = \"95%\" height = {450}>\r\n\t\t\t\t\t<BarChart width = {900} height \t= \t{450} data={DashboardReport} maxBarSize = {100} >\r\n\t\t\t\t\t\t<XAxis \tdataKey \t= \t\"label\"\r\n\t\t\t\t\t\t\ttextAnchor\t=\t{isMobile ? \"end\" : \"middle\"}\r\n\t\t\t\t\t\t\ttick\t\t=\t{{ angle: isMobile ? -60 : 0 }} \r\n\t\t\t\t\t\t\theight\t\t=\t{isMobile ? 100 : 60}\r\n\t\t\t\t\t\t\tinterval\t=\t{0}\r\n\t\t\t\t\t\t\tposition\t=\t\"insideLeft\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<YAxis type=\"number\" dx\t=\t{0} />\r\n\t\t\t\t\t\t<CartesianGrid horizontal = {true} vertical = {false} textAnchor = {\"middle\"} />\r\n\t\t\t\t\t\t<Tooltip cursor={{fill: 'none'}}/>\r\n\t\t\t\t\t\t<Bar dataKey = \"value\" radius = {[4, 4, 0, 0]} maxBarSize = {30}>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tDashboardReport.length > 0 && DashboardReport.map((entry, index) => {\r\n\t\t\t\t\t\t\t\t\tconst color \t= \tcolors[index < 9 ? index : index % 10]\r\n\t\t\t\t\t\t\t\t\treturn <Cell key = {index} fill = {`#${color}`} />;\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Bar>\r\n\t\t\t\t\t</BarChart>\r\n\t\t\t\t</ResponsiveContainer>\r\n\r\n\t\t\t</Paper>\r\n\r\n\t\t</div>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default withStyles(ChartStyles(Theme))(ChartRender);\r\n"]},"metadata":{},"sourceType":"module"}