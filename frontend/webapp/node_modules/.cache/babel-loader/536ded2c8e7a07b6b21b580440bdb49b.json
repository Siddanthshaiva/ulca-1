{"ast":null,"code":"import C from '../../../actions/constants';\nconst initialState = {\n  responseData: []\n}; //{\"CurrentRecordIndex\": 2, \"ProcessedCount\": [{\"Type\": \"Success\", \"Count\": 3}, {\"Type\": \"Failed\", \"TypeDetails\": {}, \"Count\": 0}], \"TimeStamp\": \"2021-06-12 11:47:23.861540\"}\n\nconst getRecordCount = value => {\n  let valueArray = value.processedCount;\n  var countDetails = {};\n  valueArray.length > 0 && valueArray.forEach(element => {\n    if (element.type === \"success\") {\n      countDetails[\"success\"] = element.count;\n    } else if (element.type === \"failed\") {\n      countDetails[\"failed\"] = element.count;\n    }\n  });\n  return countDetails;\n};\n\nconst getDetailedReport = payload => {\n  let responseData = [];\n  let refreshStatus = false;\n  payload.forEach(element => {\n    let count = element.details ? getRecordCount(JSON.parse(element.details)) : \"\";\n    responseData.push({\n      srNo: element.serviceRequestNumber,\n      datasetId: element.datasetName,\n      recordCount: count && count.success,\n      failedCount: count && count.failed,\n      stage: element.tool,\n      status: element.status\n    });\n\n    if (element.status === \"Completed\" || \"Pending\") {\n      refreshStatus = true;\n    }\n  });\n  return {\n    responseData,\n    refreshStatus\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case C.GET_DETAILED_REPORT:\n      return getDetailedReport(action.payload);\n\n    case C.CLEAR_DETAILED_REPORT:\n      return { ...initialState\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/DetailedDataSet.js"],"names":["C","initialState","responseData","getRecordCount","value","valueArray","processedCount","countDetails","length","forEach","element","type","count","getDetailedReport","payload","refreshStatus","details","JSON","parse","push","srNo","serviceRequestNumber","datasetId","datasetName","recordCount","success","failedCount","failed","stage","tool","status","reducer","state","action","GET_DETAILED_REPORT","CLEAR_DETAILED_REPORT"],"mappings":"AAAA,OAAOA,CAAP,MAAc,4BAAd;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE;AADG,CAArB,C,CAKA;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IACvB;AAEI,MAAIC,UAAU,GAAGD,KAAK,CAACE,cAAvB;AACA,MAAIC,YAAY,GAAG,EAAnB;AACAF,EAAAA,UAAU,CAACG,MAAX,GAAmB,CAAnB,IAAwBH,UAAU,CAACI,OAAX,CAAmBC,OAAO,IAAG;AACjD,QAAGA,OAAO,CAACC,IAAR,KAAe,SAAlB,EAA4B;AACxBJ,MAAAA,YAAY,CAAC,SAAD,CAAZ,GAA0BG,OAAO,CAACE,KAAlC;AACH,KAFD,MAGK,IAAGF,OAAO,CAACC,IAAR,KAAe,QAAlB,EAA2B;AAC5BJ,MAAAA,YAAY,CAAC,QAAD,CAAZ,GAAyBG,OAAO,CAACE,KAAjC;AACH;AACJ,GAPuB,CAAxB;AAWA,SAAOL,YAAP;AAEH,CAlBD;;AAoBA,MAAMM,iBAAiB,GAAIC,OAAD,IAAa;AAEnC,MAAIZ,YAAY,GAAG,EAAnB;AACA,MAAIa,aAAa,GAAG,KAApB;AACAD,EAAAA,OAAO,CAACL,OAAR,CAAgBC,OAAO,IAAI;AACvB,QAAIE,KAAK,GAAGF,OAAO,CAACM,OAAR,GAAkBb,cAAc,CAAEc,IAAI,CAACC,KAAL,CAAWR,OAAO,CAACM,OAAnB,CAAF,CAAhC,GAA+D,EAA3E;AACAd,IAAAA,YAAY,CAACiB,IAAb,CACI;AACQC,MAAAA,IAAI,EAAsBV,OAAO,CAACW,oBAD1C;AAESC,MAAAA,SAAS,EAAgBZ,OAAO,CAACa,WAF1C;AAGSC,MAAAA,WAAW,EAAcZ,KAAK,IAAIA,KAAK,CAACa,OAHjD;AAISC,MAAAA,WAAW,EAAcd,KAAK,IAAIA,KAAK,CAACe,MAJjD;AAKSC,MAAAA,KAAK,EAAoBlB,OAAO,CAACmB,IAL1C;AAMSC,MAAAA,MAAM,EAAoBpB,OAAO,CAACoB;AAN3C,KADJ;;AAUA,QAAGpB,OAAO,CAACoB,MAAR,KAAmB,WAAnB,IAAkC,SAArC,EAA+C;AAC3Cf,MAAAA,aAAa,GAAG,IAAhB;AACH;AACJ,GAfD;AAgBA,SAAO;AAACb,IAAAA,YAAD;AAAgBa,IAAAA;AAAhB,GAAP;AACH,CArBD;;AAwBA,MAAMgB,OAAO,GAAG,CAACC,KAAK,GAAG/B,YAAT,EAAuBgC,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACtB,IAAf;AACI,SAAKX,CAAC,CAACkC,mBAAP;AACI,aAAQrB,iBAAiB,CAACoB,MAAM,CAACnB,OAAR,CAAzB;;AAEJ,SAAKd,CAAC,CAACmC,qBAAP;AACI,aAAO,EACH,GAAGlC;AADA,OAAP;;AAGJ;AACI,aAAO,EACH,GAAG+B;AADA,OAAP;AATR;AAaH,CAdD;;AAgBA,eAAeD,OAAf","sourcesContent":["import C from '../../../actions/constants';\n\nconst initialState = {\n    responseData: []\n}\n\n\n//{\"CurrentRecordIndex\": 2, \"ProcessedCount\": [{\"Type\": \"Success\", \"Count\": 3}, {\"Type\": \"Failed\", \"TypeDetails\": {}, \"Count\": 0}], \"TimeStamp\": \"2021-06-12 11:47:23.861540\"}\n\nconst getRecordCount = (value) =>\n{\n\n    let valueArray = value.processedCount;\n    var countDetails = {}\n    valueArray.length> 0 && valueArray.forEach(element =>{\n        if(element.type===\"success\"){\n            countDetails[\"success\"] = element.count;\n        }\n        else if(element.type===\"failed\"){\n            countDetails[\"failed\"] = element.count;\n        }\n    })\n\n   \n\n    return countDetails;\n\n}\n\nconst getDetailedReport = (payload) => {\n    \n    let responseData = [];\n    let refreshStatus = false;\n    payload.forEach(element => {\n        let count = element.details ? getRecordCount( JSON.parse(element.details)):\"\"\n        responseData.push(\n            {\n                    srNo                    : element.serviceRequestNumber,\n                     datasetId              : element.datasetName,\n                     recordCount            : count && count.success,\n                     failedCount            : count && count.failed,\n                     stage                  : element.tool,\n                     status                 :  element.status\n                    }\n        )\n        if(element.status === \"Completed\" || \"Pending\"){\n            refreshStatus = true\n        }\n    }); \n    return {responseData , refreshStatus};\n}\n\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case C.GET_DETAILED_REPORT:\n            return  getDetailedReport(action.payload)  \n            \n        case C.CLEAR_DETAILED_REPORT:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}