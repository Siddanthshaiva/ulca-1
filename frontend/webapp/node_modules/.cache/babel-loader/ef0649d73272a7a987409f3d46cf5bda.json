{"ast":null,"code":"var _jsxFileName = \"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/ChartRender.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ChartStyles from \"../../styles/Dashboard\";\nimport { ResponsiveContainer, BarChart, Bar, Brush, Cell, CartesianGrid, ReferenceLine, ReferenceArea, XAxis, YAxis, Tooltip, Legend, ErrorBar, LabelList, Rectangle } from 'recharts';\nimport APITransport from \"../../../redux/actions/apitransport/apitransport\";\nimport FetchLanguageDataSets from \"../../../redux/actions/api/Dashboard/languageDatasets\";\nimport Container from '@material-ui/core/Container';\nimport { isMobile } from 'react-device-detect';\nimport Button from '@material-ui/core/Button';\nimport BackIcon from '@material-ui/icons/ArrowBack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar jp = require('jsonpath');\n\nvar colors = [\"188efc\", \"7a47a4\", \"b93e94\", \"1fc6a4\", \"f46154\", \"d088fd\", \"f3447d\", \"188efc\", \"f48734\", \"189ac9\", \"0e67bd\"];\n\nconst ChartRender = props => {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const DashboardReport = useSelector(state => state.dashboardReport);\n  const {\n    classes\n  } = props;\n  useEffect(() => {\n    const userObj = new FetchLanguageDataSets(\"parallel-corpus\", \"[]\", {\n      \"type\": \"PARAMS\",\n      \"value\": \"languagePairs\"\n    });\n    dispatch(APITransport(userObj));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.card,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.cardHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.cardHeaderContainer,\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                color: \"light\",\n                size: \"medium\",\n                variant: \"contained\",\n                className: classes.backButton,\n                startIcon: /*#__PURE__*/_jsxDEV(BackIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 139\n                }, this),\n                onClick: () => this.handleCardNavigation(),\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.seperator\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.title,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            value: \"\",\n            variant: \"h6\",\n            children: \"Ttitle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        className: classes.paper\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 17\n  }, this);\n};\n\n_s(ChartRender, \"RfhWPXKZuu2sdJsjrxkUmU+wKkA=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c = ChartRender;\nexport default withStyles(ChartStyles)(ChartRender);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartRender\");","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/ChartRender.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useHistory","withStyles","Paper","Typography","ChartStyles","ResponsiveContainer","BarChart","Bar","Brush","Cell","CartesianGrid","ReferenceLine","ReferenceArea","XAxis","YAxis","Tooltip","Legend","ErrorBar","LabelList","Rectangle","APITransport","FetchLanguageDataSets","Container","isMobile","Button","BackIcon","jp","require","colors","ChartRender","props","history","dispatch","DashboardReport","state","dashboardReport","classes","userObj","container","card","cardHeader","cardHeaderContainer","backButton","handleCardNavigation","seperator","title","paper"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {  useHistory } from \"react-router-dom\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ChartStyles from \"../../styles/Dashboard\";\nimport {\n    ResponsiveContainer,\n    BarChart, Bar, Brush, Cell, CartesianGrid, ReferenceLine, ReferenceArea,\n    XAxis, YAxis, Tooltip, Legend, ErrorBar, LabelList, Rectangle\n} from 'recharts';\n\nimport APITransport from \"../../../redux/actions/apitransport/apitransport\";\nimport FetchLanguageDataSets from \"../../../redux/actions/api/Dashboard/languageDatasets\";\nimport Container from '@material-ui/core/Container';\nimport { isMobile } from 'react-device-detect';\nimport Button from '@material-ui/core/Button';\nimport BackIcon from '@material-ui/icons/ArrowBack';\nvar jp = require('jsonpath')\nvar colors = [\"188efc\", \"7a47a4\", \"b93e94\", \"1fc6a4\", \"f46154\", \"d088fd\", \"f3447d\", \"188efc\", \"f48734\", \"189ac9\", \"0e67bd\"]\n\n\nconst ChartRender = (props) => {\n\n        const history                 = useHistory();\n        const dispatch                = useDispatch();\n        const DashboardReport         = useSelector( (state) => state.dashboardReport);\n        const { classes }             = props;\n        useEffect(()                  => {\n                const userObj         = new FetchLanguageDataSets( \"parallel-corpus\", \"[]\", {\"type\":\"PARAMS\",\"value\":\"languagePairs\"});\n                 dispatch(APITransport(userObj));\n        }, []);\n\n    return (\n\n                <Container className={classes.container}>\n\n                    <div className={classes.card}>\n                        <div className={classes.cardHeader}>\n                            <div>\n                                \n                                    <div className={classes.cardHeaderContainer}>\n                                    \n                                    <>\n                                        <Button color=\"light\" size=\"medium\" variant=\"contained\" className={classes.backButton} startIcon={<BackIcon />} onClick={() => this.handleCardNavigation()}>Back</Button>\n                                    \n                                        <div className={classes.seperator}></div>\n                                        </>\n                                    \n                                    </div>\n                                \n                            </div>\n\n                            <div className={classes.title}>\n                                <Typography value=\"\" variant=\"h6\">\n\n                                    Ttitle\n                                </Typography>\n                            </div>\n                        </div>\n                        \n                        <Paper elevation={3} className={classes.paper}>\n\n                            {/* <ResponsiveContainer width=\"95%\" height={450}>\n                                <BarChart width={900} height={450} data={this.state.dataSetValues} maxBarSize={100} >\n                                    <XAxis dataKey=\"label\"\n                                        textAnchor={isMobile ? \"end\" : \"middle\"}\n                                        tick={{ angle: isMobile ? -60 : 0 }} height={isMobile ? 100 : 60}\n                                        interval={0}\n                                        position=\"insideLeft\"\n\n                                    />\n                                    <YAxis type=\"number\" dx={0} />\n                                    <CartesianGrid horizontal={true} vertical={false} textAnchor={\"middle\"} />\n\n                                    <Tooltip />\n                                    <Bar dataKey=\"value\" radius={[4, 4, 0, 0]} maxBarSize={30} onClick={(event) => { this.handleOnClick(this.state.currentPage + 1, event) }} className={this.state.currentPage !== 2 && classes.cursor}>\n\n                                        {\n                                            this.state.dataSetValues.length > 0 && this.state.dataSetValues.map((entry, index) => {\n                                                const color = colors[index < 9 ? index : index % 10]\n                                                return <Cell key={index} fill={`#${color}`} />;\n                                            })\n                                        }\n                                    </Bar>\n                                </BarChart>\n                            </ResponsiveContainer> */}\n\n                        </Paper>\n                    </div>\n                </Container>\n    )\n   \n\n}\n\n\n\nexport default withStyles(ChartStyles)(ChartRender);\n"]},"metadata":{},"sourceType":"module"}