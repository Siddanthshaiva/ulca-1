{"ast":null,"code":"import C from '../../../actions/constants';\nimport getDatasetName from '../../../../utils/getDataset';\nconst initialState = {\n  responseData: [],\n  filteredData: [],\n  refreshStatus: false,\n  filter: {\n    status: [],\n    datasetType: []\n  },\n  selectedFilter: {\n    status: [],\n    datasetType: []\n  }\n};\n\nconst dateConversion = value => {\n  var myDate = new Date(value);\n  let result = myDate.toLocaleString('en-IN', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true\n  });\n  return result.toUpperCase();\n};\n\nconst getFilterValue = (payload, data) => {\n  let {\n    filterValues\n  } = payload;\n  let statusFilter = [];\n  let filterResult = [];\n\n  if (filterValues.hasOwnProperty(\"status\") && filterValues.status.length > 0) {\n    statusFilter = data.responseData.filter(value => {\n      if (filterValues.status.includes(value.status)) {\n        return value;\n      }\n    });\n  } else {\n    statusFilter = data.responseData;\n  }\n\n  if (filterValues.hasOwnProperty(\"datasetType\") && filterValues.datasetType.length > 0) {\n    filterResult = statusFilter.filter(value => {\n      if (filterValues.datasetType.includes(value.datasetType)) {\n        return value;\n      }\n    });\n  } else {\n    filterResult = statusFilter;\n  }\n\n  data.filteredData = filterResult;\n  data.selectedFilter = filterValues;\n};\n\nconst getContributionList = payload => {\n  let responseData = [];\n  let statusFilter = [];\n  let datatypeFilter = [];\n  let filter = {\n    status: [],\n    datasetType: []\n  };\n  let refreshStatus = false;\n  payload.forEach(element => {\n    responseData.push({\n      submitRefNumber: element.serviceRequestNumber,\n      datasetName: element.datasetName,\n      submittedOn: dateConversion(element.submittedOn),\n      datasetType: getDatasetName(element.datasetType),\n      status: element.status\n    });\n    !statusFilter.includes(element.status) && statusFilter.push(element.status);\n    !datatypeFilter.includes(element.datasetName) && datatypeFilter.push(getDatasetName(element.datasetType));\n\n    if (element.status === \"In-Progress\" || element.status === \"Pending\") {\n      refreshStatus = true;\n    }\n  });\n  filter.status = [...new Set(statusFilter)];\n  filter.datasetType = [...new Set(datatypeFilter)];\n  responseData = responseData.reverse();\n  return {\n    responseData,\n    filteredData: responseData,\n    refreshStatus,\n    filter,\n    selectedFilter: {\n      status: [],\n      datasetType: []\n    }\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case C.GET_CONTRIBUTION_LIST:\n      return getContributionList(action.payload);\n\n    case C.CONTRIBUTION_TABLE:\n      return getFilterValue(action.payload, state);\n\n    case C.CLEAR_CONTRIBUTION_LIST:\n      return { ...initialState\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/myContribution.js"],"names":["C","getDatasetName","initialState","responseData","filteredData","refreshStatus","filter","status","datasetType","selectedFilter","dateConversion","value","myDate","Date","result","toLocaleString","day","month","year","hour","minute","second","hour12","toUpperCase","getFilterValue","payload","data","filterValues","statusFilter","filterResult","hasOwnProperty","length","includes","getContributionList","datatypeFilter","forEach","element","push","submitRefNumber","serviceRequestNumber","datasetName","submittedOn","Set","reverse","reducer","state","action","type","GET_CONTRIBUTION_LIST","CONTRIBUTION_TABLE","CLEAR_CONTRIBUTION_LIST"],"mappings":"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","sourcesContent":["import C from '../../../actions/constants';\nimport getDatasetName from '../../../../utils/getDataset';\nconst initialState = {\n    responseData: [],\n    filteredData:[],\n    refreshStatus:false,\n    filter : {status:[],datasetType:[]},\n    selectedFilter : {status:[],datasetType:[]},\n}\n\nconst dateConversion = (value) =>{\n    \n    var myDate = new Date(value);\n    let result = (myDate.toLocaleString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true }))\n    return result.toUpperCase();\n}\n\nconst getFilterValue = (payload, data) =>{\n   \n    let {filterValues}= payload\n    let statusFilter = []\n    let filterResult = []\n    if(filterValues.hasOwnProperty(\"status\") && filterValues.status.length>0){\n        statusFilter = data.responseData.filter(value =>{ \n            if(filterValues.status.includes(value.status)){\n                return value\n            }\n    })\n    \n}else{\n    statusFilter = data.responseData\n}\nif(filterValues.hasOwnProperty(\"datasetType\") && filterValues.datasetType.length>0){\n    filterResult = statusFilter.filter(value=>{\n        if(filterValues.datasetType.includes(value.datasetType)){\n            return value\n        }\n    })\n}\nelse{\n    filterResult = statusFilter\n}\ndata.filteredData = filterResult;\ndata.selectedFilter = filterValues;\n    \n}\n\nconst getContributionList = (payload) => {\n    let responseData = [];\n    let statusFilter = [];\n    let datatypeFilter = [];\n    let filter = {status:[],datasetType:[]}\n    let refreshStatus = false;\n    payload.forEach(element => {\n        responseData.push(\n            {\n                     submitRefNumber      : element.serviceRequestNumber,\n                     datasetName          : element.datasetName,\n                     submittedOn          : dateConversion(element.submittedOn),\n                     datasetType :          getDatasetName(element.datasetType),\n                     status               : element.status\n            }\n            \n        )\n        !statusFilter.includes(element.status) && statusFilter.push(element.status)\n        !datatypeFilter.includes(element.datasetName) && datatypeFilter.push(getDatasetName(element.datasetType))\n        if(element.status === \"In-Progress\" || element.status === \"Pending\"){\n            refreshStatus = true\n        }\n    }); \n\n    filter.status = [...(new Set(statusFilter))];\n    filter.datasetType = [...(new Set(datatypeFilter))];\n\n\n    responseData = responseData.reverse()\n    return {responseData ,filteredData:responseData, refreshStatus, filter, selectedFilter:{status:[],datasetType:[]}};\n}\n\nconst reducer = (state = initialState, action) => {\n    \n    switch (action.type) {\n\n        case C.GET_CONTRIBUTION_LIST:\n            return getContributionList(action.payload);\n            case C.CONTRIBUTION_TABLE:\n                return getFilterValue(action.payload, state);\n        case C.CLEAR_CONTRIBUTION_LIST:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}