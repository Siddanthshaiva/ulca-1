{"ast":null,"code":"import C from '../../../actions/constants';\nimport getDatasetName from '../../../../utils/getDataset';\nconst initialState = {\n  responseData: [],\n  filteredData: [],\n  refreshStatus: false,\n  filter: {\n    status: [],\n    datasetType: []\n  },\n  selectedFilter: {\n    status: [],\n    datasetType: []\n  }\n};\n\nconst dateConversion = value => {\n  var myDate = new Date(value);\n  let result = myDate.toLocaleString('en-IN', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true\n  });\n  return result.toUpperCase();\n};\n\nconst getFilterValue = payload => {\n  debugger;\n  let filterKeys = Object.keys(payload.filterValues);\n  payload.data.filter(value => {\n    console.log(value);\n  });\n  return null;\n};\n\nconst getContributionList = payload => {\n  let responseData = [];\n  let statusFilter = [];\n  let datatypeFilter = [];\n  let filter = {\n    status: [],\n    datasetType: []\n  };\n  let refreshStatus = false;\n  payload.forEach(element => {\n    responseData.push({\n      submitRefNumber: element.serviceRequestNumber,\n      datasetName: element.datasetName,\n      submittedOn: dateConversion(element.submittedOn),\n      datasetType: getDatasetName(element.datasetType),\n      status: element.status\n    });\n    !statusFilter.includes(element.status) && statusFilter.push(element.status);\n    !datatypeFilter.includes(element.datasetName) && datatypeFilter.push(getDatasetName(element.datasetType));\n\n    if (element.status === \"In-Progress\" || element.status === \"Pending\") {\n      refreshStatus = true;\n    }\n  });\n  filter.status = [...new Set(statusFilter)];\n  filter.datasetType = [...new Set(datatypeFilter)];\n  responseData = responseData.reverse();\n  return {\n    responseData,\n    filteredData: responseData,\n    refreshStatus,\n    filter,\n    selectedFilter: {\n      status: [],\n      datasetType: []\n    }\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case C.GET_CONTRIBUTION_LIST:\n      return getContributionList(action.payload);\n\n    case C.CONTRIBUTION_TABLE:\n      return getFilterValue(action.payload);\n\n    case C.CLEAR_CONTRIBUTION_LIST:\n      return { ...initialState\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/myContribution.js"],"names":["C","getDatasetName","initialState","responseData","filteredData","refreshStatus","filter","status","datasetType","selectedFilter","dateConversion","value","myDate","Date","result","toLocaleString","day","month","year","hour","minute","second","hour12","toUpperCase","getFilterValue","payload","filterKeys","Object","keys","filterValues","data","console","log","getContributionList","statusFilter","datatypeFilter","forEach","element","push","submitRefNumber","serviceRequestNumber","datasetName","submittedOn","includes","Set","reverse","reducer","state","action","type","GET_CONTRIBUTION_LIST","CONTRIBUTION_TABLE","CLEAR_CONTRIBUTION_LIST"],"mappings":"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","sourcesContent":["import C from '../../../actions/constants';\nimport getDatasetName from '../../../../utils/getDataset';\nconst initialState = {\n    responseData: [],\n    filteredData:[],\n    refreshStatus:false,\n    filter : {status:[],datasetType:[]},\n    selectedFilter : {status:[],datasetType:[]},\n}\n\nconst dateConversion = (value) =>{\n    \n    var myDate = new Date(value);\n    let result = (myDate.toLocaleString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true }))\n    return result.toUpperCase();\n}\n\nconst getFilterValue = (payload) =>{\n    debugger\n    let filterKeys = Object.keys(payload.filterValues)\n   \n    payload.data.filter(value =>{\n        console.log(value)\n    })\n    return null\n}\n\nconst getContributionList = (payload) => {\n    let responseData = [];\n    let statusFilter = [];\n    let datatypeFilter = [];\n    let filter = {status:[],datasetType:[]}\n    let refreshStatus = false;\n    payload.forEach(element => {\n        responseData.push(\n            {\n                     submitRefNumber      : element.serviceRequestNumber,\n                     datasetName          : element.datasetName,\n                     submittedOn          : dateConversion(element.submittedOn),\n                     datasetType :          getDatasetName(element.datasetType),\n                     status               : element.status\n            }\n            \n        )\n        !statusFilter.includes(element.status) && statusFilter.push(element.status)\n        !datatypeFilter.includes(element.datasetName) && datatypeFilter.push(getDatasetName(element.datasetType))\n        if(element.status === \"In-Progress\" || element.status === \"Pending\"){\n            refreshStatus = true\n        }\n    }); \n\n    filter.status = [...(new Set(statusFilter))];\n    filter.datasetType = [...(new Set(datatypeFilter))];\n\n\n    responseData = responseData.reverse()\n    return {responseData ,filteredData:responseData, refreshStatus, filter, selectedFilter:{status:[],datasetType:[]}};\n}\n\nconst reducer = (state = initialState, action) => {\n    \n    switch (action.type) {\n\n        case C.GET_CONTRIBUTION_LIST:\n            return getContributionList(action.payload);\n            case C.CONTRIBUTION_TABLE:\n                return getFilterValue(action.payload);\n        case C.CLEAR_CONTRIBUTION_LIST:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}