{"ast":null,"code":"import C from '../../../actions/constants';\nconst initialState = {\n  responseData: []\n};\n\nconst getDetailedReport = payload => {\n  let responseData = [];\n  let refreshStatus = false;\n  payload.forEach(element => {\n    responseData.push({\n      srNo: element.serviceRequestNumber,\n      datasetId: element.datasetName,\n      recordCount: element.datasetName,\n      failedCount: element.datasetName,\n      stage: dateConversion(element.submittedOn),\n      status: element.status === \"INPROGRESS\" ? \"In-Progress\" : element.status === \"NOTSTARTED\" ? \"Not Started\" : element.status === \"PUBLISHED\" ? \"Published\" : element.status === \"FAILED\" ? \"Failed\" : element.status.toLowerCase()\n    });\n\n    if (element.status === \"INPROGRESS\" || \"NOTSTARTED\") {\n      refreshStatus = true;\n    }\n  });\n  responseData = responseData.reverse();\n  return {\n    responseData,\n    refreshStatus\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case C.GET_DETAILED_REPORT:\n      return {\n        responseData: getDetailedReport(action.payload)\n      };\n\n    case C.CLEAR_USER_EVENT:\n      return { ...initialState\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/DetailedDataSet.js"],"names":["C","initialState","responseData","getDetailedReport","payload","refreshStatus","forEach","element","push","srNo","serviceRequestNumber","datasetId","datasetName","recordCount","failedCount","stage","dateConversion","submittedOn","status","toLowerCase","reverse","reducer","state","action","type","GET_DETAILED_REPORT","CLEAR_USER_EVENT"],"mappings":"AAAA,OAAOA,CAAP,MAAc,4BAAd;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE;AADG,CAArB;;AAMA,MAAMC,iBAAiB,GAAIC,OAAD,IAAa;AACnC,MAAIF,YAAY,GAAG,EAAnB;AACA,MAAIG,aAAa,GAAG,KAApB;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAgBC,OAAO,IAAI;AACvBL,IAAAA,YAAY,CAACM,IAAb,CACI;AACIC,MAAAA,IAAI,EAAQF,OAAO,CAACG,oBADxB;AAESC,MAAAA,SAAS,EAAYJ,OAAO,CAACK,WAFtC;AAGSC,MAAAA,WAAW,EAAWN,OAAO,CAACK,WAHvC;AAISE,MAAAA,WAAW,EAAYP,OAAO,CAACK,WAJxC;AAKSG,MAAAA,KAAK,EAAYC,cAAc,CAACT,OAAO,CAACU,WAAT,CALxC;AAMSC,MAAAA,MAAM,EAAiBX,OAAO,CAACW,MAAR,KAAmB,YAAnB,GAAkC,aAAlC,GAAkDX,OAAO,CAACW,MAAR,KAAmB,YAAnB,GAAkC,aAAlC,GAAkDX,OAAO,CAACW,MAAR,KAAmB,WAAnB,GAAgC,WAAhC,GAA8CX,OAAO,CAACW,MAAR,KAAmB,QAAnB,GAA6B,QAA7B,GAAyCX,OAAO,CAACW,MAAR,CAAeC,WAAf;AAN3N,KADJ;;AAUA,QAAGZ,OAAO,CAACW,MAAR,KAAmB,YAAnB,IAAmC,YAAtC,EAAmD;AAC/Cb,MAAAA,aAAa,GAAG,IAAhB;AACH;AACJ,GAdD;AAeAH,EAAAA,YAAY,GAAGA,YAAY,CAACkB,OAAb,EAAf;AACA,SAAO;AAAClB,IAAAA,YAAD;AAAgBG,IAAAA;AAAhB,GAAP;AACH,CApBD;;AAuBA,MAAMgB,OAAO,GAAG,CAACC,KAAK,GAAGrB,YAAT,EAAuBsB,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKxB,CAAC,CAACyB,mBAAP;AACI,aAAO;AACHvB,QAAAA,YAAY,EAAEC,iBAAiB,CAACoB,MAAM,CAACnB,OAAR;AAD5B,OAAP;;AAGJ,SAAKJ,CAAC,CAAC0B,gBAAP;AACI,aAAO,EACH,GAAGzB;AADA,OAAP;;AAGJ;AACI,aAAO,EACH,GAAGqB;AADA,OAAP;AAVR;AAcH,CAfD;;AAiBA,eAAeD,OAAf","sourcesContent":["import C from '../../../actions/constants';\n\nconst initialState = {\n    responseData: []\n}\n\n\n\nconst getDetailedReport = (payload) => {\n    let responseData = [];\n    let refreshStatus = false;\n    payload.forEach(element => {\n        responseData.push(\n            {\n                srNo      : element.serviceRequestNumber,\n                     datasetId          : element.datasetName,\n                     recordCount         : element.datasetName,\n                     failedCount          : element.datasetName,\n                     stage          : dateConversion(element.submittedOn),\n                     status               : element.status === \"INPROGRESS\" ? \"In-Progress\" : element.status === \"NOTSTARTED\" ? \"Not Started\" : element.status === \"PUBLISHED\"? \"Published\" : element.status === \"FAILED\"? \"Failed\" : (element.status.toLowerCase())\n            }\n        )\n        if(element.status === \"INPROGRESS\" || \"NOTSTARTED\"){\n            refreshStatus = true\n        }\n    }); \n    responseData = responseData.reverse()\n    return {responseData , refreshStatus};\n}\n\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case C.GET_DETAILED_REPORT:\n            return {\n                responseData: getDetailedReport(action.payload)  \n            }\n        case C.CLEAR_USER_EVENT:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}