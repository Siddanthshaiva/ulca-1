{"ast":null,"code":"import C from '../../../actions/constants';\nimport getDatasetName from '../../../../utils/getDataset';\nconst initialState = {\n  responseData: []\n};\n\nconst dateConversion = value => {\n  var myDate = new Date(value);\n  let result = myDate.toLocaleString('en-IN', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true\n  });\n  return result.toUpperCase();\n};\n\nconst getContributionList = payload => {\n  let responseData = [];\n  let statusFilter = [];\n  let datatypeFilter = [];\n  let filter = {\n    status: [],\n    datasetType: []\n  };\n  let refreshStatus = false;\n  payload.forEach(element => {\n    responseData.push({\n      submitRefNumber: element.serviceRequestNumber,\n      datasetName: element.datasetName,\n      submittedOn: dateConversion(element.submittedOn),\n      datasetType: getDatasetName(element.datasetType),\n      status: element.status\n    });\n    !statusFilter.includes(element.status) && statusFilter.push(element.status);\n    !datatypeFilter.includes(element.datasetName) && datatypeFilter.push(element.datasetName);\n\n    if (element.status === \"In-Progress\" || \"Pending\") {\n      refreshStatus = true;\n    }\n  });\n  statusFilter.forEach(value => filter.status.push({\n    \"name\": value,\n    \"state\": false\n  }));\n  datatypeFilter.forEach(value => filter.datasetType.push({\n    \"name\": value,\n    \"state\": false\n  }));\n  responseData = responseData.reverse();\n  return {\n    responseData,\n    filteredData: responseData,\n    refreshStatus,\n    filter\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case C.GET_CONTRIBUTION_LIST:\n      return getContributionList(action.payload);\n\n    case C.CLEAR_CONTRIBUTION_LIST:\n      return { ...initialState\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/myContribution.js"],"names":["C","getDatasetName","initialState","responseData","dateConversion","value","myDate","Date","result","toLocaleString","day","month","year","hour","minute","second","hour12","toUpperCase","getContributionList","payload","statusFilter","datatypeFilter","filter","status","datasetType","refreshStatus","forEach","element","push","submitRefNumber","serviceRequestNumber","datasetName","submittedOn","includes","reverse","filteredData","reducer","state","action","type","GET_CONTRIBUTION_LIST","CLEAR_CONTRIBUTION_LIST"],"mappings":"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","sourcesContent":["import C from '../../../actions/constants';\nimport getDatasetName from '../../../../utils/getDataset';\nconst initialState = {\n    responseData: []\n}\n\nconst dateConversion = (value) =>{\n    \n    var myDate = new Date(value);\n    let result = (myDate.toLocaleString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true }))\n    return result.toUpperCase();\n}\n\nconst getContributionList = (payload) => {\n    let responseData = [];\n    let statusFilter = [];\n    let datatypeFilter = [];\n    let filter = {status:[],datasetType:[]}\n    let refreshStatus = false;\n    payload.forEach(element => {\n        responseData.push(\n            {\n                     submitRefNumber      : element.serviceRequestNumber,\n                     datasetName          : element.datasetName,\n                     submittedOn          : dateConversion(element.submittedOn),\n                     datasetType :          getDatasetName(element.datasetType),\n                     status               : element.status\n            }\n            \n        )\n        !statusFilter.includes(element.status) && statusFilter.push(element.status)\n        !datatypeFilter.includes(element.datasetName) && datatypeFilter.push(element.datasetName)\n        if(element.status === \"In-Progress\" || \"Pending\"){\n            refreshStatus = true\n        }\n    }); \n\nstatusFilter.forEach(value =>  filter.status.push({\"name\":value, \"state\":false}))\ndatatypeFilter.forEach(value =>  filter.datasetType.push({\"name\":value, \"state\":false}))\n    responseData = responseData.reverse()\n    return {responseData ,filteredData:responseData, refreshStatus, filter};\n}\n\nconst reducer = (state = initialState, action) => {\n    \n    switch (action.type) {\n\n        case C.GET_CONTRIBUTION_LIST:\n            return getContributionList(action.payload);\n        case C.CLEAR_CONTRIBUTION_LIST:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}