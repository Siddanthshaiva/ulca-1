{"ast":null,"code":"import C from '../../../actions/constants';\nimport getLanguageLabel from '../../../../utils/getLabel';\nconst initialState = {\n  responseData: []\n};\n\nconst dateConversion = value => {\n  var myDate = new Date(value);\n  let result = myDate.toLocaleString('en-US', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true\n  });\n  return result;\n};\n\nconst getMySearches = payload => {\n  let newArr = [];\n  debugger;\n  payload.forEach(element => {\n    console.log(\"------------\", element.searchCriteria.targetLanguage);\n\n    if (element.searchCriteria) {\n      let dataSet = element.searchCriteria.datasetType === \"parallel-corpus\" ? \"Parallel Dataset\" : element.searchCriteria.datasetType;\n      let langauge = element.searchCriteria.sourceLanguage && getLanguageLabel(element.searchCriteria.sourceLanguage).map(val => val.label)[0];\n      let tLanguage = element.searchCriteria.targetLanguage && getLanguageLabel(element.searchCriteria.targetLanguage).map(val => val.label).join(', ');\n      let searchDetails = JSON.parse(element.status[0].details);\n      newArr.push({\n        sr_no: element.serviceRequestNumber,\n        search_criteria: `${dataSet} | ${langauge} | ${tLanguage}`,\n        searched_on: dateConversion(element.timestamp),\n        status: element.status[0].status === \"successful\" ? \"Completed\" : element.status[0].status === \"inprogress\" ? \"In-Progress\" : element.status[0].status,\n        count: searchDetails.count,\n        sampleUrl: searchDetails.datasetSample,\n        downloadUrl: searchDetails.dataset,\n        sourceLanguage: element.searchCriteria.sourceLanguage,\n        targetLanguage: element.searchCriteria.targetLanguage,\n        datasetType: dataSet\n      });\n    }\n  });\n  newArr = newArr.reverse();\n  return newArr;\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case C.GET_MY_REPORT:\n      return {\n        responseData: getMySearches(action.payload)\n      };\n\n    case C.CLEAR_USER_EVENT:\n      return { ...initialState\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetSearch/MySearches.js"],"names":["C","getLanguageLabel","initialState","responseData","dateConversion","value","myDate","Date","result","toLocaleString","day","month","year","hour","minute","second","hour12","getMySearches","payload","newArr","forEach","element","console","log","searchCriteria","targetLanguage","dataSet","datasetType","langauge","sourceLanguage","map","val","label","tLanguage","join","searchDetails","JSON","parse","status","details","push","sr_no","serviceRequestNumber","search_criteria","searched_on","timestamp","count","sampleUrl","datasetSample","downloadUrl","dataset","reverse","reducer","state","action","type","GET_MY_REPORT","CLEAR_USER_EVENT"],"mappings":"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","sourcesContent":["import C from '../../../actions/constants';\nimport getLanguageLabel from '../../../../utils/getLabel';\n\nconst initialState = {\n    responseData: []\n}\n\n\nconst dateConversion = (value) =>{\n    \n    var myDate = new Date(value);\n    let result = (myDate.toLocaleString('en-US', { day: '2-digit', month: '2-digit', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true }))\n    return result;\n}\n\n\nconst getMySearches = (payload) => {\n    let newArr = []\n    debugger\n    payload.forEach(element =>{\n        console.log(\"------------\",element.searchCriteria.targetLanguage)\n        if(element.searchCriteria){\n            let dataSet  = element.searchCriteria.datasetType === \"parallel-corpus\" ? \"Parallel Dataset\" : element.searchCriteria.datasetType;\n            let langauge =element.searchCriteria.sourceLanguage && getLanguageLabel(element.searchCriteria.sourceLanguage).map(val=>val.label)[0]\n            let tLanguage = element.searchCriteria.targetLanguage && getLanguageLabel(element.searchCriteria.targetLanguage).map(val=>val.label).join(', ')\n            let searchDetails = JSON.parse(element.status[0].details)\n            newArr.push(\n                {\n                    sr_no : element.serviceRequestNumber,\n                    search_criteria :`${dataSet} | ${langauge} | ${tLanguage}`,\n                    searched_on   : dateConversion(element.timestamp),\n                    status      : element.status[0].status === \"successful\" ? \"Completed\" : element.status[0].status === \"inprogress\" ? \"In-Progress\": element.status[0].status,\n                    count : searchDetails.count,\n                    sampleUrl : searchDetails.datasetSample,\n                    downloadUrl : searchDetails.dataset,\n                    sourceLanguage : element.searchCriteria.sourceLanguage,\n                    targetLanguage : element.searchCriteria.targetLanguage,\n                    datasetType : dataSet\n\n                }\n                \n            )\n            \n        }\n        \n    })\n    newArr = newArr.reverse()\n    \n    return newArr;\n}\n\n const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case C.GET_MY_REPORT:\n            return {\n                responseData: getMySearches(action.payload)  \n            }\n        case C.CLEAR_USER_EVENT:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}