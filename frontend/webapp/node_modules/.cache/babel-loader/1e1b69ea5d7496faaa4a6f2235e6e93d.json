{"ast":null,"code":"import C from '../../../actions/constants';\nconst initialState = {\n  responseData: []\n}; //{\"CurrentRecordIndex\": 2, \"ProcessedCount\": [{\"Type\": \"Success\", \"Count\": 3}, {\"Type\": \"Failed\", \"TypeDetails\": {}, \"Count\": 0}], \"TimeStamp\": \"2021-06-12 11:47:23.861540\"}\n\nconst getRecordCount = value => {\n  debugger;\n  var countDetails = {};\n  value.ProcessedCount.length > 0 && value.ProcessedCount.forEach(element => {\n    if (element.Type === \"Success\") {\n      success = element.Count;\n    } else if (element.Type === \"Failed\") {\n      failed = element.Count;\n    }\n  });\n  console.log(countDetails);\n  return countDetails;\n};\n\nconst getDetailedReport = payload => {\n  let responseData = [];\n  let refreshStatus = false;\n  payload.forEach(element => {\n    debugger;\n    let count = element.details ? getRecordCount(element.details) : \"\";\n    responseData.push({\n      srNo: element.serviceRequestNumber,\n      datasetId: element.datasetName,\n      recordCount: count && count.success,\n      failedCount: count && count.failed,\n      stage: element.tool,\n      status: element.status\n    });\n\n    if (element.status === \"INPROGRESS\" || \"NOTSTARTED\") {\n      refreshStatus = true;\n    }\n  });\n  debugger;\n  return {\n    responseData,\n    refreshStatus\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case C.GET_DETAILED_REPORT:\n      return getDetailedReport(action.payload);\n\n    case C.CLEAR_DETAILED_REPORT:\n      return { ...initialState\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/DetailedDataSet.js"],"names":["C","initialState","responseData","getRecordCount","value","countDetails","ProcessedCount","length","forEach","element","Type","success","Count","failed","console","log","getDetailedReport","payload","refreshStatus","count","details","push","srNo","serviceRequestNumber","datasetId","datasetName","recordCount","failedCount","stage","tool","status","reducer","state","action","type","GET_DETAILED_REPORT","CLEAR_DETAILED_REPORT"],"mappings":"AAAA,OAAOA,CAAP,MAAc,4BAAd;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE;AADG,CAArB,C,CAKA;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IACvB;AAEI;AAEA,MAAIC,YAAY,GAAG,EAAnB;AACAD,EAAAA,KAAK,CAACE,cAAN,CAAqBC,MAArB,GAA6B,CAA7B,IAAkCH,KAAK,CAACE,cAAN,CAAqBE,OAArB,CAA6BC,OAAO,IAAG;AACrE,QAAGA,OAAO,CAACC,IAAR,KAAe,SAAlB,EAA4B;AACxBC,MAAAA,OAAO,GAAGF,OAAO,CAACG,KAAlB;AACH,KAFD,MAGK,IAAGH,OAAO,CAACC,IAAR,KAAe,QAAlB,EAA2B;AAC5BG,MAAAA,MAAM,GAAGJ,OAAO,CAACG,KAAjB;AACH;AACJ,GAPiC,CAAlC;AASAE,EAAAA,OAAO,CAACC,GAAR,CAAYV,YAAZ;AAEA,SAAOA,YAAP;AAEH,CAnBD;;AAqBA,MAAMW,iBAAiB,GAAIC,OAAD,IAAa;AAEnC,MAAIf,YAAY,GAAG,EAAnB;AACA,MAAIgB,aAAa,GAAG,KAApB;AACAD,EAAAA,OAAO,CAACT,OAAR,CAAgBC,OAAO,IAAI;AACvB;AACA,QAAIU,KAAK,GAAGV,OAAO,CAACW,OAAR,GAAkBjB,cAAc,CAACM,OAAO,CAACW,OAAT,CAAhC,GAAkD,EAA9D;AACAlB,IAAAA,YAAY,CAACmB,IAAb,CACI;AACQC,MAAAA,IAAI,EAAsBb,OAAO,CAACc,oBAD1C;AAESC,MAAAA,SAAS,EAAgBf,OAAO,CAACgB,WAF1C;AAGSC,MAAAA,WAAW,EAAcP,KAAK,IAAIA,KAAK,CAACR,OAHjD;AAISgB,MAAAA,WAAW,EAAcR,KAAK,IAAIA,KAAK,CAACN,MAJjD;AAKSe,MAAAA,KAAK,EAAoBnB,OAAO,CAACoB,IAL1C;AAMSC,MAAAA,MAAM,EAAmBrB,OAAO,CAACqB;AAN1C,KADJ;;AAUA,QAAGrB,OAAO,CAACqB,MAAR,KAAmB,YAAnB,IAAmC,YAAtC,EAAmD;AAC/CZ,MAAAA,aAAa,GAAG,IAAhB;AACH;AACJ,GAhBD;AAkBA;AACA,SAAO;AAAChB,IAAAA,YAAD;AAAgBgB,IAAAA;AAAhB,GAAP;AACH,CAxBD;;AA2BA,MAAMa,OAAO,GAAG,CAACC,KAAK,GAAG/B,YAAT,EAAuBgC,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKlC,CAAC,CAACmC,mBAAP;AACI,aAAQnB,iBAAiB,CAACiB,MAAM,CAAChB,OAAR,CAAzB;;AAEJ,SAAKjB,CAAC,CAACoC,qBAAP;AACI,aAAO,EACH,GAAGnC;AADA,OAAP;;AAGJ;AACI,aAAO,EACH,GAAG+B;AADA,OAAP;AATR;AAaH,CAdD;;AAgBA,eAAeD,OAAf","sourcesContent":["import C from '../../../actions/constants';\n\nconst initialState = {\n    responseData: []\n}\n\n\n//{\"CurrentRecordIndex\": 2, \"ProcessedCount\": [{\"Type\": \"Success\", \"Count\": 3}, {\"Type\": \"Failed\", \"TypeDetails\": {}, \"Count\": 0}], \"TimeStamp\": \"2021-06-12 11:47:23.861540\"}\n\nconst getRecordCount = (value) =>\n{\n\n    debugger\n\n    var countDetails = {}\n    value.ProcessedCount.length> 0 && value.ProcessedCount.forEach(element =>{\n        if(element.Type===\"Success\"){\n            success = element.Count;\n        }\n        else if(element.Type===\"Failed\"){\n            failed = element.Count;\n        }\n    })\n\n    console.log(countDetails)\n\n    return countDetails;\n\n}\n\nconst getDetailedReport = (payload) => {\n    \n    let responseData = [];\n    let refreshStatus = false;\n    payload.forEach(element => {\n        debugger\n        let count = element.details ? getRecordCount(element.details):\"\"\n        responseData.push(\n            {\n                    srNo                    : element.serviceRequestNumber,\n                     datasetId              : element.datasetName,\n                     recordCount            : count && count.success,\n                     failedCount            : count && count.failed,\n                     stage                  : element.tool,\n                     status                 : element.status \n                    }\n        )\n        if(element.status === \"INPROGRESS\" || \"NOTSTARTED\"){\n            refreshStatus = true\n        }\n    }); \n\n    debugger\n    return {responseData , refreshStatus};\n}\n\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case C.GET_DETAILED_REPORT:\n            return  getDetailedReport(action.payload)  \n            \n        case C.CLEAR_DETAILED_REPORT:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}