{"ast":null,"code":"import C from '../../../actions/constants';\nconst initialState = {\n  responseData: []\n};\n\nconst dateConversion = value => {\n  var myDate = new Date(value);\n  let result = myDate.toLocaleString('en-IN', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true\n  });\n  return result.toUpperCase();\n};\n\nconst getContributionList = payload => {\n  debugger;\n  let responseData = [];\n  let refreshStatus = false;\n  payload.forEach(element => {\n    responseData.push({\n      submitRefNumber: element.serviceRequestNumber,\n      datasetName: element.datasetName,\n      submittedOn: dateConversion(element.submittedOn),\n      datasetType: element.datasetName,\n      status: element.status === \"inprogress\" ? \"In-Progress\" : element.status === \"notstarted\" ? \"Not Started\" : element.status === \"successful\" ? \"Completed\" : element.status.toLowerCase()\n    });\n\n    if (element.status === \"INPROGRESS\" || \"NOTSTARTED\") {\n      refreshStatus = true;\n    }\n  });\n  responseData = responseData.reverse();\n  return {\n    responseData,\n    refreshStatus\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case C.GET_CONTRIBUTION_LIST:\n      return getContributionList(action.payload);\n\n    case C.CLEAR_CONTRIBUTION_LIST:\n      return { ...initialState\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/myContribution.js"],"names":["C","initialState","responseData","dateConversion","value","myDate","Date","result","toLocaleString","day","month","year","hour","minute","second","hour12","toUpperCase","getContributionList","payload","refreshStatus","forEach","element","push","submitRefNumber","serviceRequestNumber","datasetName","submittedOn","datasetType","status","toLowerCase","reverse","reducer","state","action","type","GET_CONTRIBUTION_LIST","CLEAR_CONTRIBUTION_LIST"],"mappings":"AAAA,OAAOA,CAAP,MAAc,4BAAd;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE;AADG,CAArB;;AAIA,MAAMC,cAAc,GAAIC,KAAD,IAAU;AAE7B,MAAIC,MAAM,GAAG,IAAIC,IAAJ,CAASF,KAAT,CAAb;AACA,MAAIG,MAAM,GAAIF,MAAM,CAACG,cAAP,CAAsB,OAAtB,EAA+B;AAAEC,IAAAA,GAAG,EAAE,SAAP;AAAkBC,IAAAA,KAAK,EAAE,SAAzB;AAAoCC,IAAAA,IAAI,EAAE,SAA1C;AAAqDC,IAAAA,IAAI,EAAE,SAA3D;AAAsEC,IAAAA,MAAM,EAAE,SAA9E;AAAyFC,IAAAA,MAAM,EAAE,SAAjG;AAA4GC,IAAAA,MAAM,EAAE;AAApH,GAA/B,CAAd;AACA,SAAOR,MAAM,CAACS,WAAP,EAAP;AACH,CALD;;AAOA,MAAMC,mBAAmB,GAAIC,OAAD,IAAa;AACrC;AACA,MAAIhB,YAAY,GAAG,EAAnB;AACA,MAAIiB,aAAa,GAAG,KAApB;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAgBC,OAAO,IAAI;AACvBnB,IAAAA,YAAY,CAACoB,IAAb,CACI;AACSC,MAAAA,eAAe,EAAQF,OAAO,CAACG,oBADxC;AAESC,MAAAA,WAAW,EAAYJ,OAAO,CAACI,WAFxC;AAGSC,MAAAA,WAAW,EAAYvB,cAAc,CAACkB,OAAO,CAACK,WAAT,CAH9C;AAISC,MAAAA,WAAW,EAAYN,OAAO,CAACI,WAJxC;AAKSG,MAAAA,MAAM,EAAiBP,OAAO,CAACO,MAAR,KAAmB,YAAnB,GAAkC,aAAlC,GAAkDP,OAAO,CAACO,MAAR,KAAmB,YAAnB,GAAkC,aAAlC,GAAkDP,OAAO,CAACO,MAAR,KAAmB,YAAnB,GAAiC,WAAjC,GAAgDP,OAAO,CAACO,MAAR,CAAeC,WAAf;AALpL,KADJ;;AASA,QAAGR,OAAO,CAACO,MAAR,KAAmB,YAAnB,IAAmC,YAAtC,EAAmD;AAC/CT,MAAAA,aAAa,GAAG,IAAhB;AACH;AACJ,GAbD;AAcAjB,EAAAA,YAAY,GAAGA,YAAY,CAAC4B,OAAb,EAAf;AACA,SAAO;AAAC5B,IAAAA,YAAD;AAAgBiB,IAAAA;AAAhB,GAAP;AACH,CApBD;;AAsBA,MAAMY,OAAO,GAAG,CAACC,KAAK,GAAG/B,YAAT,EAAuBgC,MAAvB,KAAkC;AAE9C,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKlC,CAAC,CAACmC,qBAAP;AACI,aAAOlB,mBAAmB,CAACgB,MAAM,CAACf,OAAR,CAA1B;;AACJ,SAAKlB,CAAC,CAACoC,uBAAP;AACI,aAAO,EACH,GAAGnC;AADA,OAAP;;AAGJ;AACI,aAAO,EACH,GAAG+B;AADA,OAAP;AATR;AAaH,CAfD;;AAiBA,eAAeD,OAAf","sourcesContent":["import C from '../../../actions/constants';\n\nconst initialState = {\n    responseData: []\n}\n\nconst dateConversion = (value) =>{\n    \n    var myDate = new Date(value);\n    let result = (myDate.toLocaleString('en-IN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true }))\n    return result.toUpperCase();\n}\n\nconst getContributionList = (payload) => {\n    debugger\n    let responseData = [];\n    let refreshStatus = false;\n    payload.forEach(element => {\n        responseData.push(\n            {\n                     submitRefNumber      : element.serviceRequestNumber,\n                     datasetName          : element.datasetName,\n                     submittedOn          : dateConversion(element.submittedOn),\n                     datasetType :          element.datasetName,\n                     status               : element.status === \"inprogress\" ? \"In-Progress\" : element.status === \"notstarted\" ? \"Not Started\" : element.status === \"successful\"? \"Completed\" : (element.status.toLowerCase())\n            }\n        )\n        if(element.status === \"INPROGRESS\" || \"NOTSTARTED\"){\n            refreshStatus = true\n        }\n    }); \n    responseData = responseData.reverse()\n    return {responseData , refreshStatus};\n}\n\nconst reducer = (state = initialState, action) => {\n    \n    switch (action.type) {\n\n        case C.GET_CONTRIBUTION_LIST:\n            return getContributionList(action.payload);\n        case C.CLEAR_CONTRIBUTION_LIST:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}