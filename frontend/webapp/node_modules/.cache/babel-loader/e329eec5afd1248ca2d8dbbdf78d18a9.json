{"ast":null,"code":"import C from '../../../actions/constants';\nconst initialState = {\n  responseData: []\n}; //{\"CurrentRecordIndex\": 2, \"ProcessedCount\": [{\"Type\": \"Success\", \"Count\": 3}, {\"Type\": \"Failed\", \"TypeDetails\": {}, \"Count\": 0}], \"TimeStamp\": \"2021-06-12 11:47:23.861540\"}\n\nconst getRecordCount = value => {\n  var countDetails = {};\n  value.ProcessedCount.forEach(element => {\n    if (element.Type === \"Success\") {\n      countDetails[\"success\"] = element.Count;\n    } else if (element.Type === \"Failed\") {\n      countDetails[\"failed\"] = element.Count;\n    }\n  });\n};\n\nconst getDetailedReport = payload => {\n  let responseData = [];\n  let refreshStatus = false;\n  payload.forEach(element => {\n    let count = getRecordCount(element);\n    responseData.push({\n      srNo: element.serviceRequestNumber,\n      datasetId: element.datasetName,\n      recordCount: count.success,\n      failedCount: count.failed,\n      stage: element.tool,\n      status: element.status\n    });\n\n    if (element.status === \"INPROGRESS\" || \"NOTSTARTED\") {\n      refreshStatus = true;\n    }\n  });\n  debugger;\n  return {\n    responseData,\n    refreshStatus\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case C.GET_DETAILED_REPORT:\n      return getDetailedReport(action.payload);\n\n    case C.CLEAR_DETAILED_REPORT:\n      return { ...initialState\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/redux/reducers/DataSet/DatasetView/DetailedDataSet.js"],"names":["C","initialState","responseData","getRecordCount","value","countDetails","ProcessedCount","forEach","element","Type","Count","getDetailedReport","payload","refreshStatus","count","push","srNo","serviceRequestNumber","datasetId","datasetName","recordCount","success","failedCount","failed","stage","tool","status","reducer","state","action","type","GET_DETAILED_REPORT","CLEAR_DETAILED_REPORT"],"mappings":"AAAA,OAAOA,CAAP,MAAc,4BAAd;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE;AADG,CAArB,C,CAKA;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IACvB;AACI,MAAIC,YAAY,GAAG,EAAnB;AACAD,EAAAA,KAAK,CAACE,cAAN,CAAqBC,OAArB,CAA6BC,OAAO,IAAG;AACnC,QAAGA,OAAO,CAACC,IAAR,KAAe,SAAlB,EAA4B;AACxBJ,MAAAA,YAAY,CAAC,SAAD,CAAZ,GAA0BG,OAAO,CAACE,KAAlC;AACH,KAFD,MAGK,IAAGF,OAAO,CAACC,IAAR,KAAe,QAAlB,EAA2B;AAC5BJ,MAAAA,YAAY,CAAC,QAAD,CAAZ,GAAyBG,OAAO,CAACE,KAAjC;AACH;AACJ,GAPD;AAWH,CAdD;;AAgBA,MAAMC,iBAAiB,GAAIC,OAAD,IAAa;AAEnC,MAAIV,YAAY,GAAG,EAAnB;AACA,MAAIW,aAAa,GAAG,KAApB;AACAD,EAAAA,OAAO,CAACL,OAAR,CAAgBC,OAAO,IAAI;AACvB,QAAIM,KAAK,GAAGX,cAAc,CAACK,OAAD,CAA1B;AACAN,IAAAA,YAAY,CAACa,IAAb,CACI;AACQC,MAAAA,IAAI,EAAsBR,OAAO,CAACS,oBAD1C;AAESC,MAAAA,SAAS,EAAgBV,OAAO,CAACW,WAF1C;AAGSC,MAAAA,WAAW,EAAcN,KAAK,CAACO,OAHxC;AAISC,MAAAA,WAAW,EAAaR,KAAK,CAACS,MAJvC;AAKSC,MAAAA,KAAK,EAAoBhB,OAAO,CAACiB,IAL1C;AAMSC,MAAAA,MAAM,EAAmBlB,OAAO,CAACkB;AAN1C,KADJ;;AAUA,QAAGlB,OAAO,CAACkB,MAAR,KAAmB,YAAnB,IAAmC,YAAtC,EAAmD;AAC/Cb,MAAAA,aAAa,GAAG,IAAhB;AACH;AACJ,GAfD;AAiBA;AACA,SAAO;AAACX,IAAAA,YAAD;AAAgBW,IAAAA;AAAhB,GAAP;AACH,CAvBD;;AA0BA,MAAMc,OAAO,GAAG,CAACC,KAAK,GAAG3B,YAAT,EAAuB4B,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK9B,CAAC,CAAC+B,mBAAP;AACI,aAAQpB,iBAAiB,CAACkB,MAAM,CAACjB,OAAR,CAAzB;;AAEJ,SAAKZ,CAAC,CAACgC,qBAAP;AACI,aAAO,EACH,GAAG/B;AADA,OAAP;;AAGJ;AACI,aAAO,EACH,GAAG2B;AADA,OAAP;AATR;AAaH,CAdD;;AAgBA,eAAeD,OAAf","sourcesContent":["import C from '../../../actions/constants';\n\nconst initialState = {\n    responseData: []\n}\n\n\n//{\"CurrentRecordIndex\": 2, \"ProcessedCount\": [{\"Type\": \"Success\", \"Count\": 3}, {\"Type\": \"Failed\", \"TypeDetails\": {}, \"Count\": 0}], \"TimeStamp\": \"2021-06-12 11:47:23.861540\"}\n\nconst getRecordCount = (value) =>\n{\n    var countDetails = {}\n    value.ProcessedCount.forEach(element =>{\n        if(element.Type===\"Success\"){\n            countDetails[\"success\"] = element.Count;\n        }\n        else if(element.Type===\"Failed\"){\n            countDetails[\"failed\"] = element.Count;\n        }\n    })\n\n    \n\n}\n\nconst getDetailedReport = (payload) => {\n    \n    let responseData = [];\n    let refreshStatus = false;\n    payload.forEach(element => {\n        let count = getRecordCount(element)\n        responseData.push(\n            {\n                    srNo                    : element.serviceRequestNumber,\n                     datasetId              : element.datasetName,\n                     recordCount            : count.success,\n                     failedCount            :count.failed,\n                     stage                  : element.tool,\n                     status                 : element.status \n                    }\n        )\n        if(element.status === \"INPROGRESS\" || \"NOTSTARTED\"){\n            refreshStatus = true\n        }\n    }); \n\n    debugger\n    return {responseData , refreshStatus};\n}\n\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case C.GET_DETAILED_REPORT:\n            return  getDetailedReport(action.payload)  \n            \n        case C.CLEAR_DETAILED_REPORT:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}