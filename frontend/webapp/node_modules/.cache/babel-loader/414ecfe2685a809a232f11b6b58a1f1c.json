{"ast":null,"code":"var _jsxFileName = \"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetView/FilterList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DataSet from \"../../../styles/Dataset\";\nimport { withStyles, Button, Divider, Grid, Typography, Popover, FormGroup, Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FilterList = props => {\n  _s();\n\n  const classes = props; // const [anchorEl, setAnchorEl] = React.useState(null);\n  // const handleChange = (event) => {\n  //     setState({ ...state, [event.target.name]: event.target.checked });\n  // };\n  // const handleClick = (event) => {\n  //     setAnchorEl(event.currentTarget);\n  // };\n  // const handleClose = () => {\n  //     setAnchorEl(null);\n  // };\n  // const open = Boolean(anchorEl);\n  // const id = open ? 'simple-popover' : undefined;\n\n  const data = {\n    datasetType: [{\n      name: 'Parallel',\n      state: true\n    }, {\n      name: 'Monolingual',\n      state: true\n    }, {\n      name: 'ASR',\n      state: true\n    }, {\n      name: 'OCR',\n      state: false\n    }],\n    status: [{\n      name: 'Pending',\n      state: true\n    }, {\n      name: 'In-Progress',\n      state: true\n    }, {\n      name: 'Completed',\n      state: true\n    }, {\n      name: 'Failed',\n      state: false\n    }]\n  };\n  const count = 0;\n  const {\n    filter,\n    selectedFilter,\n    clearAll,\n    apply\n  } = props;\n  const [selectedType, setSelectedType] = useState(selectedFilter.datasetType);\n  const [selectedStatus, setSelectedStatus] = useState(selectedFilter.status);\n\n  const handleDatasetChange = e => {\n    if (e.target.checked) setSelectedType([...selectedType, e.target.name]);else {\n      const selected = Object.assign([], selectedType);\n      const index = selected.indexOf(e.target.name);\n\n      if (index > -1) {\n        selected.splice(index, 1);\n        setSelectedType(selected);\n      }\n    }\n  };\n\n  const handleStatusChange = e => {\n    if (e.target.checked) setSelectedStatus([...selectedStatus, e.target.name]);else {\n      const selected = Object.assign([], selectedStatus);\n      const index = selected.indexOf(e.target.name);\n\n      if (index > -1) {\n        selected.splice(index, 1);\n        setSelectedStatus(selected);\n      }\n    }\n  };\n\n  const handleClearAll = () => {\n    setSelectedStatus([]);\n    setSelectedType([]);\n    clearAll({\n      datasetType: [],\n      status: []\n    });\n  };\n\n  const isChecked = (type, param) => {\n    const index = param === 'status' ? selectedStatus.indexOf(type) : selectedType.indexOf(type);\n    if (index > -1) return true;\n    return false;\n  };\n\n  console.log('helloi', selectedType, selectedStatus);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Popover // style={{ width: '399px', minHeight: '246px' }}\n    , {\n      id: props.id,\n      open: props.open,\n      anchorEl: props.anchorEl,\n      onClose: props.handleClose,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClearAll,\n        color: \"primary\",\n        size: \"small\",\n        style: {\n          float: \"right\",\n          margin: '9px 16px 0px auto',\n          padding: '0'\n        },\n        children: \" Clear All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        style: {\n          borderBottom: '1px solid #00000029',\n          paddingLeft: '18.5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 5,\n          sm: 5,\n          md: 5,\n          lg: 5,\n          xl: 5,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            style: {\n              marginBottom: '9px'\n            },\n            children: \"Dataset Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: filter.datasetType.map(type => {\n              return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: isChecked(type, 'dataset'),\n                  onChange: e => handleDatasetChange(e),\n                  name: type,\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 45\n                }, this),\n                label: type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1,\n          sm: 1,\n          md: 1,\n          lg: 1,\n          xl: 1,\n          children: /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          sm: 6,\n          md: 6,\n          lg: 6,\n          xl: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            style: {\n              marginBottom: '9px'\n            },\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: filter.status.map(type => {\n              return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: isChecked(type, 'status'),\n                  onChange: e => handleStatusChange(e),\n                  name: type,\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 45\n                }, this),\n                label: type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: !(selectedType.length || selectedStatus.length),\n        onClick: () => apply({\n          datasetType: selectedType,\n          status: selectedStatus\n        }),\n        color: \"primary\",\n        size: \"small\",\n        variant: \"contained\",\n        style: {\n          float: \"right\",\n          margin: '5px',\n          borderRadius: '4px',\n          margin: '9px 16px 9px auto'\n        },\n        children: \" Apply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FilterList, \"IP18+CPq495yzQn0mhvU9h1m9FM=\");\n\n_c = FilterList;\nexport default withStyles(DataSet)(FilterList);\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterList\");","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetView/FilterList.jsx"],"names":["React","useState","DataSet","withStyles","Button","Divider","Grid","Typography","Popover","FormGroup","Checkbox","FormControlLabel","FilterList","props","classes","data","datasetType","name","state","status","count","filter","selectedFilter","clearAll","apply","selectedType","setSelectedType","selectedStatus","setSelectedStatus","handleDatasetChange","e","target","checked","selected","Object","assign","index","indexOf","splice","handleStatusChange","handleClearAll","isChecked","type","param","console","log","id","open","anchorEl","handleClose","vertical","horizontal","float","margin","padding","borderBottom","paddingLeft","marginBottom","map","length","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport DataSet from \"../../../styles/Dataset\";\nimport { withStyles, Button, Divider, Grid, Typography, Popover, FormGroup, Checkbox, FormControlLabel } from \"@material-ui/core\";\n\nconst FilterList = (props) => {\n    const classes = props;\n    // const [anchorEl, setAnchorEl] = React.useState(null);\n    // const handleChange = (event) => {\n    //     setState({ ...state, [event.target.name]: event.target.checked });\n    // };\n    // const handleClick = (event) => {\n    //     setAnchorEl(event.currentTarget);\n    // };\n\n    // const handleClose = () => {\n    //     setAnchorEl(null);\n    // };\n    // const open = Boolean(anchorEl);\n    // const id = open ? 'simple-popover' : undefined;\n    const data = {\n        datasetType: [{ name: 'Parallel', state: true }, { name: 'Monolingual', state: true }, { name: 'ASR', state: true }, { name: 'OCR', state: false }],\n        status: [{ name: 'Pending', state: true }, { name: 'In-Progress', state: true }, { name: 'Completed', state: true }, { name: 'Failed', state: false }]\n    };\n    const count = 0\n    const { filter, selectedFilter, clearAll, apply } = props\n\n    const [selectedType, setSelectedType] = useState(selectedFilter.datasetType)\n    const [selectedStatus, setSelectedStatus] = useState(selectedFilter.status)\n\n    const handleDatasetChange = (e) => {\n        if (e.target.checked)\n            setSelectedType([...selectedType, e.target.name])\n        else {\n            const selected = Object.assign([], selectedType)\n            const index = selected.indexOf(e.target.name);\n\n            if (index > -1) {\n                selected.splice(index, 1);\n                setSelectedType(selected)\n            }\n        }\n\n    }\n    const handleStatusChange = (e) => {\n        if (e.target.checked)\n            setSelectedStatus([...selectedStatus, e.target.name])\n        else {\n            const selected = Object.assign([], selectedStatus)\n            const index = selected.indexOf(e.target.name);\n\n            if (index > -1) {\n                selected.splice(index, 1);\n                setSelectedStatus(selected)\n            }\n        }\n    }\n    const handleClearAll = () => {\n        setSelectedStatus([])\n        setSelectedType([])\n        clearAll({ datasetType: [], status: [] })\n    }\n    const isChecked = (type, param) => {\n        const index = param === 'status' ? selectedStatus.indexOf(type) : selectedType.indexOf(type);\n        if (index > -1)\n            return true\n        return false\n    }\n\n    console.log('helloi', selectedType, selectedStatus)\n    return (\n        <div>\n            <Popover\n                // style={{ width: '399px', minHeight: '246px' }}\n                id={props.id}\n                open={props.open}\n                anchorEl={props.anchorEl}\n                onClose={props.handleClose}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                }}\n            >\n                <Button\n                    onClick={handleClearAll}\n                    color=\"primary\" size=\"small\" style={{ float: \"right\", margin: '9px 16px 0px auto', padding: '0' }}> Clear All\n                </Button>\n                <Grid container style={{ borderBottom: '1px solid #00000029', paddingLeft: '18.5px' }}>\n                    <Grid item xs={5} sm={5} md={5} lg={5} xl={5}>\n                        <Typography style={{ marginBottom: '9px' }}>Dataset Type</Typography>\n                        <FormGroup>\n                            {filter.datasetType.map((type) => {\n                                return (\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox\n                                                checked={isChecked(type, 'dataset')}\n                                                onChange={(e) => handleDatasetChange(e)}\n                                                name={type}\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label={type}\n                                    />)\n                            })}\n                        </FormGroup>\n                    </Grid>\n                    <Grid item xs={1} sm={1} md={1} lg={1} xl={1}>\n                        <Divider orientation=\"vertical\"></Divider>\n                    </Grid>\n                    <Grid item xs={6} sm={6} md={6} lg={6} xl={6}>\n                        <Typography style={{ marginBottom: '9px' }}>Status</Typography>\n                        <FormGroup>\n                            {filter.status.map((type) => {\n                                return (\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox\n                                                checked={isChecked(type, 'status')}\n                                                onChange={(e) => handleStatusChange(e)}\n                                                name={type}\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label={type}\n                                    />)\n                            })}\n                        </FormGroup>\n                    </Grid>\n                </Grid>\n                <Button\n                    disabled={!(selectedType.length || selectedStatus.length)}\n                    onClick={() => apply({ datasetType: selectedType, status: selectedStatus })}\n                    color=\"primary\" size=\"small\" variant=\"contained\" style={{ float: \"right\", margin: '5px', borderRadius: '4px', margin: '9px 16px 9px auto' }}> Apply\n                </Button>\n\n            </Popover>\n        </div >\n    );\n}\nexport default withStyles(DataSet)(FilterList);"]},"metadata":{},"sourceType":"module"}