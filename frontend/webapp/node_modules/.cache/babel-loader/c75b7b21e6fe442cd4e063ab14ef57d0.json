{"ast":null,"code":"var _jsxFileName = \"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetView/ContributionList.jsx\",\n    _s = $RefreshSig$();\n\nimport { withStyles, Link, Button } from \"@material-ui/core\";\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport DataSet from \"../../../styles/Dataset\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport MUIDataTable from \"mui-datatables\";\nimport MyContributionList from \"../../../../redux/actions/api/DataSet/DatasetView/MyContribution\";\nimport { PageChange, RowChange, FilterTable, clearFilter } from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\";\nimport ClearReport from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\";\nimport Dialog from \"../../../components/common/Dialog\";\nimport { Cached, DeleteOutline, VerticalAlignTop } from '@material-ui/icons';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport { useParams } from \"react-router\";\nimport C from \"../../../../redux/actions/constants\";\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport FilterList from \"./FilterList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ContributionList = props => {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch(ClearReport);\n  const myContributionReport = useSelector(state => state.myContributionReport);\n  const PageInfo = useSelector(state => state.pageChangeDetails);\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"Do you want to delete\");\n  const [title, setTitle] = useState(\"Delete\");\n  const {\n    added\n  } = useParams();\n  const data = myContributionReport.filteredData;\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const popoverOpen = Boolean(anchorEl);\n  const id = popoverOpen ? 'simple-popover' : undefined;\n  useEffect(() => {\n    (myContributionReport.filteredData.length === 0 || myContributionReport.refreshStatus || added) && MyContributionListApi();\n  }, []);\n\n  const MyContributionListApi = () => {\n    dispatch(ClearReport());\n    const userObj = new MyContributionList(\"SAVE\", \"A_FBTTR-VWSge-1619075981554\", \"241006445d1546dbb5db836c498be6381606221196566\");\n    dispatch(APITransport(userObj));\n  };\n\n  const handleShowFilter = event => {\n    setAnchorEl(event.currentTarget);\n    console.log(myContributionReport.filter, myContributionReport.selectedFilter);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const clearAll = data => {\n    dispatch(clearFilter(data, C.CLEAR_FILTER));\n    console.log(\"clearAll\", data);\n  };\n\n  const apply = data => {\n    dispatch(FilterTable(data, C.CONTRIBUTION_TABLE));\n    debugger;\n    console.log(\"apply\", data);\n  };\n\n  const fetchHeaderButton = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        size: \"medium\",\n        variant: \"outlined\",\n        className: classes.ButtonRefresh,\n        onClick: () => MyContributionListApi(),\n        children: [/*#__PURE__*/_jsxDEV(Cached, {\n          className: classes.iconStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 159\n        }, this), \"Refresh\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"default\",\n        size: \"medium\",\n        variant: \"outlined\",\n        className: classes.buttonStyle,\n        onClick: handleShowFilter,\n        children: [\" \", /*#__PURE__*/_jsxDEV(FilterListIcon, {\n          className: classes.iconStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 144\n        }, this), \"Filter\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true);\n  };\n\n  const handleSetValues = name => {\n    setTitle(`Delete ${name}  `);\n    setMessage(`Do you want to delete ${name} ? `);\n    setOpen(true);\n  };\n\n  const renderStatus = (id, name, value) => {\n    if (value === \"In-Progress\") {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        className: classes.link,\n        onClick: () => {\n          history.push(`${process.env.PUBLIC_URL}/dataset-status/${value}/${name}/${id}`);\n        },\n        children: \" In-Progress \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 32\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [value, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 32\n      }, this);\n    }\n  };\n\n  const renderAction = (name, value) => {\n    if (value === \"In-Progress\") {} else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.action,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.link,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            className: classes.link,\n            color: \"primary\",\n            onClick: () => {\n              history.push(`${process.env.PUBLIC_URL}/submit-dataset/upload`);\n            },\n            children: [\" Update \", /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(VerticalAlignTop, {\n                style: {\n                  \"height\": \"0.8em\"\n                },\n                onClick: () => {\n                  handleSetValues(name);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 188\n              }, this), \"  \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 182\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.span,\n          children: /*#__PURE__*/_jsxDEV(DeleteOutline, {\n            onClick: () => {\n              handleSetValues(name);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 33\n      }, this);\n    }\n  };\n\n  const handleRowClick = rowData => {\n    history.push(`${process.env.PUBLIC_URL}/dataset-status/${rowData[4]}/${rowData[1]}/${rowData[0]}`); // if(rowMeta.colIndex !== 6){\n    //         const value = data[rowMeta.rowIndex].submitRefNumber;\n    //         const status = data[rowMeta.rowIndex].status.toLowerCase();\n    //         const name = data[rowMeta.rowIndex].datasetName;\n    //         history.push(`${process.env.PUBLIC_URL}/dataset-status/${status}/${name}/${value}`)\n    // }\n  };\n\n  const handleDialogSubmit = () => {};\n\n  const processTableClickedNextOrPrevious = (page, sortOrder) => {\n    dispatch(PageChange(page, C.PAGE_CHANGE));\n  };\n\n  const columns = [{\n    name: \"submitRefNumber\",\n    label: \"s id\",\n    options: {\n      filter: false,\n      sort: false,\n      display: \"excluded\"\n    }\n  }, {\n    name: \"datasetName\",\n    label: \"Dataset Name\",\n    options: {\n      filter: false,\n      sort: true\n    }\n  }, {\n    name: \"datasetType\",\n    label: \"Dataset Type\",\n    options: {\n      filter: false,\n      sort: true\n    }\n  }, {\n    name: \"submittedOn\",\n    label: \"Submitted On\",\n    options: {\n      filter: false,\n      sort: true\n    }\n  }, {\n    name: \"status\",\n    label: \"Status\",\n    options: {\n      filter: true,\n      sort: true\n    }\n  } // {\n  // name: \"Status\",\n  // label: \"Status\",\n  // options: {\n  //         filter  : false,\n  //         sort    : false,\n  //         empty   : true,\n  //         customBodyRender: (value, tableMeta, updateValue) => {\n  //                         if (tableMeta.rowData) {\n  //                                 return <div>{renderStatus(tableMeta.rowData[0],tableMeta.rowData[2],tableMeta.rowData[4])}</div>;\n  //                         }\n  //                 },\n  //         },\n  // },\n  // {\n  // name    : \"Action\",\n  // label   : \"Action\",\n  // options: {\n  //                 filter  : false,\n  //                 sort    : false,\n  //                 empty   : true,\n  //                 customBodyRender: (value, tableMeta, updateValue) => {\n  //                         if (tableMeta.rowData) {\n  //                                 return <div>{renderAction(tableMeta.rowData[2], tableMeta.rowData[4])}</div>;\n  //                         }\n  //         },\n  // },\n  // },\n  ];\n  const options = {\n    textLabels: {\n      body: {\n        noMatch: \"No records\"\n      },\n      toolbar: {\n        search: \"Search\",\n        viewColumns: \"View Column\"\n      },\n      pagination: {\n        rowsPerPage: \"Rows per page\"\n      },\n      options: {\n        sortDirection: \"desc\"\n      }\n    },\n    onRowClick: rowData => handleRowClick(rowData),\n    // onCellClick     : (colData, cellMeta) => handleRowClick( cellMeta),\n    customToolbar: fetchHeaderButton,\n    filter: false,\n    displaySelectToolbar: false,\n    fixedHeader: false,\n    filterType: \"checkbox\",\n    download: false,\n    print: false,\n    viewColumns: false,\n    rowsPerPage: PageInfo.count,\n    rowsPerPageOptions: [10, 25, 50, 100],\n    selectableRows: \"none\",\n    page: PageInfo.page,\n    onTableChange: (action, tableState) => {\n      switch (action) {\n        case \"changePage\":\n          processTableClickedNextOrPrevious(tableState.page);\n          break;\n\n        case \"changeRowsPerPage\":\n          dispatch(RowChange(tableState.rowsPerPage, C.ROW_COUNT_CHANGE));\n          break;\n\n        default:\n      }\n    }\n  };\n  const {\n    classes\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.breadcrum,\n      children: /*#__PURE__*/_jsxDEV(BreadCrum, {\n        links: [UrlConfig.dataset],\n        activeLink: \"My Contribution\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(MUIDataTable, {\n      title: `My Contribution`,\n      data: data,\n      columns: columns,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 25\n    }, this), open && /*#__PURE__*/_jsxDEV(Dialog, {\n      message: message,\n      handleClose: () => {\n        setOpen(false);\n      },\n      open: true,\n      title: title,\n      handleSubmit: () => {\n        handleDialogSubmit();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 34\n    }, this), popoverOpen && /*#__PURE__*/_jsxDEV(FilterList, {\n      id: id,\n      open: popoverOpen,\n      anchorEl: anchorEl,\n      handleClose: handleClose,\n      filter: myContributionReport.filter,\n      selectedFilter: myContributionReport.selectedFilter,\n      clearAll: clearAll,\n      apply: apply\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 17\n  }, this);\n};\n\n_s(ContributionList, \"2IaciLk02xyU3CHigNe8KverKIc=\", false, function () {\n  return [useHistory, useDispatch, useSelector, useSelector, useParams];\n});\n\n_c = ContributionList;\nexport default withStyles(DataSet)(ContributionList);\n\nvar _c;\n\n$RefreshReg$(_c, \"ContributionList\");","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/DataSet/DatasetView/ContributionList.jsx"],"names":["withStyles","Link","Button","BreadCrum","React","useEffect","useState","useDispatch","useSelector","useHistory","DataSet","APITransport","MUIDataTable","MyContributionList","PageChange","RowChange","FilterTable","clearFilter","ClearReport","Dialog","Cached","DeleteOutline","VerticalAlignTop","UrlConfig","useParams","C","FilterListIcon","FilterList","ContributionList","props","history","dispatch","myContributionReport","state","PageInfo","pageChangeDetails","open","setOpen","message","setMessage","title","setTitle","added","data","filteredData","anchorEl","setAnchorEl","popoverOpen","Boolean","id","undefined","length","refreshStatus","MyContributionListApi","userObj","handleShowFilter","event","currentTarget","console","log","filter","selectedFilter","handleClose","clearAll","CLEAR_FILTER","apply","CONTRIBUTION_TABLE","fetchHeaderButton","classes","ButtonRefresh","iconStyle","buttonStyle","handleSetValues","name","renderStatus","value","link","push","process","env","PUBLIC_URL","renderAction","action","span","handleRowClick","rowData","handleDialogSubmit","processTableClickedNextOrPrevious","page","sortOrder","PAGE_CHANGE","columns","label","options","sort","display","textLabels","body","noMatch","toolbar","search","viewColumns","pagination","rowsPerPage","sortDirection","onRowClick","customToolbar","displaySelectToolbar","fixedHeader","filterType","download","print","count","rowsPerPageOptions","selectableRows","onTableChange","tableState","ROW_COUNT_CHANGE","breadcrum","dataset"],"mappings":"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","sourcesContent":["import { withStyles, Link, Button } from \"@material-ui/core\";\nimport BreadCrum from '../../../components/common/Breadcrum';\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport DataSet from \"../../../styles/Dataset\";\nimport APITransport from \"../../../../redux/actions/apitransport/apitransport\";\nimport MUIDataTable from \"mui-datatables\";\nimport MyContributionList from \"../../../../redux/actions/api/DataSet/DatasetView/MyContribution\";\nimport { PageChange, RowChange,FilterTable,clearFilter } from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\"\nimport ClearReport from \"../../../../redux/actions/api/DataSet/DatasetView/DatasetAction\";\nimport Dialog from \"../../../components/common/Dialog\"\nimport { Cached, DeleteOutline, VerticalAlignTop } from '@material-ui/icons';\nimport UrlConfig from '../../../../configs/internalurlmapping';\nimport { useParams } from \"react-router\";\nimport C from \"../../../../redux/actions/constants\";\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport FilterList from \"./FilterList\";\nconst ContributionList = (props) => {\n\n        const history = useHistory();\n        const dispatch = useDispatch(ClearReport);\n        const myContributionReport = useSelector((state) => state.myContributionReport);\n        const PageInfo = useSelector((state) => state.pageChangeDetails);\n        const [open, setOpen] = useState(false)\n        const [message, setMessage] = useState(\"Do you want to delete\")\n        const [title, setTitle] = useState(\"Delete\")\n        const { added } = useParams()\n        const data = myContributionReport.filteredData\n        const [anchorEl, setAnchorEl] = React.useState(null);\n        const popoverOpen = Boolean(anchorEl);\n        const id = popoverOpen ? 'simple-popover' : undefined;\n\n        useEffect(() => {\n                (myContributionReport.filteredData.length === 0 || myContributionReport.refreshStatus || added) && MyContributionListApi()\n        }, []);\n\n        const MyContributionListApi = () => {\n                dispatch(ClearReport());\n                const userObj = new MyContributionList(\"SAVE\", \"A_FBTTR-VWSge-1619075981554\", \"241006445d1546dbb5db836c498be6381606221196566\");\n                dispatch(APITransport(userObj));\n        }\n\n        const handleShowFilter = (event) => {\n                setAnchorEl(event.currentTarget);\n                console.log(myContributionReport.filter, myContributionReport.selectedFilter)\n        }\n        const handleClose = () => {\n                setAnchorEl(null);\n        };\n        const clearAll = (data) => {\n                dispatch(clearFilter(data, C.CLEAR_FILTER))\n                console.log(\"clearAll\", data)\n        }\n        const apply = (data) => {\n                \n                dispatch(FilterTable(data, C.CONTRIBUTION_TABLE))\n                debugger\n                console.log(\"apply\", data)\n        }\n\n\n        const fetchHeaderButton = () => {\n                return <>\n                        \n\n                        <Button color={\"primary\"} size=\"medium\" variant=\"outlined\" className={classes.ButtonRefresh}  onClick={() => MyContributionListApi()}><Cached className={classes.iconStyle} />Refresh</Button>\n                        <Button color={\"default\"} size=\"medium\" variant=\"outlined\" className={classes.buttonStyle} onClick={handleShowFilter}> <FilterListIcon className={classes.iconStyle} />Filter</Button>\n                </>\n        }\n\n        const handleSetValues = (name) => {\n                setTitle(`Delete ${name}  `)\n                setMessage(`Do you want to delete ${name} ? `)\n                setOpen(true)\n        }\n\n        const renderStatus = (id, name, value) => {\n                if (value === \"In-Progress\") {\n                        return <Link className={classes.link} onClick={() => { history.push(`${process.env.PUBLIC_URL}/dataset-status/${value}/${name}/${id}`) }}> In-Progress </Link>\n                }\n                else {\n                        return <span\n                        >{value} </span>\n                }\n        }\n\n        const renderAction = (name, value) => {\n                if (value === \"In-Progress\") { }\n                else {\n                        return (<div className={classes.action}>\n                                <div className={classes.link}>\n                                        <Link className={classes.link} color={\"primary\"} onClick={() => { history.push(`${process.env.PUBLIC_URL}/submit-dataset/upload`) }}> Update <div ><VerticalAlignTop style={{ \"height\": \"0.8em\" }} onClick={() => { handleSetValues(name) }} />  </div></Link>\n                                </div>\n                                <div className={classes.span\n                                }>\n                                        <DeleteOutline onClick={() => { handleSetValues(name) }} />\n                                </div>\n                        </div>)\n                }\n        }\n\n        const handleRowClick = (rowData) => {\n\n                history.push(`${process.env.PUBLIC_URL}/dataset-status/${rowData[4]}/${rowData[1]}/${rowData[0]}`)\n\n                // if(rowMeta.colIndex !== 6){\n                //         const value = data[rowMeta.rowIndex].submitRefNumber;\n                //         const status = data[rowMeta.rowIndex].status.toLowerCase();\n                //         const name = data[rowMeta.rowIndex].datasetName;\n                //         history.push(`${process.env.PUBLIC_URL}/dataset-status/${status}/${name}/${value}`)\n                // }\n        };\n\n        const handleDialogSubmit = () => {\n\n        }\n\n        const processTableClickedNextOrPrevious = (page, sortOrder) => {\n                dispatch(PageChange(page, C.PAGE_CHANGE));\n\n        }\n\n\n\n        const columns = [\n                {\n                        name: \"submitRefNumber\",\n                        label: \"s id\",\n                        options: {\n                                filter: false,\n                                sort: false,\n                                display: \"excluded\",\n                        },\n                },\n\n                {\n                        name: \"datasetName\",\n                        label: \"Dataset Name\",\n                        options: {\n                                filter: false,\n                                sort: true,\n                        },\n                },\n                {\n                        name: \"datasetType\",\n                        label: \"Dataset Type\",\n                        options: {\n                                filter: false,\n                                sort: true,\n                        },\n                },\n                {\n                        name: \"submittedOn\",\n                        label: \"Submitted On\",\n                        options: {\n                                filter: false,\n                                sort: true,\n\n                        },\n                },\n                {\n                        name: \"status\",\n                        label: \"Status\",\n                        options: {\n                                filter: true,\n                                sort: true,\n\n                        },\n                },\n                // {\n                // name: \"Status\",\n                // label: \"Status\",\n                // options: {\n                //         filter  : false,\n                //         sort    : false,\n                //         empty   : true,\n                //         customBodyRender: (value, tableMeta, updateValue) => {\n                //                         if (tableMeta.rowData) {\n                //                                 return <div>{renderStatus(tableMeta.rowData[0],tableMeta.rowData[2],tableMeta.rowData[4])}</div>;\n                //                         }\n                //                 },\n                //         },\n                // },\n\n                // {\n                // name    : \"Action\",\n                // label   : \"Action\",\n                // options: {\n                //                 filter  : false,\n                //                 sort    : false,\n                //                 empty   : true,\n                //                 customBodyRender: (value, tableMeta, updateValue) => {\n                //                         if (tableMeta.rowData) {\n                //                                 return <div>{renderAction(tableMeta.rowData[2], tableMeta.rowData[4])}</div>;\n                //                         }\n                //         },\n                // },\n                // },\n        ];\n\n\n        const options = {\n\n\n                textLabels: {\n                        body: {\n\n                                noMatch: \"No records\"\n                        },\n                        toolbar: {\n                                search: \"Search\",\n                                viewColumns: \"View Column\",\n                        },\n                        pagination: {\n                                rowsPerPage: \"Rows per page\",\n                        },\n                        options: { sortDirection: \"desc\" },\n                },\n                onRowClick: rowData => handleRowClick(rowData),\n                // onCellClick     : (colData, cellMeta) => handleRowClick( cellMeta),\n                customToolbar: fetchHeaderButton,\n                filter: false,\n                displaySelectToolbar: false,\n                fixedHeader: false,\n                filterType: \"checkbox\",\n                download: false,\n                print: false,\n                viewColumns: false,\n                rowsPerPage: PageInfo.count,\n\n                rowsPerPageOptions: [10, 25, 50, 100],\n                selectableRows: \"none\",\n                page: PageInfo.page,\n                onTableChange: (action, tableState) => {\n                        switch (action) {\n                                case \"changePage\":\n                                        processTableClickedNextOrPrevious(\n                                                tableState.page\n                                        );\n                                        break;\n                                case \"changeRowsPerPage\":\n                                        dispatch(RowChange(tableState.rowsPerPage, C.ROW_COUNT_CHANGE))\n                                        break;\n                                default:\n                        }\n                },\n\n\n        };\n\n        const { classes } = props;\n        return (\n                <div>\n                        <div className={classes.breadcrum}>\n                                <BreadCrum links={[UrlConfig.dataset]} activeLink=\"My Contribution\" />\n                        </div>\n\n                        {/* <div className={classes.title}>\n                                \n                        </div> */}\n\n\n                        <MUIDataTable\n                                title={`My Contribution`}\n                                data={data}\n                                columns={columns}\n                                options={options}\n                        />\n\n                        {open && <Dialog\n                                message={message}\n                                handleClose={() => { setOpen(false) }}\n                                open\n                                title={title}\n                                handleSubmit={() => { handleDialogSubmit() }}\n                        />}\n                        {popoverOpen && <FilterList\n                                id={id}\n                                open={popoverOpen}\n                                anchorEl={anchorEl}\n                                handleClose={handleClose}\n                                filter={myContributionReport.filter}\n                                selectedFilter={myContributionReport.selectedFilter}\n                                clearAll={clearAll}\n                                apply={apply}\n                        />\n\n\n                        }\n                </div>\n        );\n};\n\nexport default withStyles(DataSet)(ContributionList);"]},"metadata":{},"sourceType":"module"}