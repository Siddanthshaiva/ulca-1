{"ast":null,"code":"var _jsxFileName = \"/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/ChartRender.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { withStyles, Typography, Link, MuiThemeProvider, createMuiTheme, Paper, Grid } from \"@material-ui/core\";\nimport BreadCrum from '../../components/common/Breadcrum';\nimport ChartStyles from \"../../styles/Dashboard\";\nimport { ResponsiveContainer, BarChart, Bar, Brush, Cell, CartesianGrid, ReferenceLine, ReferenceArea, XAxis, YAxis, Tooltip, Legend, ErrorBar, LabelList, Rectangle } from 'recharts';\nimport Select from 'react-select';\nimport APITransport from \"../../../redux/actions/apitransport/apitransport\";\nimport FetchLanguageDataSets from \"../../../redux/actions/api/Dashboard/languageDatasets\";\nimport { isMobile } from 'react-device-detect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar jp = require('jsonpath');\n\nvar colors = [\"188efc\", \"7a47a4\", \"b93e94\", \"1fc6a4\", \"f46154\", \"d088fd\", \"f3447d\", \"188efc\", \"f48734\", \"189ac9\", \"0e67bd\"];\n\nconst ChartRender = props => {\n  _s();\n\n  const [selectedOption, setselectedOption] = useState({\n    value: 'Parallel Corpus',\n    label: 'Parallel Corpus'\n  });\n  console.log(selectedOption);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const DashboardReport = useSelector(state => state.dashboardReport);\n  const {\n    classes\n  } = props;\n  const options = [{\n    value: 'Parallel Corpus',\n    label: 'Parallel Corpus'\n  }, {\n    value: 'Monolingual Dataset',\n    label: 'Monolingual Dataset'\n  }, {\n    value: 'ASR / TTS Dataset',\n    label: 'ASR / TTS Dataset'\n  }, {\n    value: 'OCR Dataset',\n    label: 'OCR Dataset'\n  }];\n  console.log(\",\", DashboardReport);\n  useEffect(() => {\n    const userObj = new FetchLanguageDataSets(\"parallel-corpus\", \"languagePairs\");\n    dispatch(APITransport(userObj));\n  }, []);\n\n  const handleChange = selectedOptionValue => {\n    setselectedOption({\n      selectedOption: selectedOptionValue\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      className: classes.paper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.title,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"b\",\n          component: \"h3\",\n          children: \"Dataset Type :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: selectedOption,\n          onChange: value => {\n            handleChange(value);\n          },\n          options: options,\n          defaultValue: selectedOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"95%\",\n        height: 450,\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          width: 900,\n          height: 450,\n          data: DashboardReport,\n          maxBarSize: 100,\n          children: [/*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"label\",\n            textAnchor: isMobile ? \"end\" : \"middle\",\n            tick: {\n              angle: isMobile ? -60 : 0\n            },\n            height: isMobile ? 100 : 60,\n            interval: 0,\n            position: \"insideLeft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            type: \"number\",\n            dx: 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n            horizontal: true,\n            vertical: false,\n            textAnchor: \"middle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"value\",\n            radius: [4, 4, 0, 0],\n            maxBarSize: 30,\n            children: DashboardReport.length > 0 && DashboardReport.map((entry, index) => {\n              const color = colors[index < 9 ? index : index % 10];\n              return /*#__PURE__*/_jsxDEV(Cell, {\n                fill: `#${color}`\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 56\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 17\n  }, this);\n};\n\n_s(ChartRender, \"MXhTDfLgSDUdEkehg0mtNz1GT80=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c = ChartRender;\nexport default withStyles(ChartStyles)(ChartRender);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartRender\");","map":{"version":3,"sources":["/home/sajish/Documents/Sajish/ULCA/ULCA/frontend/webapp/src/ui/container/Dashboard/ChartRender.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useHistory","withStyles","Typography","Link","MuiThemeProvider","createMuiTheme","Paper","Grid","BreadCrum","ChartStyles","ResponsiveContainer","BarChart","Bar","Brush","Cell","CartesianGrid","ReferenceLine","ReferenceArea","XAxis","YAxis","Tooltip","Legend","ErrorBar","LabelList","Rectangle","Select","APITransport","FetchLanguageDataSets","isMobile","jp","require","colors","ChartRender","props","selectedOption","setselectedOption","value","label","console","log","history","dispatch","DashboardReport","state","dashboardReport","classes","options","userObj","handleChange","selectedOptionValue","container","paper","title","angle","length","map","entry","index","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {  useHistory } from \"react-router-dom\";\n\nimport { withStyles, Typography,Link, MuiThemeProvider, createMuiTheme,Paper, Grid } from \"@material-ui/core\";\n\nimport BreadCrum from '../../components/common/Breadcrum';\nimport ChartStyles from \"../../styles/Dashboard\";\nimport {\n    ResponsiveContainer,\n    BarChart, Bar, Brush, Cell, CartesianGrid, ReferenceLine, ReferenceArea,\n    XAxis, YAxis, Tooltip, Legend, ErrorBar, LabelList, Rectangle\n} from 'recharts';\nimport Select from 'react-select';\nimport APITransport from \"../../../redux/actions/apitransport/apitransport\";\nimport FetchLanguageDataSets from \"../../../redux/actions/api/Dashboard/languageDatasets\";\n\nimport { isMobile } from 'react-device-detect';\n\nvar jp = require('jsonpath')\nvar colors = [\"188efc\", \"7a47a4\", \"b93e94\", \"1fc6a4\", \"f46154\", \"d088fd\", \"f3447d\", \"188efc\", \"f48734\", \"189ac9\", \"0e67bd\"]\n\n\nconst ChartRender = (props) => {\n    const [selectedOption, setselectedOption] = useState({ value: 'Parallel Corpus', label: 'Parallel Corpus' });\n\n        console.log(selectedOption)\n        const history                 = useHistory();\n        const dispatch                = useDispatch();\n        const DashboardReport         = useSelector( (state) => state.dashboardReport);\n        const { classes }             = props;\n        const options = [\n            { value: 'Parallel Corpus', label: 'Parallel Corpus' },\n            { value: 'Monolingual Dataset', label: 'Monolingual Dataset' },\n            { value: 'ASR / TTS Dataset', label: 'ASR / TTS Dataset' },\n            { value: 'OCR Dataset', label: 'OCR Dataset' },\n          ];\n        console.log(\",\",DashboardReport)\n        useEffect(()                  => {\n                const userObj         = new FetchLanguageDataSets( \"parallel-corpus\", \"languagePairs\");\n                 dispatch(APITransport(userObj));\n        }, []);\n\n        const handleChange = selectedOptionValue => {\n            setselectedOption({ selectedOption : selectedOptionValue });\n          };\n\n    return (\n\n                <div className={classes.container}>\n\n                    \n                    {/* <div className={classes.breadcrum}>\n                <BreadCrum links={[\"Dataset\"]} activeLink=\"Submit Dataset\" />\n            </div> */}\n            <Paper elevation={3} className={classes.paper}>\n                            \n                            \n            <div className={classes.title}>\n                                <Typography variant=\"b\" component=\"h3\">Dataset Type :</Typography>\n                                <Select\n        value={selectedOption}\n        onChange={(value)=>{handleChange(value)}}\n        options={options}\n        defaultValue = {selectedOption}\n      />\n                        </div>\n\n                            <ResponsiveContainer width=\"95%\" height={450}>\n                                <BarChart width={900} height={450} data={DashboardReport} maxBarSize={100} >\n                                    <XAxis dataKey=\"label\"\n                                        textAnchor={isMobile ? \"end\" : \"middle\"}\n                                        tick={{ angle: isMobile ? -60 : 0 }} height={isMobile ? 100 : 60}\n                                        interval={0}\n                                        position=\"insideLeft\"\n\n                                    />\n                                    <YAxis type=\"number\" dx={0} />\n                                    <CartesianGrid horizontal={true} vertical={false} textAnchor={\"middle\"} />\n\n                                    <Tooltip />\n                                    <Bar dataKey=\"value\" radius={[4, 4, 0, 0]} maxBarSize={30}>\n\n                                        {\n                                            DashboardReport.length > 0 && DashboardReport.map((entry, index) => {\n                                                const color = colors[index < 9 ? index : index % 10]\n                                                return <Cell key={index} fill={`#${color}`} />;\n                                            })\n                                        }\n                                    </Bar>\n                                </BarChart>\n                            </ResponsiveContainer>\n\n                        </Paper>\n                    </div>\n               \n    )\n   \n\n}\n\n\n\nexport default withStyles(ChartStyles)(ChartRender);\n"]},"metadata":{},"sourceType":"module"}